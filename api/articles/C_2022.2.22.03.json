{"title":"C语言特性","uid":"b145a25a172abc434996c94993756fbb","slug":"C_2022.2.22.03","date":"2022-02-22T13:19:00.000Z","updated":"2023-11-26T10:38:32.665Z","comments":true,"path":"api/articles/C_2022.2.22.03.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.f24dba1c0741d3e26719d27dcbfa9ddb?rik=ixXaTtSKatsoXg&riu=http%3a%2f%2fwww.huatengzy.com%2fuploadfile%2f2020%2f1124%2f20201124084901674.jpg&ehk=8cudqdmImcXfxpnTIdHfG5Fw3USMKmi72wqJwGyq34M%3d&risl=&pid=ImgRaw&r=0","content":"<h2 id=\"2-0-C语言开发环境搭建\"><a href=\"#2-0-C语言开发环境搭建\" class=\"headerlink\" title=\"2.0 C语言开发环境搭建\"></a>2.0 C语言开发环境搭建</h2><ol>\n<li>Visual studio（全宇宙最强IDE）</li>\n</ol>\n<p>记得勾选C++就可以</p>\n<h2 id=\"2-1-C语言常用命令\"><a href=\"#2-1-C语言常用命令\" class=\"headerlink\" title=\"2.1 C语言常用命令\"></a>2.1 C语言常用命令</h2><p>Dir：列出当前目录下的文件以及文件卷<br>md：创建目录<br>rd ：删除目录<br>cd：进入指定目录<br>cd..：退回上一级目录<br>cd&#x2F;：退回根目录<br>del：删除文件<br>exit：退出DOS<br>cl：编译和链接<br>注意要点：</p>\n<ol>\n<li>使用Visual studio自带编译器执行</li>\n<li>不在同一盘符内不可执行需要进入到程序所在盘符（不用CD）</li>\n<li>进入盘符之后需要CD进入文件卷，进入文件卷之后再CI编译和链接</li>\n<li>注意指令间的空格</li>\n</ol>\n<h2 id=\"2-1-1-练习：使用命令行生成一个关机程序\"><a href=\"#2-1-1-练习：使用命令行生成一个关机程序\" class=\"headerlink\" title=\"2.1.1 练习：使用命令行生成一个关机程序\"></a>2.1.1 练习：使用命令行生成一个关机程序</h2><pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">#include &lt;stdlib.h&gt;\nvoid main () &#123;\nsystem(&quot;shutdown -s -t 600&quot;);\n&#125;</code></pre>\n<p>编译：cl <name>.c<br>生成取消程序<br>Main函数是主要程序，项目中必须有，仅只允许有一个，它是一个程序的入口。</p>\n<h2 id=\"2-2-1-system-“pause”-和getchar-的区别\"><a href=\"#2-2-1-system-“pause”-和getchar-的区别\" class=\"headerlink\" title=\"2.2.1 system(“pause”)和getchar()的区别\"></a>2.2.1 system(“pause”)和getchar()的区别</h2><p>相同点：两者都是让程序暂停<br>区别：</p>\n<ol>\n<li>getchar(); 读取一个字符</li>\n<li>System(“pause”)；既让操作系统来暂停该程序的执行，同时程序运行到此语句时，会让程序的窗口上显示”Press any key to continue…” 也就是”按任意键继续“，即等待的用户按下任意键使得该程序从暂停状态返回到执行状态继续从刚才暂停的地方开始执行。</li>\n</ol>\n<h2 id=\"2-3-1-include-说明\"><a href=\"#2-3-1-include-说明\" class=\"headerlink\" title=\"2.3.1  #include 说明\"></a>2.3.1  #include 说明</h2><p>Include 包含我们需要的函数定义。<br>windows系统预制了很多库函数，我们需要采用就需要用#include去调用这些。<br>源代码最终是需要被编译器处理的。编译器编译的过程比较复杂，但一般需要经历好几步。第一步是预处理。所谓预处理，就是编译前，先进行些预先的处理，如代替源代码中需要代替的部分。#include 就是这么一个预处理指示指令。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#include 是C语言预处理器标识符。#和include之间可以有多个空格。#也不一定要顶格，但是一定是第一个非空白字符。#include的作用，是告诉编译器在编译前，要做一些预先处理：将后面&lt;&gt;中的文件内容包含到当前文件内，所谓包含，是指将&lt;&gt;中列出的文件的内容复制到当前文件里。</code></pre>\n<p>注意：#一定要是第一个非空白字符。否则编译器会提示错误，并且错误信息和出错原因完全不匹配。<br>因为getchar 和 printf 两个函数的声明位于 Stdio.h 文件中，所以简单的用#include把stdio.h文件包含进来，自然就把1getchar 和 printf 两个函数的声明包含进来了。<br>说明：函数声明只是向编译器登记有这么一个函数，声明了函数不调用这个函数，是被允许的。这也就是为什么包含了整个stdio.h文件，里面声明了很多其他函数，但实际没有使用这些函数而编译器又不提示的原因。</p>\n<h2 id=\"2-4-1-BUG的意思\"><a href=\"#2-4-1-BUG的意思\" class=\"headerlink\" title=\"2.4.1 BUG的意思\"></a>2.4.1 BUG的意思</h2><p>Bug的英文意思是臭虫，被引入到计算机领域，需要追溯到第一代计算机时代。当时的计算机是由许多真空管构成，需要利用大量的电力使真空管发光。某天，一只虫子爬进了其中的某只真空管中，计算机于是停止工作了。研究人员耗费了很长时间，找来找去，一处地方一处地方排查，终于发现这个虫子，取出虫子后，计算机就恢复了正常，于是BUG这个词语就在计算机领域中代表了隐藏的错误、缺陷、漏洞或者问题。把排除错误的过程称为DeBug。</p>\n<h2 id=\"2-4-2-断点调试\"><a href=\"#2-4-2-断点调试\" class=\"headerlink\" title=\"2.4.2 断点调试\"></a>2.4.2 断点调试</h2><p>断电是为了方便程序员在调试过程中观察程序内部各状态而专门设置的一种调试手段。也就是在调试模式下运行程序过程中，当程序语句运行到设置断点后，暂停程序运行，但是程序当时的内存，寄存器，上下文环境等数据都被保持，并且在源码编辑器中指示出当前停留在代码的哪一行。然后程序员就可以不慌不忙利用调试器查看程序内部状态。</p>\n<h2 id=\"2-4-3-C语言程序编译过程\"><a href=\"#2-4-3-C语言程序编译过程\" class=\"headerlink\" title=\"2.4.3 C语言程序编译过程\"></a>2.4.3 C语言程序编译过程</h2><h3 id=\"预处理：\"><a href=\"#预处理：\" class=\"headerlink\" title=\"预处理：\"></a>预处理：</h3><p>预处理就过程实际上是处理”#”,将include包含的头文件直接拷贝到hell.c当中；将#define 定义的宏进行替换，同时将代码中没用的注释部分删除等<br>具体做的事情如下：</p>\n<ol>\n<li>将所有的#define 删除，并且展开所有的宏定义。说白了就是字符替换</li>\n<li>处理所有的条件编译指令。#ifdef #idndf #endif等，就是带#的那些</li>\n<li>处理#include，将#include指向的文件插入该行出</li>\n<li>删除所有注释</li>\n<li>添加行号和文件标识，这样的在调试和编译出错的时候才知道是哪一个文件的哪一行。</li>\n<li>保留#pragma 编译器指令，因为编译器需要使用它们。</li>\n</ol>\n<h3 id=\"编译：\"><a href=\"#编译：\" class=\"headerlink\" title=\"编译：\"></a>编译：</h3><p>编译的过程实质上是把高级语言翻译为机器语言，即对a.c做了这些事情。</p>\n<ol>\n<li>词法分析</li>\n<li>语法分析</li>\n<li>语义分析</li>\n<li>优化后生成相应的汇编代码</li>\n</ol>\n<p>从高级语言到汇编语言再到机器码<br>Gcc -s hello.c -o a.s 可以生成汇编代码<br>Gcc -c hello.c -o a.o 可以将源文件翻译成二进制文件。类Uinx系统编译的结果生成.o文件，Windows系统是生成.obj文件。<br>编译的过程就是把hello.c翻译成二进制文件</p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>就像刚才的hello.c它使用到了C标准库的东西”printf”,但是编译过程只是把源文件翻译成二进制而已，这个二进制还不能直接执行，这个时候就需要做一个动作，将翻译成二进制与需要用到的库绑定在一起。举个例子编译过的过程就是比如人要打你，你打电话叫人。你的人还没到就跟人打，这肯定被人打的惨不忍睹，肯定是你的人到了才打比较保险。</p>\n<p>Gcc hello.c -o a 可以生成可执行程序。即Gcc不带任何参数。ldd就可以看到你的可执行程序依赖的库。</p>\n<p>可以看到a.o的大小是1.1k，毕竟它只是把源文件翻译成二进制文件。a却有7k，应该是他多了很多绳子，在运行时候这些绳子就将对应的库函数牵过来。很形象的比喻。</p>\n<h2 id=\"2-4-4-C语言程序结构\"><a href=\"#2-4-4-C语言程序结构\" class=\"headerlink\" title=\"2.4.4 C语言程序结构\"></a>2.4.4 C语言程序结构</h2><ol>\n<li>一个程序由一个或多个源文件组成</li>\n</ol>\n<p>预处理指令例如包含头文件<br>全局声明     在函数之外进行的数据声明<br>函数定义     函数用来实现的功能</p>\n<ol>\n<li>函数是C程序的主要组成部分</li>\n</ol>\n<p>必须包含一个Main函数（只能有一个）<br>每个函数都用来实现若干特定功能<br>被调用的函数可以是库函数，也可以是自己编制设计的函数<br>程序总是从main函数开始执行</p>\n<ol>\n<li>C程序对计算机的操作由C语句完成</li>\n</ol>\n<p>C程序书写格式是比较自由的，一行可以几个语句，便于阅读只写一行<br>数据声明和语句最后必须有分号<br>C语言本身不提供输入输出语句<br>程序应当包含注释，增加可读性</p>\n","text":"2.0 C语言开发环境搭建 Visual studio（全宇宙最强IDE） 记得勾选C++就可以 2.1 C语言常用命令Dir：列出当前目录下的文件以及文件卷m...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-0-C%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">2.0 C语言开发环境搭建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-C%E8%AF%AD%E8%A8%80%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2.1 C语言常用命令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-1-%E7%BB%83%E4%B9%A0%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E5%85%B3%E6%9C%BA%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">2.1.1 练习：使用命令行生成一个关机程序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-1-system-%E2%80%9Cpause%E2%80%9D-%E5%92%8Cgetchar-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">2.2.1 system(“pause”)和getchar()的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-1-include-%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">2.3.1  #include 说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-1-BUG%E7%9A%84%E6%84%8F%E6%80%9D\"><span class=\"toc-text\">2.4.1 BUG的意思</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-2-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">2.4.2 断点调试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-3-C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">2.4.3 C语言程序编译过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%84%E5%A4%84%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">预处理：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%EF%BC%9A\"><span class=\"toc-text\">编译：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">链接</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-4-C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.4.4 C语言程序结构</span></a></li></ol>","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C语言基本语法（上）","uid":"0d7ac8f90504dc9054e249685d0f3bd4","slug":"C_2022_3.2.01","date":"2022-03-02T10:44:00.000Z","updated":"2023-11-26T10:38:32.665Z","comments":true,"path":"api/articles/C_2022_3.2.01.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.f24dba1c0741d3e26719d27dcbfa9ddb?rik=ixXaTtSKatsoXg&riu=http%3a%2f%2fwww.huatengzy.com%2fuploadfile%2f2020%2f1124%2f20201124084901674.jpg&ehk=8cudqdmImcXfxpnTIdHfG5Fw3USMKmi72wqJwGyq34M%3d&risl=&pid=ImgRaw&r=0","text":"3.1 什么是变量变量是指其值可以变化的量。计算机中，指令代码、数据都存储与内存中。变量也需要存储在内存中。在计算机中，每个变量都被分配了一块内存空间，在这些空...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C语言概述","uid":"82350a2ea1d339e4b4dfb5db5c6c2012","slug":"C_2022.2.22.02","date":"2022-02-22T13:10:00.000Z","updated":"2023-11-26T10:38:32.665Z","comments":true,"path":"api/articles/C_2022.2.22.02.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.f24dba1c0741d3e26719d27dcbfa9ddb?rik=ixXaTtSKatsoXg&riu=http%3a%2f%2fwww.huatengzy.com%2fuploadfile%2f2020%2f1124%2f20201124084901674.jpg&ehk=8cudqdmImcXfxpnTIdHfG5Fw3USMKmi72wqJwGyq34M%3d&risl=&pid=ImgRaw&r=0","text":"1.1.1 什么是C语言C语言就是和电脑进行交流的语言。学习C语言是为了进阶C++。 1.1.2 什么是软件软件：一系列按照特定顺序组织的计算机数据和指令集合。...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}