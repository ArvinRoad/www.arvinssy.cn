{"title":"Git指令讲解","uid":"bfcb3fbcb26721e95b0baa036371e1cb","slug":"Git","date":"2021-08-29T09:23:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/Git.json","keywords":null,"cover":"https://tse2-mm.cn.bing.net/th/id/OIP-C.yB2JuF2uOWan-VGTHCE0yQHaEK?w=277&h=180&c=7&r=0&o=5&pid=1.7","content":"<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">\n\n查看、添加、提交、删除、找回，重置修改文件\n\n git help &lt;command&gt; # 显示command的help\n\n git show # 显示某次提交的内容 git show $id\n\n git co -- &lt;file&gt; # 抛弃工作区修改\n\n git co . # 抛弃工作区修改\n\n git add &lt;file&gt; # 将工作文件修改提交到本地暂存区\n\n git add . # 将所有修改过的工作文件提交暂存区\n\n git rm &lt;file&gt; # 从版本库中删除文件\n\n git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件\n\n git reset &lt;file&gt; # 从暂存区恢复到工作文件\n\n git reset -- . # 从暂存区恢复到工作文件\n\n git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n\n git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;\n\n git ci --amend # 修改最后一次提交记录\n\n git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象\n\n git revert HEAD # 恢复最后一次提交的状态\n\n 查看文件diff\n\n\n git help &lt;command&gt; # 显示command的help\n\n git show # 显示某次提交的内容 git show $id\n\n git co -- &lt;file&gt; # 抛弃工作区修改\n\n git co . # 抛弃工作区修改\n\n git add &lt;file&gt; # 将工作文件修改提交到本地暂存区\n\n git add . # 将所有修改过的工作文件提交暂存区\n\n git rm &lt;file&gt; # 从版本库中删除文件\n\n git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件\n\n git reset &lt;file&gt; # 从暂存区恢复到工作文件\n\n git reset -- . # 从暂存区恢复到工作文件\n\n git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n\n git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;\n\n git ci --amend # 修改最后一次提交记录\n\n git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象\n\n git revert HEAD # 恢复最后一次提交的状态\n\n 查看提交记录\n\n git log git log &lt;file&gt; # 查看该文件每次提交记录\n\n git log -p &lt;file&gt; # 查看每次详细修改内容的diff\n\n git log -p -2 # 查看最近两次详细修改内容的diff\n\n git log --stat #查看提交统计信息\n tig\n\n Mac上可以使用tig代替diff和log，brew install tig\n\n\n Git 本地分支管理\n 查看、切换、创建和删除分支\n\n git br -r # 查看远程分支\n\n git br &lt;new_branch&gt; # 创建新的分支\n\n git br -v # 查看各个分支最后提交信息\n\n git br --merged # 查看已经被合并到当前分支的分支\n\n git br --no-merged # 查看尚未被合并到当前分支的分支\n\n git co &lt;branch&gt; # 切换到某个分支\n\n git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去\n\n git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch\n\n git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除\n\n git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支\n\n git br -d &lt;branch&gt; # 删除某个分支\n\n git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)\n 分支合并和reba\n git merge &lt;branch&gt; # 将branch分支合并到当前分支\n\n git merge origin&#x2F;master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交\n\n git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;\n Git补丁管理(方便在多台机器上开发同步时用)\n\n\n git merge &lt;branch&gt; # 将branch分支合并到当前分支\n\n git merge origin&#x2F;master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交\n\n git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;\n\n Git暂存管\n git stash # 暂存\n\n git stash list # 列所有stash\n\n git stash apply # 恢复暂存的内容\n\n git stash drop # 删除暂存区\n\n Git远程分支管理\n\n git pull # 抓取远程仓库所有分支更新并合并到本地\n\n git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并\n\n git fetch origin # 抓取远程仓库更新\n\n git merge origin&#x2F;master # 将远程主分支合并到本地当前分支\n\n git co --track origin&#x2F;branch # 跟踪某个远程分支创建相应的本地分支\n\n git co -b &lt;local_branch&gt; origin&#x2F;&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上\n\n git push # push所有分支\n\n git push origin master # 将本地主分支推到远程主分支\n\n git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)\n\n git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名\n\n git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支\n\n git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支\n\n Git远程仓库管\n git remote -v # 查看远程服务器地址和仓库名称\n\n git remote show origin # 查看远程服务器仓库状态\n\n git remote add origin git@ github:robbin&#x2F;robbin_site.git # 添加远程仓库地址\n\n git remote set-url origin git@ github.com:robbin&#x2F;robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库\n\n 创建远程仓库\n\n git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库\n\n scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上\n\n mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库\n\n git remote add origin git@ github.com:robbin&#x2F;robbin_site.git # 设置远程仓库地址\n\n git push -u origin master # 客户端首次提交\n\n git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track\n\n git remote set-head origin master # 设置远程仓库的HEAD指向master分支\n\n 也可以命令设置跟踪远程库和本地库\n\n git branch --set-upstream master origin&#x2F;master\n\n git branch --set-upstream develop origin&#x2F;develop</code></pre>","text":" 查看、添加、提交、删除、找回，重置修改文件 git help &lt;command&gt; # 显示command的help git show # 显示某次...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"},{"name":"程序开发","slug":"程序开发","count":3,"path":"api/tags/程序开发.json"}],"toc":"","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"基于Spring-Boot的博客开发系统","uid":"216669ccbaf7065ae0dc9095bebf12e8","slug":"Spring_Blog","date":"2021-08-29T09:30:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/Spring_Blog.json","keywords":null,"cover":"https://pic2.zhimg.com/v2-8315cb308b890c7087edfc088043f572_1200x500.jpg","text":"基于Spring Boot网站架构参考文件说明： 文件名称 文件说明 pom.xml 项目配置文件 in.md 开发参考说明文档 application.yml...","link":"","photos":[],"count_time":{"symbolsCount":"158k","symbolsTime":"2:23"},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"程序开发","slug":"程序开发","count":3,"path":"api/tags/程序开发.json"},{"name":"博客网站","slug":"博客网站","count":6,"path":"api/tags/博客网站.json"},{"name":"Spring","slug":"Spring","count":1,"path":"api/tags/Spring.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"散章（UE4）","uid":"90d3d14985de9c9321edab5c3c6a5f3a","slug":"San_Passage","date":"2021-08-28T17:02:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/San_Passage.json","keywords":null,"cover":"https://pic2.zhimg.com/v2-958e86ca0ed97045323e6208e8f842fd_180x120.jpg","text":"其他教程集合： https://blog.csdn.net/u012999985/article/details/107096741?spm=1001.2014...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"UE4","slug":"UE4","count":1,"path":"api/tags/UE4.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}