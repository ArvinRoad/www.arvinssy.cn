{"title":"Java 超级玛丽窗口","uid":"3c2d266b9caeb01b9460324e5828e520","slug":"CodeGame_Java_SuperMary_Test03","date":"2021-11-07T12:16:52.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/CodeGame_Java_SuperMary_Test03.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.AEFItfuco5DjCukU9F-f-wFOC6?pid=ImgDet&rs=1","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>首先要基于：<a href=\"https://arvinroad.github.io/2021/11/05/CodeGame_Java_SuperMary_Test01/\">Java 创建窗口</a></p>\n<p>其次基于：<a href=\"https://arvinroad.github.io/2021/11/06/CodeGame_Java_SuperMary_Test02/\">Java 超级玛丽常量类</a></p>\n<p>搭配文件：<a href=\"https://arvinroad.github.io/2021/11/07/CodeGame_Java_SuperMary_Test04/\">Java 超级玛丽背景类</a></p>\n<hr>\n<h4 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.arvin;\n\nimport javazoom.jl.decoder.JavaLayerException;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  窗口框架类\n *&#x2F;\n\npublic class WindowsFrame  extends JFrame implements KeyListener,Runnable &#123;\n\n    &#x2F;&#x2F; 用于存储所有的背景\n    private List&lt;BackGround&gt; AllBackground &#x3D; new ArrayList&lt;&gt;();\n\n    &#x2F;&#x2F; 用于存档当前的背景\n    private BackGround NowBackground &#x3D; new BackGround();\n\n    &#x2F;&#x2F; 用于双缓存\n    private Image OffScreenImage &#x3D; null; &#x2F;&#x2F; 该变量为我们的双缓存\n\n    &#x2F;&#x2F; 定义马里奥对象\n    private Mario mario &#x3D; new Mario();\n\n    &#x2F;&#x2F; 定义一个线程对象用于马里奥运动\n    private Thread thread &#x3D; new Thread(this);\n\n    &#x2F;&#x2F; 空参构造\n    public WindowsFrame()&#123;\n\n        &#x2F;&#x2F; 设置窗口的大小为 800 * 600\n        this.setSize(800, 600);\n\n        &#x2F;&#x2F; 设置窗口居中显示\n        this.setLocationRelativeTo(null);\n\n        &#x2F;&#x2F; 设置窗口的可见性\n        this.setVisible(true);\n\n        &#x2F;&#x2F; 创建点击窗口上的关闭键，结束程序\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        &#x2F;&#x2F; 设置窗口大小不可变\n        this.setResizable(false);\n\n        &#x2F;&#x2F; 向窗口对象添加键盘监听器 需要该类实现 KeyListener 接口 并重写抽象方法\n        this.addKeyListener(this);\n\n        &#x2F;&#x2F; 设置窗口名称\n        this.setTitle(&quot;超级玛丽&quot;);\n\n        &#x2F;&#x2F; 在空参构造中调用常量类的初始化(图片)方法\n        StaticValue.Init();\n\n        &#x2F;&#x2F; 初始化马里奥对象\n        mario &#x3D; new Mario(10,355);\n\n        &#x2F;&#x2F; 创建全部场景，因为有3个场景所以我们要通过 For 循环进行创建\n        for (int i &#x3D; 1; i &lt;&#x3D; 3; i++) &#123;\n            AllBackground.add(new BackGround(i, i &#x3D;&#x3D; 3 ? true : false)); &#x2F;&#x2F; 传入二个参数：当前关卡数 | 是否为最后一关的布尔变量(三目运算) |\n        &#125;\n\n        &#x2F;&#x2F; 将第一个场景设置为当前场景，修改这里参数可以进入不同关卡\n        NowBackground &#x3D; AllBackground.get(0);\n        mario.setBackGround(NowBackground); &#x2F;&#x2F; 将第一个场景的 BackGround 对象传递给马里奥\n\n        &#x2F;&#x2F; 调用 repaint(); 方法 绘制图像\n        repaint();\n\n        thread.start(); &#x2F;&#x2F; 启动线程\n\n        &#x2F;&#x2F; 播放音乐 实例化一个 Music 对象\n        try &#123;\n            new Music();\n        &#125; catch (FileNotFoundException exception) &#123;\n            exception.printStackTrace();\n        &#125; catch (JavaLayerException exception) &#123;\n            exception.printStackTrace();\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     *  重写 Paint 方法\n     *&#x2F;\n    public void paint(Graphics GraphicsPaint) &#123;\n        if (OffScreenImage &#x3D;&#x3D; null)&#123;\n            OffScreenImage &#x3D; createImage(800,600);  &#x2F;&#x2F; 为空 创建图像 调用 createImage() 方法\n        &#125;\n\n        Graphics graphics &#x3D; OffScreenImage.getGraphics(); &#x2F;&#x2F; 定义 Graphics 对象\n        graphics.fillRect(0,0,800,600); &#x2F;&#x2F; 调用 Graphics 的 fillRect(); 方法对我们的图像进行填充\n        graphics.drawImage(NowBackground.getBgImage(),0,0,this); &#x2F;&#x2F; 绘制背景 (此时我们的图像绘制在缓冲区上)\n        &#x2F;&#x2F; 绘制敌人 (注意绘制在障碍物前，因为要被障碍物挡住)\n        for (Enemy enemy : NowBackground.getEnemyList())&#123;\n            graphics.drawImage(enemy.getShow(),enemy.getX(),enemy.getY(),this);\n        &#125;\n\n        &#x2F;&#x2F; 绘制障碍物 通过增强 For 循环\n        for (Obstacle obstacle:NowBackground.getObstacleList()) &#123;\n            graphics.drawImage(obstacle.getShow(),obstacle.getX(),obstacle.getY(),this);\n        &#125;\n\n        &#x2F;&#x2F; 绘制城堡\n        graphics.drawImage(NowBackground.getTower(),620,270,this);\n\n        &#x2F;&#x2F; 绘制旗杆\n        graphics.drawImage(NowBackground.getGan(),500,220,this);\n\n        &#x2F;&#x2F; 绘制马里奥对象\n        graphics.drawImage(mario.getShow(),mario.getX(),mario.getY(),this);\n\n        &#x2F;&#x2F; 绘制积分\n        Color color &#x3D; graphics.getColor(); &#x2F;&#x2F; 保存我们的颜色\n        graphics.setColor(Color.BLACK); &#x2F;&#x2F; 颜色设置为黑色\n        graphics.setFont(new Font(&quot;宋体&quot;,Font.BOLD,25)); &#x2F;&#x2F; 设置字体为宋体 加粗 字号 25\n        graphics.drawString(&quot;当前分数：&quot;+ mario.getScore(),300,100); &#x2F;&#x2F; 绘制显示\n        graphics.setColor(color); &#x2F;&#x2F; 还原我们的字体颜色\n\n        GraphicsPaint.drawImage(OffScreenImage,0,0,this); &#x2F;&#x2F; 我们将缓冲区的图片绘制到窗口中\n        \n    &#125;\n\n\n    &#x2F;**\n     *  Main 主函数\n     *&#x2F;\n    public static void main(String[] args)&#123;\n\n        &#x2F;&#x2F; 创建 WindowsFrame 的对象\n        WindowsFrame windowsFrame &#x3D; new WindowsFrame();\n    &#125;\n\n    &#x2F;**\n     *  KeyListener并重写抽象方法\n     *&#x2F;\n\n    @Override\n    public void keyTyped(KeyEvent e) &#123;\n\n    &#125;\n\n    &#x2F;&#x2F; 当键盘按下按钮时调用\n    @Override\n    public void keyPressed(KeyEvent e) &#123;\n\n        &#x2F;&#x2F; 向右移动\n        if (e.getKeyCode() &#x3D;&#x3D; 39) &#123;\n            mario.rightMove();\n        &#125;\n\n        &#x2F;&#x2F; 向左移动\n        if (e.getKeyCode() &#x3D;&#x3D; 37) &#123;\n            mario.leftMove();\n        &#125;\n\n        &#x2F;&#x2F; 跳跃\n        if (e.getKeyCode() &#x3D;&#x3D; 32)&#123;\n            mario.jump();\n        &#125;\n\n    &#125;\n\n    &#x2F;&#x2F; 当键盘松开按键时调用\n    @Override\n    public void keyReleased(KeyEvent e) &#123;\n\n        &#x2F;&#x2F; 向左停止\n        if (e.getKeyCode() &#x3D;&#x3D; 37)&#123;\n            mario.leftStop();\n        &#125;\n\n        &#x2F;&#x2F; 向右停止\n        if (e.getKeyCode()  &#x3D;&#x3D; 39)&#123;\n            mario.rightStop();\n        &#125;\n\n    &#125;\n\n    &#x2F;&#x2F; 重写 Runnable 抽象方法\n    @Override\n    public void run() &#123;\n        while (true)&#123;\n            repaint();  &#x2F;&#x2F; 重写绘制图像\n            try &#123;\n                Thread.sleep(50); &#x2F;&#x2F;线程休眠 50 毫秒\n\n                &#x2F;&#x2F; 判断马里奥是否在屏幕最右边，如果是切换场景\n                if (mario.getX() &gt;&#x3D; 775)&#123;\n                    NowBackground &#x3D; AllBackground.get(NowBackground.getSort());\n                    mario.setBackGround(NowBackground); &#x2F;&#x2F; 将当前场景对象传递给马里奥类\n                    mario.setX(10);   &#x2F;&#x2F; 重置马里奥坐标，到出生点位置\n                    mario.setY(395);\n                &#125;\n\n                &#x2F;&#x2F; 马里奥是否死亡\n                if (mario.isDeath())&#123;\n                    JOptionPane.showMessageDialog(this,&quot;马里奥死亡演示结束 - Arvin&quot;);\n                    System.exit(0); &#x2F;&#x2F; 结束程序\n                &#125;\n\n                &#x2F;&#x2F; 判断游戏是否结束\n                if (mario.isOK()) &#123; &#x2F;&#x2F;判断是否结束 弹出一个窗口 调用JOptionPane 的 showMessageDialog 方法\n                    JOptionPane.showMessageDialog(this,&quot;Demo演示结束 - Arvin&quot;);\n                    System.exit(0); &#x2F;&#x2F; 结束程序\n                &#125;\n\n            &#125; catch (InterruptedException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>","text":"说明首先要基于：Java 创建窗口 其次基于：Java 超级玛丽常量类 搭配文件：Java 超级玛丽背景类 代码演示package com.arvin; imp...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"CodeGame","slug":"CodeGame","count":9,"path":"api/categories/CodeGame.json"}],"tags":[{"name":"程序","slug":"程序","count":11,"path":"api/tags/程序.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">说明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">代码演示</span></a></li></ol>","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java 超级玛丽障碍物类","uid":"c29465b802ec19d39248fbc5d753e625","slug":"CodeGame_Java_SuperMary_Test05","date":"2021-11-08T06:40:52.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/CodeGame_Java_SuperMary_Test05.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.8d18ec29ca1875569d6449830649e56f?rik=tlvTzIQRVOByjg&riu=http%3a%2f%2fup.bizhitupian.com%2fpic%2f96%2f7e%2f87%2f967e87e0f1fada27c0d8c56fbde71e5f.jpg&ehk=8LJd6PweRyMat%2fBn01azAQxIOBElfVuhw1wzz3VDEsM%3d&risl=&pid=ImgRaw&r=0","text":"代码演示package com.arvin; import java.awt.image.BufferedImage; &#x2F;** * 障碍物类 *&#x...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"CodeGame","slug":"CodeGame","count":9,"path":"api/categories/CodeGame.json"}],"tags":[{"name":"程序","slug":"程序","count":11,"path":"api/tags/程序.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java 超级玛丽背景类","uid":"bfaf101dcab4b3312323018980f23fb2","slug":"CodeGame_Java_SuperMary_Test04","date":"2021-11-07T12:13:52.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/CodeGame_Java_SuperMary_Test04.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.572b4ab9d87462765ef358a9e15819ce?rik=db7288wWpYy4zA&riu=http%3a%2f%2fwww.3dmgame.com%2fuploads%2fallimg%2f160908%2f226_160908015610_1.jpg&ehk=DXhBtkC4y5FgVe%2blsbCvr%2f8wv7AUQFSZwlLPj6DmerM%3d&risl=&pid=ImgRaw&r=0","text":"配合文件：Java 超级玛丽窗口 代码演示：package com.arvin; import java.awt.image.BufferedImage; im...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"CodeGame","slug":"CodeGame","count":9,"path":"api/categories/CodeGame.json"}],"tags":[{"name":"程序","slug":"程序","count":11,"path":"api/tags/程序.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}