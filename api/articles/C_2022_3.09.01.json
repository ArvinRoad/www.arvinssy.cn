{"title":"C语言指针(上)","uid":"bc8f9b6164f4278e84078fb333015364","slug":"C_2022_3.09.01","date":"2022-03-09T07:20:00.000Z","updated":"2023-11-26T10:38:32.665Z","comments":true,"path":"api/articles/C_2022_3.09.01.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.f24dba1c0741d3e26719d27dcbfa9ddb?rik=ixXaTtSKatsoXg&riu=http%3a%2f%2fwww.huatengzy.com%2fuploadfile%2f2020%2f1124%2f20201124084901674.jpg&ehk=8cudqdmImcXfxpnTIdHfG5Fw3USMKmi72wqJwGyq34M%3d&risl=&pid=ImgRaw&r=0","content":"<h2 id=\"5-0-1-外挂原理与指针\"><a href=\"#5-0-1-外挂原理与指针\" class=\"headerlink\" title=\"5.0.1 外挂原理与指针\"></a>5.0.1 外挂原理与指针</h2><h3 id=\"什么是内存？\"><a href=\"#什么是内存？\" class=\"headerlink\" title=\"什么是内存？\"></a>什么是内存？</h3><p>从硬件形态上来说，内存就是一条形物理设备，从功能上来讲，内存是一个数据仓库，程序在执行前都要被装载到内存中，才能被中央处理器执行。<br>内存是由按顺序编号的一系列存储单元组成的，在内存中，每个存储单元都有唯一的地址，通过地址可以方便地在内存单元中存储信息。<br>在计算机中，一切信息都是以二进制数据的形式体现的，每个内存单元的容量是 1B，即 8Bit（8个0、1二进制位）。<br>内存与CPU读写速度快，断电就没有了，容量比较小，成本比较搞，高级服务器，读写很频繁的文件全部存放内存，顶级黑客的电脑是没有硬盘的。</p>\n<h3 id=\"变量名是什么？\"><a href=\"#变量名是什么？\" class=\"headerlink\" title=\"变量名是什么？\"></a>变量名是什么？</h3><p>概念：既能读又能写的内存对象，称为变量；若一旦初始化后不能修改的对象则称之为常量。<br>变量定义形式：类型，标识符，标识符，……，标识符；<br>变量名就是对内存一段空间里面的数据的抽象。<br>int a &#x3D; 10; double b &#x3D; 20;<br>例1：查看内存中定义的变量的地址</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n\n&#x2F;&#x2F; a其实的地址的别名\nint a &#x3D; 10;\nprintf(&quot;%p\\n&quot;, &amp;a);\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h3 id=\"变量的本质\"><a href=\"#变量的本质\" class=\"headerlink\" title=\"变量的本质\"></a>变量的本质</h3><p>程序通过变量来申请和命名内存空间 int a &#x3D;0;<br>通过变量名访问内存空间。<br>结论：<br>变量：一段连续内存空间的别名。<br>数据类型和变量的关系，通过通过数据类型定义变量。<br>一个程序载入内存，代码数据都有地址，外挂就是调用函数，修改数据。而函数就是代码，变量就是数据。<br>总结：<br>对内存，可读可写。<br>通过变量往内存读写数据。<br>不是向变量读写数据，而是向变量所代表的内存空间中写数据。<br>名字就是变量，地址是身份证，外号是引用。姓名可以看作是身份证号的别名。</p>\n<h2 id=\"5-0-2-指针的基本语法\"><a href=\"#5-0-2-指针的基本语法\" class=\"headerlink\" title=\"5.0.2 指针的基本语法\"></a>5.0.2 指针的基本语法</h2><p>指针的作用：<br>操作内存<br>注意：地址就是你的身份证号，变量就是你的名字<br>举例：唯一真名</p>\n<h3 id=\"号和-号的意思：\"><a href=\"#号和-号的意思：\" class=\"headerlink\" title=\"*号和&amp;号的意思：\"></a>*号和&amp;号的意思：</h3><p>取地址运算符&amp;，间接运算符*<br>&amp;运算符：取地址运算符，&amp;m 即是变量m在内存中的实际地址。<br><em>运算符：指针运算符（通常称为间接引用运算符）它返回其操作数（即一个指针）所指向的对象的值。<br>指针的大小是固定的，指针的大小和类型无关，指针的类型与步长（+1后所得到的值，指针的步长和指针数组有很大联系）有关。无论什么类型下指针变量的类型永远是： 64bit环境下是8字节 32bit环境下是4字节<br>需要注意的是：char</em>p &#x3D; &amp;H；它的类型要保持和 char H &#x3D; ‘A’；的一致否则会出现对溢出内存的赋值。<br>例：打印一个值的地址：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint loser &#x3D; 38;\n\nprintf(&quot;%p\\n&quot;, &amp;loser);        &#x2F;&#x2F; &amp;取地址，返回其变量真实地址\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h3 id=\"指针变量语法\"><a href=\"#指针变量语法\" class=\"headerlink\" title=\"指针变量语法\"></a>指针变量语法</h3><p>其基本形式为：<br>类型* 指针变量名；</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int b &#x3D; 10;\nint *a &#x3D; &amp;b;\nint *p &#x3D; NULL;\np &#x3D; &amp;b;</code></pre>\n<p>需要注意的是指针和指针变量是两种概念。指针指的是地址，指针变量指的是存放指针的变量。还需要注意指针变量需要初始化。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint loser &#x3D; 38;\n\nprintf(&quot;%p\\n&quot;, &amp;loser);        &#x2F;&#x2F; &amp;取地址，返回其变量真实地址\n\nint* p &#x3D; &amp;loser;        &#x2F;&#x2F; 声明一个*p，它现在就是一个指针变量，它存储的是loser的内存地址，这样是声明与赋值二合一\n\n*p &#x3D; 3800;        &#x2F;&#x2F; 修改地址的值为：3800。我们通过*间接的修改了loser的值\n\nprintf(&quot;%d\\n&quot;, loser);        &#x2F;&#x2F; 现在loser的值为：3800\n\n&#x2F;* 通常声明可以采用这样的形式，但必须要初始化 *&#x2F;\nint* pa &#x3D; NULL;        &#x2F;&#x2F;如果不初始化会出现问题\npa &#x3D; &amp;loser;        &#x2F;&#x2F; pa获取loser的内存地址\n*pa &#x3D; 521;        &#x2F;&#x2F; 然后我们可以通过*p(通过地址)去修改loser的值。通过*来间接操作内存来修改变量的值\nprintf(&quot;%d\\n&quot;, loser);\n\n&#x2F;&#x2F; 总结：指针变量是一种变量，它可以存储任意类型的地址。*是用来操作地址的，&amp;是变量的的地址\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<p>总结：<br>指针变量是一种变量，它可以存储任意类型的地址。*是用来操作地址的，&amp;是变量的的地址。<br>*就是间接引用运算符，它就是通过地址间接去操作变量的值。就是通过地址找内存。<br>例如：<br>网名：小帅哥  ID账号：123456<br>&amp;就是直接去拿ID账号，网名就是变量名。<br>我们添加好友用ID账号。<br><em>就相当于通过ID账号查找内存进而操控。<br>注意：</em>变量就是指针变量，指针是一种概念。<br><em>如果还是不懂 * 和 &amp; 就另请大佬</em></p>\n<p>指针的详解</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n\nint a &#x3D; 250;\n*(&amp;a) &#x3D; 38;        &#x2F;&#x2F; 这个实际上和 a &#x3D; 38 一样，但是这个是通过指针的方式来实现的。*操作(&amp;a)变量地址的值 &#x3D; 38\nprintf(&quot;%d\\n&quot;, a);\n\nint* p &#x3D; NULL;        &#x2F;&#x2F; 此处没有任何操作，只是声明和初始化一个指针变量\np &#x3D; &amp;a;\nprintf(&quot;%p\\n&quot;, p);        &#x2F;&#x2F; p 在这里存储的是a的内存地址\n*p &#x3D; 200;        &#x2F;&#x2F; p加上一个*号我们就可以修改a的值(通过内存地址修改)\nprintf(&quot;%d\\n&quot;, a);\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<p>指针练习一<br>需要注意的是：char<em>p &#x3D; &amp;H；它的类型要保持和 char H &#x3D; ‘A’；的一致否则会出现对溢出内存的赋值。<br>如果将char <em>p &#x3D; &H; 改成 int</em> p &#x3D; &amp;H’;<br>int</em>  它指向的是整型空间，占4个字节，而指向的 H 只是一个字符型，占1个字节，那么*p &#x3D; ‘B’; 是错误的根据，它会导致对溢出空间的赋值。会报错如：<em>run-time check failure #2 - stack around the variable ‘hello’ was corrupted.</em></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        假设我知道了你的账号(内存地址)，我要修改你的网名(内存中的内容)\n*&#x2F;\n\nvoid main() &#123;\nchar H &#x3D; &#39;A&#39;;\nchar* p &#x3D; &amp;H;        &#x2F;&#x2F; 指针变量就是存地址的变量\n*p &#x3D; &#39;B&#39;;\nprintf(&quot;H的值为：%c\\n&quot;, H);\nprintf(&quot;p存储的地址为：%p\\n&quot;, p);\nprintf(&quot;p的地址为：%p\\n&quot;, &amp;p);        &#x2F;&#x2F; 指针变量的地址，好比黑客的号被盗了\n\n&#x2F;&#x2F; 黑客盗了 H的账号，有人盗了黑客的账号，能不能通过黑客的号找到 H 的号 ：答案是成立的\n&#x2F;&#x2F; 能不能通过黑客的账号去修改 H 的网名 ：可以的，采用二级指针\n&#x2F;&#x2F; 注意：存储指针变量的地址只能是二级指针\n\nH &#x3D; &#39;C&#39;;\nprintf(&quot;H&#x3D;&#39;C&#39;;的值为：%c\\n&quot;, H);\nprintf(&quot;通过地址获取的为：%c\\n&quot;, *p);        &#x2F;&#x2F; 通过地址去找内容\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<p>指针练习二</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint a &#x3D; 10;\nint* p &#x3D; NULL;\np &#x3D; &amp;a;\n*p &#x3D; 100;\nprintf(&quot;a &#x3D; %d\\n&quot;, a);\n\nchar* H &#x3D; NULL;\ndouble* D &#x3D; NULL;\n\nprintf(&quot;指针p的大小为：%d\\n&quot;, sizeof(p));\nprintf(&quot;指针H的大小为：%d\\n&quot;, sizeof(H));\nprintf(&quot;指针D的大小为：%d\\n&quot;, sizeof(D));\n\n&#x2F;&#x2F; 总结：无论什么类型下指针变量的类型永远是： 64bit环境下是8字节 32bit环境下是4字节\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h3 id=\"指针的变量和指针的概念（重点）\"><a href=\"#指针的变量和指针的概念（重点）\" class=\"headerlink\" title=\"指针的变量和指针的概念（重点）\"></a>指针的变量和指针的概念（重点）</h3><p>“指针”是概念，“指针变量”是具体的实现，指针也是一个变量，所以需要进行定义，而对指针的定义，与一般变量一样。</p>\n<h4 id=\"指针和指针变量的关系\"><a href=\"#指针和指针变量的关系\" class=\"headerlink\" title=\"指针和指针变量的关系\"></a><em>指针和指针变量的关系</em></h4><p>指针就是地址，地址就是指针。<br>地址就是内存单元的编号。<br>指针变量就是存放指针地址的变量。</p>\n<p>指针和指针变量是两个不同的概念，但要注意的是，通常我们叙述时会把指针变量简称为指针，实际他们的含义是不同的。<br>指针变量也是一种变量，不同的是，指针变量只存储地址。<br>指针变量既然是变量那么它的存储地址是可以改变的。不是固定的。<br>注意区分指针变量的值和指针变量的地址。</p>\n<h2 id=\"5-0-3-声明指针需要注意的点\"><a href=\"#5-0-3-声明指针需要注意的点\" class=\"headerlink\" title=\"5.0.3 声明指针需要注意的点\"></a>5.0.3 声明指针需要注意的点</h2><p>指针变量在使用之前必须进行初始化。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int num &#x3D; 100;\nint *p;\np&#x3D;&amp;num;</code></pre>\n<p>上面演示的代码是非法的，可以编译，运行报错，会把100当作一个地址。<br>指针只是一个地址，大小是固定的，在32bit环境下是4字节，在64bit下是8字节。</p>\n<p>指针和地址的区别两个要点：<br>指针是个量，对应着一块内存区域<br>指针存储的信息是某个内存单元的地址<br>比如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int a &#x3D; 10;\nint *p &#x3D; &amp;a;</code></pre>\n<p>&amp;a 是一个地址，是一个常量。而p是一个指针变量，可以存储一个地址。比如：300500是一个地址，int <em>p&#x3D;（int</em>）300500是一个指针变量。p存储的是地址，指针有类型，从哪里开始，长度是多少，从哪里结束，得知了类型以后，就知道这片内存数据是如何解析。</p>\n<p>指针变量的声明与初始化：在声明一个指针后，编译器并不会自动完成其初始化，此时指针的值是不确定的，也就是说，该指针指向那块内存单元是完全随机的。<br>如果在指针变量声明之初确实不知道该将此指针指向何处，最简单的方式是将其置为”0”,C语言中提供了关键字 NULL。</p>\n<p>取指针的过程是CPU寄存器产生的，不占用内存</p>\n<h2 id=\"5-0-4-数组和指针（简单）\"><a href=\"#5-0-4-数组和指针（简单）\" class=\"headerlink\" title=\"5.0.4 数组和指针（简单）\"></a>5.0.4 数组和指针（简单）</h2><p>数组名是数组的首元素的地址，同时也是数组地址。<br>例如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint a[3] &#x3D; &#123; 1,2,3 &#125;;        &#x2F;&#x2F; 1值的地址和取数组的地址是一致的a[3]。&#123;1，2，3&#125;他们都要一个自己独立的内存地址\n&#x2F;** \n*        例如：白素贞 - 赵雅芝\n*        赵雅芝是白素贞的代表，但不能说赵雅芝就是白素贞。\n*        可以扮演白素贞的演员很多，说起白素贞就想起赵雅芝。\n*&#x2F;\nchar bai[] &#x3D; &#123; &#39;z&#39;,&#39;l&#39;,&#39;j&#39; &#125;;\n\nprintf(&quot;白素贞：    %p\\n&quot;, &amp;bai);\nprintf(&quot;赵雅芝：    %p\\n&quot;, bai);        &#x2F;&#x2F; 打印数组名，默认是打印数组首元素的地址\nprintf(&quot;数组首元素：%p\\n&quot;, &amp;bai[0]);        &#x2F;&#x2F; 此句与printf(&quot;赵雅芝：%p\\n&quot;, bai);功能一样\n\n&#x2F;**\n*        白素贞是个角色，谁都可以演：赵雅芝、周涛、菊花\n*        赵雅芝就是白素贞这个数组的第一个元素(首元素)\n*        它的地址就是数组的地址(一维数组下)\n*&#x2F;\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<p>总结：<br>数组名就是表示数组首地址常量<br>数组地址和数组首元素地址不同之处在于类型不一样。<br>类型不一样导致步长不一样。<br>例如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint b &#x3D; 10;        &#x2F;&#x2F; 分配4字节的内存\nint array[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;        &#x2F;&#x2F; 告诉编译器分配4*10 &#x3D; 40个字节的内存\nprintf(&quot;array：%p\\narray+1：%p\\narray：%p\\n&amp;array+1：%p\\n&quot;, array, array + 1, &amp;array, &amp;array + 1);\nprintf(&quot;array：%d,array+1：%d,array：%d,&amp;array+1：%d\\n&quot;, array, array + 1, &amp;array, &amp;array + 1);\n&#x2F;**\n*        array+1 和 &amp;array+1 的结果是不同的\n*        是因为 array 和 &amp;array 所代表的数据类型不一样\n*        array 代表数组首元素的地址 如：代表赵雅芝这个演员\n*        &amp;array 代表整体数组的地址 如：代表白素贞这个角色\n* \n*        这里array也可以写成 array[0] 是一个int类型 +1 &#x3D; 加了4字节 它+1等于加了一个int型变量\n*        &amp;array 是数组类型+1后 &#x3D; 加了40字节 它+1等于加了一个数组\n* \n*        虽然地址相同，但+1后的值不同。因为他们的类型不一样\n*        array 和 array[0]是等同的\n*&#x2F;\n\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"5-0-5-判断数据类型的大小\"><a href=\"#5-0-5-判断数据类型的大小\" class=\"headerlink\" title=\"5.0.5 判断数据类型的大小\"></a>5.0.5 判断数据类型的大小</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\nint a &#x3D; 10;\nint b[10];\n\nprintf(&quot;sizeof(a)：%d\\n&quot;, sizeof(a));                        &#x2F;&#x2F; 4字节\nprintf(&quot;sizeof(int *)：%d\\n&quot;, sizeof(int*));        &#x2F;&#x2F; 32Bit下4四字节，64Bit下8字节\nprintf(&quot;sizeof(b)：%d\\n&quot;, sizeof(b));                        &#x2F;&#x2F; 4*10 &#x3D; 40字节\nprintf(&quot;sizeof(b[0])：%d\\n&quot;, sizeof(b[0]));                &#x2F;&#x2F; 4字节\nprintf(&quot;sizeof(*b)：%d\\n&quot;, sizeof(*b));                        &#x2F;&#x2F; 4个字节(取地址)\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"5-0-6-修改变量的两种方式\"><a href=\"#5-0-6-修改变量的两种方式\" class=\"headerlink\" title=\"5.0.6 修改变量的两种方式\"></a>5.0.6 修改变量的两种方式</h2><p>变量的本质：<br>程序通过变量来申请和命名内存空间。<br>通过变量名访问内存空间。<br>变量：一段连续内存空间的别名。<br>修改变量的两种方式：<br>直接：通过变量名直接修改变量。<br>间接：通过指针地址来间接修改变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n&#x2F;**\n*        采用两种方式来修改变量：直接与间接(提供指针)\n*&#x2F;\n\nvoid main() &#123;\nint a &#x3D; 10;        &#x2F;&#x2F; 变量名可以看作内存地址的别名\na &#x3D; 1;                &#x2F;&#x2F; 直接修改\nprintf(&quot;a &#x3D; %d\\n&quot;, a);\n\nint* p &#x3D; &amp;a;        &#x2F;&#x2F; 变量地址相当于身份证号，拿取 a 的内存地址\nprintf(&quot;p &#x3D; %p &amp;a &#x3D; %p\\n&quot;, p, &amp;a);\n\n*p &#x3D; 100;        &#x2F;&#x2F; 间接 提供内存地址间接修改变量\nprintf(&quot;a &#x3D; %d\\n&quot;, a);\n\nprintf(&quot;\\n&quot;);\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"5-0-7-数据类型的本质\"><a href=\"#5-0-7-数据类型的本质\" class=\"headerlink\" title=\"5.0.7 数据类型的本质\"></a>5.0.7 数据类型的本质</h2><p>数据类型可理解为创建变量的模具：是固定内存大小的别名。<br>数据类型的作用：编译器预算对象（变量）分配的内存空间的大小。<br>注意：数据类型只是模具，编译器并没有分配空间，只有根据类型（模具）创建变量（实物），编译器才会分配空间。<br>数据类型和变量的关系：通过数据类型定义变量。</p>\n","text":"5.0.1 外挂原理与指针什么是内存？从硬件形态上来说，内存就是一条形物理设备，从功能上来讲，内存是一个数据仓库，程序在执行前都要被装载到内存中，才能被中央处理...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-0-1-%E5%A4%96%E6%8C%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8C%87%E9%92%88\"><span class=\"toc-text\">5.0.1 外挂原理与指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%85%E5%AD%98%EF%BC%9F\"><span class=\"toc-text\">什么是内存？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E5%90%8D%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">变量名是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">变量的本质</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-0-2-%E6%8C%87%E9%92%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">5.0.2 指针的基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%B7%E5%92%8C-%E5%8F%B7%E7%9A%84%E6%84%8F%E6%80%9D%EF%BC%9A\"><span class=\"toc-text\">*号和&amp;号的意思：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">指针变量语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E6%A6%82%E5%BF%B5%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89\"><span class=\"toc-text\">指针的变量和指针的概念（重点）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">指针和指针变量的关系</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-0-3-%E5%A3%B0%E6%98%8E%E6%8C%87%E9%92%88%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9\"><span class=\"toc-text\">5.0.3 声明指针需要注意的点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-0-4-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%EF%BC%88%E7%AE%80%E5%8D%95%EF%BC%89\"><span class=\"toc-text\">5.0.4 数组和指针（简单）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-0-5-%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">5.0.5 判断数据类型的大小</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-0-6-%E4%BF%AE%E6%94%B9%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">5.0.6 修改变量的两种方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-0-7-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">5.0.7 数据类型的本质</span></a></li></ol>","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C语言指针(下)","uid":"df0891c5a177e6815a3b34e9b175010e","slug":"C_2022_3.13.01","date":"2022-03-13T06:22:00.000Z","updated":"2023-11-26T10:38:32.665Z","comments":true,"path":"api/articles/C_2022_3.13.01.json","keywords":null,"cover":"https://s1.ax1x.com/2022/03/13/bbLsWF.png","text":"5.1.0 内存四区模型操作系统把物理硬盘代码 load 到内存。操作系统把C代码分成四个区。操作系统找到Main函数入口执行。 内存四区一个由C&#x2F;C...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"WebServer构建","uid":"d16e3307a16ecb822048b7d5e1538015","slug":"WebServer_2022_3.08.01","date":"2022-03-07T19:55:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/WebServer_2022_3.08.01.json","keywords":null,"cover":"https://img.php.cn/upload/article/000/000/020/5e91393a49cb1970.jpg","text":"注意：该项目是采用C语言调用 WindowsAPI 进行实现的，如果不掌握简单的网络通信协议和C语言与Windows API 编程请先掌握后再来看。 什么是协议...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}