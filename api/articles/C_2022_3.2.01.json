{"title":"C语言基本语法（上）","uid":"0d7ac8f90504dc9054e249685d0f3bd4","slug":"C_2022_3.2.01","date":"2022-03-02T10:44:00.000Z","updated":"2023-11-26T10:38:32.665Z","comments":true,"path":"api/articles/C_2022_3.2.01.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.f24dba1c0741d3e26719d27dcbfa9ddb?rik=ixXaTtSKatsoXg&riu=http%3a%2f%2fwww.huatengzy.com%2fuploadfile%2f2020%2f1124%2f20201124084901674.jpg&ehk=8cudqdmImcXfxpnTIdHfG5Fw3USMKmi72wqJwGyq34M%3d&risl=&pid=ImgRaw&r=0","content":"<h2 id=\"3-1-什么是变量\"><a href=\"#3-1-什么是变量\" class=\"headerlink\" title=\"3.1 什么是变量\"></a>3.1 什么是变量</h2><p>变量是指其值可以变化的量。计算机中，指令代码、数据都存储与内存中。变量也需要存储在内存中。在计算机中，每个变量都被分配了一块内存空间，在这些空间里存储的就是变量的值。变量之所以可以变化，就是这个存储空间可以存储不同的数值。存储空间里的值变化，则变量对应的值也变化。同一时间，内存空间里只能保存一份值，新值冲掉原来的值，每个内存单元都有编号，这些是内存的地址。</p>\n<h2 id=\"3-1-1-什么是常量与变量\"><a href=\"#3-1-1-什么是常量与变量\" class=\"headerlink\" title=\"3.1.1 什么是常量与变量\"></a>3.1.1 什么是常量与变量</h2><p>常量就是计算机内存里面不变的数据。<br>变量就是计算机内存里需要并且经常改变的数据<br>举例说明：<br>变量就是租房子。因为会经常变动<br>常量就是买房子。基本不会变</p>\n<h2 id=\"3-1-2-变量的概念与命名规则\"><a href=\"#3-1-2-变量的概念与命名规则\" class=\"headerlink\" title=\"3.1.2 变量的概念与命名规则\"></a>3.1.2 变量的概念与命名规则</h2><ol>\n<li>变量名定义：<br>定义：</li>\n</ol>\n<p>程序中用于标识常量、变量、函数的字符序列<br>组成：<br>只能由字母、数字、下划线组成，第一个字符必须是字母或下划线<br>大小写有区别不能使用C语言的关键字<br>举例说明：给变量起名，就好比开房</p>\n<ol>\n<li>变量的语法</li>\n</ol>\n<p>变量类型变量名；<br>变量名 &#x3D; 值；<br>简写：变量类型变量名 &#x3D; 值；</p>\n<ol>\n<li>变量名要有意义：</li>\n</ol>\n<p>首先要保证的就是这个变量的名字要有意义。<br>什么叫意义？<br>举例：学生，年龄，身高，姓名<br>现阶段给变量起名字的时候都是以字母开头后面可以跟任意字母、数字、下划线。</p>\n<ol>\n<li>变量的使用规则</li>\n</ol>\n<p>先声明，后赋值，再使用。</p>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><ol>\n<li>起的变量名不要与C语言系统中的关键字重复。</li>\n<li>在C语言中，大小写是敏感的。</li>\n<li>最好给变量赋予初值。</li>\n<li>同一个变量名在同一函数夏不允许重复定义。</li>\n<li>变量的命名规范<ol>\n<li>Camel 驼峰命名法：要求变量名首单词的首字母要小写，其余每个单词的首字母要大写。多用于给变量命名。</li>\n<li>Pascal 帕斯卡命名法：要求每个单词首字母要大写，其余字母小写。多用于类或者方法命名。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"3-1-3-C语言中变量一定要初始化\"><a href=\"#3-1-3-C语言中变量一定要初始化\" class=\"headerlink\" title=\"3.1.3 C语言中变量一定要初始化\"></a>3.1.3 C语言中变量一定要初始化</h2><p>变量如果不初始化，可以编译成功，但是执行的时候，很可能报错。<br>操作系统是如何管理内存的？<br>每当一个应用程序打开时，操作系统会为其分配内存，内存有内存地址与内存单元，当应用程序初始化时，就会往内存单元里面写入数据，当操作系统回收的时候，并不清楚内存单元，所以存在大量的垃圾数据。<br>如果变量不初始化，就会默认读取垃圾数据，有些数据会导致系统崩溃。<br>VC++2010 的编译器可以感知变量没有初始化，调试的时候就会出错。所以变量使用之前，必须初始化。</p>\n<h2 id=\"3-1-4-定义常量的两种方式\"><a href=\"#3-1-4-定义常量的两种方式\" class=\"headerlink\" title=\"3.1.4 定义常量的两种方式\"></a>3.1.4 定义常量的两种方式</h2><p>定义常量PI的两种方式：</p>\n<ol>\n<li>#define N 10</li>\n<li>Const float N10;</li>\n</ol>\n<p>区别：<br>第一种方式：是将N定义成一种符号，此时N只是10的别名，在编译期间用10去取代N的值，Define相当于替换。<br>第二种方式：是将N定义称为变量，但是告诉编译器它的值是固定不变的，如果在程序中试图去修改它的值，在编译时会报错。<br>#define 定义常量有什么好处</p>\n<ol>\n<li>通过有意义的单词符号，可以指明该常量的意思，使得程序员在阅读代码时，减少迷惑。</li>\n<li>需要修改常量的时候，可以只需要修改一次，实现批量修改，效率高而且准确。</li>\n</ol>\n<p>如中需要将PI修改成3.14的话，只需要更改代码行：<br>#define N 10 为 #define N 11</p>\n<h2 id=\"3-1-5-转义字符\"><a href=\"#3-1-5-转义字符\" class=\"headerlink\" title=\"3.1.5 转义字符\"></a>3.1.5 转义字符</h2><table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>意义</th>\n<th>ASCII码值（十进制）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\a</td>\n<td>响铃</td>\n<td>007</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格（BS），将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页（BS），将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行（FF），将当前位置移到下行开头</td>\n<td>010</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车（CR），将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>水平制表符（HT），跳到下一个TAB位置</td>\n<td>009</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表（VT）</td>\n<td>011</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>代表一个反斜线字符”\\‘</td>\n<td>092</td>\n</tr>\n<tr>\n<td>\\&#96;</td>\n<td>代表一个单引号字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td>\\“</td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td>\\？</td>\n<td>代表一个问号</td>\n<td>063</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>空字符（NULL）</td>\n<td>000</td>\n</tr>\n<tr>\n<td>\\ddd</td>\n<td>1到3位八进制数所代表的任意字符</td>\n<td>三位八进制</td>\n</tr>\n<tr>\n<td>\\xhh</td>\n<td>1到2位十六进制所代表的任意字符</td>\n<td>二位十六进制</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-2-1-二进制、八进制、十六进制转化成十进制\"><a href=\"#3-2-1-二进制、八进制、十六进制转化成十进制\" class=\"headerlink\" title=\"3.2.1 二进制、八进制、十六进制转化成十进制\"></a>3.2.1 二进制、八进制、十六进制转化成十进制</h2><p>方法：按权相加<br>例1：(111011)2 &#x3D; 1<em>2^5+1</em>2^4+1<em>2^30</em>2^2+1^2^1+1<em>2^0&#x3D;59（10）<br>例2：(136)8 &#x3D; 1</em>8^2+3<em>8^1+<em>8^0&#x3D;94（10）<br>例3：(1F2A)16 &#x3D; 1</em>16^3+15</em>16^2+2<em>16^1+10</em>16^0&#x3D;7978（10）<br>演示：输出012 和0x12分别打印值，使用%d解析。<br>结论1：0 开头代表八进制<br>结论2：0x开头代表十六进制。一般用于地址<br>注意：<br>任何进制，不允许出现大于等于进制的数字</p>\n<h2 id=\"3-2-2-二进制和八进制互相转换\"><a href=\"#3-2-2-二进制和八进制互相转换\" class=\"headerlink\" title=\"3.2.2 二进制和八进制互相转换\"></a>3.2.2 二进制和八进制互相转换</h2><p>二进制转换成八进制：从右向左，每三位一组（不足三位左边补零），转换成八进制。<br>八进制转换成二进制：用三位二进制数代替每一位八进制数</p>\n<table>\n<thead>\n<tr>\n<th>000</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>001</td>\n<td>1</td>\n</tr>\n<tr>\n<td>010</td>\n<td>2</td>\n</tr>\n<tr>\n<td>011</td>\n<td>3</td>\n</tr>\n<tr>\n<td>100</td>\n<td>4</td>\n</tr>\n<tr>\n<td>101</td>\n<td>5</td>\n</tr>\n<tr>\n<td>110</td>\n<td>6</td>\n</tr>\n<tr>\n<td>111</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>例：(1101001)2 &#x3D; (001,101,001)2 &#x3D; (151)8<br>例：(666)8 &#x3D; (110,110,110)2 &#x3D; (110110110)2</p>\n<h2 id=\"3-2-3-二进制十六进制相互转换\"><a href=\"#3-2-3-二进制十六进制相互转换\" class=\"headerlink\" title=\"3.2.3 二进制十六进制相互转换\"></a>3.2.3 二进制十六进制相互转换</h2><p>二进制转换成十六进制：从右向左，每四位一组（不足四位左补零），转换成十六进制<br>十六进制转换成二进制：用四位二进制数代替每一位十六进制数</p>\n<table>\n<thead>\n<tr>\n<th>0000</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0001</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0010</td>\n<td>2</td>\n</tr>\n<tr>\n<td>0011</td>\n<td>3</td>\n</tr>\n<tr>\n<td>0100</td>\n<td>4</td>\n</tr>\n<tr>\n<td>0101</td>\n<td>5</td>\n</tr>\n<tr>\n<td>0110</td>\n<td>6</td>\n</tr>\n<tr>\n<td>0111</td>\n<td>7</td>\n</tr>\n<tr>\n<td>1000</td>\n<td>8</td>\n</tr>\n<tr>\n<td>1001</td>\n<td>9</td>\n</tr>\n<tr>\n<td>1010</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1011</td>\n<td>B</td>\n</tr>\n<tr>\n<td>1100</td>\n<td>C</td>\n</tr>\n<tr>\n<td>1101</td>\n<td>D</td>\n</tr>\n<tr>\n<td>1110</td>\n<td>E</td>\n</tr>\n<tr>\n<td>1111</td>\n<td>F</td>\n</tr>\n</tbody></table>\n<p>例：(11010101111101)2 &#x3D; (0011,0101,0111,1101)2 &#x3D; (357D)16<br>例：(4B9E)16 &#x3D; (0100,1011,1001,1110)2 &#x3D; (100101110011110)2</p>\n<h2 id=\"3-2-4-十进制二进制转换\"><a href=\"#3-2-4-十进制二进制转换\" class=\"headerlink\" title=\"3.2.4 十进制二进制转换\"></a>3.2.4 十进制二进制转换</h2><p>十进制转换二进制</p>\n<ol>\n<li>十进制整数转换为二进制：方法是除以2取余，逆序排列，以(89)10为例，如下：</li>\n</ol>\n<p>89 &#x2F; 2 余1<br>44 &#x2F; 2 余0<br>22 &#x2F; 2 余0<br>11 &#x2F; 2 余1<br>5 &#x2F; 2 余1<br>2 &#x2F; 2 余0<br>1 余1<br>(89) 10 &#x3D; (1011001)2<br>(5) 10 &#x3D; (101)2<br>(2) 10 &#x3D; (10)2</p>\n<h2 id=\"3-2-5-二进制十进制转换\"><a href=\"#3-2-5-二进制十进制转换\" class=\"headerlink\" title=\"3.2.5 二进制十进制转换\"></a>3.2.5 二进制十进制转换</h2><p>十进制是逢十进一，由数字符号 0,1,2,3,4,5,6,7,8,9组成，可以这样分拆十进制数：<br>(1234)10 &#x3D; 1<em>10^3+2</em>10^2+3<em>10^1+4</em>10^0 &#x3D; 1000 + 200 + 30 + 4 &#x3D; (1234)10<br>采用同样的方式转换二进制到十进制：<br>(1101)2 &#x3D; 1<em>2^3+1</em>2^2+0<em>2^1+1</em>2^0 &#x3D; 8 + 4 + 0 + 1 &#x3D;  (13)10<br>(10.01)2 &#x3D; 1<em>2^1+0</em>2^0+0<em>2^-1+1</em>2^-2 &#x3D; 2 + 0 + 0 + 0.25 &#x3D; (2.25)10</p>\n<h2 id=\"3-2-6-十进制小数转换二进制\"><a href=\"#3-2-6-十进制小数转换二进制\" class=\"headerlink\" title=\"3.2.6 十进制小数转换二进制\"></a>3.2.6 十进制小数转换二进制</h2><p>方法是乘以2取整，顺序排列，以(0.625)10为例：如下：<br>0.625<em>2 &#x3D; 1.25 取整1<br>0.25</em>2&#x3D;0.5 取整0<br>0.5*2&#x3D;1 取整1<br>(0.625)10 &#x3D; (0.101)2<br>(0.25)10 &#x3D; (0.01)2<br>(0.5)10 &#x3D; (0.1)2</p>\n<h2 id=\"3-2-7-计算机存储数据\"><a href=\"#3-2-7-计算机存储数据\" class=\"headerlink\" title=\"3.2.7 计算机存储数据\"></a>3.2.7 计算机存储数据</h2><p>程序员编写的程序以及所使用的数据在计算机的内存中是以二进制位序列的方式存放的。<br>典型的计算机内存段二进制位序如下：<br>···0001000 10101010<br>1000101010111011001010010100100010010010010···<br>上面的二进制位序里，每一位上的数字，要么是0，要么是1。在计算机中，位(bit)是含有0或者1值的一个单元。在物理上，它的值是一个负或者是一个正电荷。也就是计算机中可以通过电压的高低来表示一位所含有的值。如果是0，则用低电压表示，如果是1，则用高电压表示。<br>在上面的二进制位序这个层次上，位的集合没有结构，很难来解释这些系列的意义。为了能够从整体上考虑这些位，于是给这些位序强加上结构的概念，这样的结构被称作为字节(byte)和字(word)。通常，一个字节由8位构成，而一个字由32位构成。或者说是4个字节构成。</p>\n<h2 id=\"3-2-8-内存中的位，字节，字\"><a href=\"#3-2-8-内存中的位，字节，字\" class=\"headerlink\" title=\"3.2.8 内存中的位，字节，字\"></a>3.2.8 内存中的位，字节，字</h2><p>计算机中的内存是以位为最小存储单位的。通过对内存进行组织，可以引用特定的位集合。把计算机的内存起始位编号为1，每隔8位编号增1，也就是以字节为单位，每隔一个字节编号向上加一，可以对计算机所有内存进行编号。</p>\n<table>\n<thead>\n<tr>\n<th>地址编号</th>\n<th>位7</th>\n<th>位6</th>\n<th>位5</th>\n<th>位4</th>\n<th>位3</th>\n<th>位2</th>\n<th>位1</th>\n<th>位0</th>\n<th>字节内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>10010000</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>01100111</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>11101100</td>\n</tr>\n<tr>\n<td>4</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>00000000</td>\n</tr>\n<tr>\n<td>5</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>01110010</td>\n</tr>\n<tr>\n<td>···</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"3-2-8-1-计算机32位与64位的真正差别\"><a href=\"#3-2-8-1-计算机32位与64位的真正差别\" class=\"headerlink\" title=\"3.2.8.1 计算机32位与64位的真正差别\"></a>3.2.8.1 计算机32位与64位的真正差别</h2><p>在于计算机的寻址能力<br>什么是寻址能力？<br>寻址能力一般指的是CPU对于内存寻址的能力，通俗来说，就是能用到的多少内存的应该问题，数据在存储器（RAM）中存放是有规律的，CPU在运算的时候需要把数据提取出来就需要知道数据存放在哪里，这个时候就需要挨家挨户的找，这就叫做寻址，但是如果地址太多了超出了CPU的能力范围，CPU就找不到了，CPU最大能查询多大范围的能力叫做寻址能力。<br>CPU的寻址能力是以字节为单位的，如32位寻址的CPU可以寻址2^32次方大小的地址也就是4G，这也是为什么32位的CPU最大能搭配4G内存的原因，再多内存就找不到了。<br>4G内存怎么得来的：2^32 &#x3D; 4G<br>2^32 &#x3D; 2^2<em>2^10</em>2^10<em>2^10 &#x3D; 4</em>1024<GB>*1024<MB>*1024(KB) &#x3D; 4G<br>32位内存代表的是内存最大地址为32位。<br>一个16进制代表4个2进制。<br>64位代表内存地址最大为64位。<br>32位CPU支持最大内存为4G</p>\n<h2 id=\"3-2-9-printf类型与数据类型\"><a href=\"#3-2-9-printf类型与数据类型\" class=\"headerlink\" title=\"3.2.9 printf类型与数据类型\"></a>3.2.9 printf类型与数据类型</h2><p>声明变量的时候需要指明数据类型，声明函数的时候，也需要指明函数的返回值数据类型。数据类型是对程序所处理的数据的”抽象”，将计算机中可能出现的数据进行一个分类，哪些数据可以归结为一类，哪些数据又可以归结为另一类。比如整数1,2,3,-1,-2,0,1000归结为整数类型；带小数点的数据，比如：12.1,2343.34,-23434.33归结为实数类型。<br>C语言规定，在程序中使用的每一个数据，必须指定其数据类型。在C语言中，提供了非常丰富的数据类型，如列出了C语言提供的所有类型：</p>\n<h3 id=\"数据类型：\"><a href=\"#数据类型：\" class=\"headerlink\" title=\"数据类型：\"></a>数据类型：</h3><p>简单类型：</p>\n<ul>\n<li>基础类型：<ul>\n<li>整形（int）</li>\n<li>浮点（float\\double）</li>\n<li>字符型（char）</li>\n<li>空类型（void）</li>\n</ul>\n</li>\n<li>用户定义类型：<ul>\n<li>枚举类型（enum）</li>\n</ul>\n</li>\n</ul>\n<p>结构类型：</p>\n<ul>\n<li>数组（[]）</li>\n<li>结构（struct）</li>\n<li>联合（union）</li>\n<li>类（class）</li>\n</ul>\n<p>指针类型：（*）<br>注意：<br>必须按照对应的数据类型去解析数据，不然会出错。<br>Printf不会执行自动类型转换。</p>\n<h3 id=\"输出字符表\"><a href=\"#输出字符表\" class=\"headerlink\" title=\"输出字符表\"></a>输出字符表</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>输出的数据类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%d</td>\n<td>整形</td>\n<td>整形输出</td>\n</tr>\n<tr>\n<td>%ld</td>\n<td>长整型</td>\n<td>长整型输出</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>整数</td>\n<td>以八进制形式输出整数</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>整数或字符串地址</td>\n<td>以十六进制数形式输出整数，或输出字符串地址</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>输出unsigned型数据（无符号整形）</td>\n<td>以十进制输出unsigned型数据。注意：%d和%u有无符号的数值范围不一致，也就是极限值，不然会出错</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>字符</td>\n<td>输出一个字符</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>字符串</td>\n<td>输出一个字符串</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>实数</td>\n<td>以小数形式输出，默认保留6位</td>\n</tr>\n<tr>\n<td>%.100</td>\n<td>实数</td>\n<td>保留小数点后100位</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>实数</td>\n<td>以指数形式输出实数</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>不输出0</td>\n<td>根据大小自动选f格式或e格式，且不输出无意义的0</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-3-0-sizeof-运算符\"><a href=\"#3-3-0-sizeof-运算符\" class=\"headerlink\" title=\"3.3.0 sizeof 运算符\"></a>3.3.0 sizeof 运算符</h2><p>sizeof是一个单目运算符，用来计算操作数在内存中占据的字节数，其操作数既可以是括在圆括号中的类型标识符，其返回值是size_t类型，即无符号整数，如：</p>\n<table>\n<thead>\n<tr>\n<th>Sizeof(short)</th>\n<th>返回2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Sizeof(long)</td>\n<td>返回4</td>\n</tr>\n<tr>\n<td>Sizeof(int)</td>\n<td>取决系统也可以是下面的表达式</td>\n</tr>\n<tr>\n<td>Short x；</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Sizeof(x)</td>\n<td>返回2</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-3-1-符号的作用\"><a href=\"#3-3-1-符号的作用\" class=\"headerlink\" title=\"3.3.1 符号的作用\"></a>3.3.1 符号的作用</h2><p>整数的正负–有符号和无符号。<br>前面论述的只关注了正整数，负数在计算机中该如何表示？正数和负数是两种情况，计算机又是一个很笨的东西，要区分两种情况，就必须有一个标记来表示是哪种情况。两种情况，用二进制的一位刚好可以表示，比如用0表示正数，用1表示负数，刚好可以区分清楚。那么一个4字节也就是32位存储单元的整数，应该用哪一位表示数据的正负符号呢？最简单的方法就是用最高位（就是最左边那一位）了。C语言中确实就是用最高位来表示应该整数的正负号。0表示为正，1表示为负。</p>\n<h2 id=\"3-4-0-基本数据类型\"><a href=\"#3-4-0-基本数据类型\" class=\"headerlink\" title=\"3.4.0 基本数据类型\"></a>3.4.0 基本数据类型</h2><p>注意：数据的运算必须建立在数据的极限范围内。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>类型关键字</th>\n<th>长度(位)</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>有符号字符型</td>\n<td>[signed]char</td>\n<td>8</td>\n<td>-127 — +127</td>\n</tr>\n<tr>\n<td>无符号字符型</td>\n<td>unsigned char</td>\n<td>8</td>\n<td>0 — 255</td>\n</tr>\n<tr>\n<td>有符号短整型</td>\n<td>[signed] short [int]</td>\n<td>16</td>\n<td>-32767 — +32767</td>\n</tr>\n<tr>\n<td>无符号短整型</td>\n<td>unsigned short [int]</td>\n<td>16</td>\n<td>0 —65535</td>\n</tr>\n<tr>\n<td>有符号长整型</td>\n<td>[signed] long [int]</td>\n<td>32</td>\n<td>-2147483647 — +2147483647</td>\n</tr>\n<tr>\n<td>无符号长整形</td>\n<td>unsigned long [int]</td>\n<td>32</td>\n<td>0 — 4294967295</td>\n</tr>\n<tr>\n<td>单精度实型</td>\n<td>float</td>\n<td>32</td>\n<td>约(3.4<em>10^-38 — 3.4</em>10^-38)</td>\n</tr>\n<tr>\n<td>双精度实型</td>\n<td>double</td>\n<td>64</td>\n<td>约(1.7<em>10^-308 — 1.7</em>10^-308)</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-4-1-数值范围\"><a href=\"#3-4-1-数值范围\" class=\"headerlink\" title=\"3.4.1 数值范围\"></a>3.4.1 数值范围</h2><p>Int 型最大：2147483647<br>Int 型最小：-2147483647<br>unsingned int 型最大：0xffffffff 也就是 4294967295</p>\n<h2 id=\"3-4-2-整型常量\"><a href=\"#3-4-2-整型常量\" class=\"headerlink\" title=\"3.4.2 整型常量\"></a>3.4.2 整型常量</h2><p>三种表示形式：</p>\n<ul>\n<li>十进制整数：由数字 0 - 9 和正负号表示。如：123，-456，0</li>\n<li>八进制整数：由数字 0 开头，后跟数字 0 - 7。如：0123，011</li>\n<li>十六进制整数：由 0x 或 0X 开头，后跟 0 - 9，a - f，A - F表示。如：0x123，0Xff</li>\n<li>长整形常量：789L，017L，0x12aL（用 l 或 L 引出）</li>\n</ul>\n<h2 id=\"3-4-3-整型变量\"><a href=\"#3-4-3-整型变量\" class=\"headerlink\" title=\"3.4.3 整型变量\"></a>3.4.3 整型变量</h2><p>整型变量用于存放整型数据。根据数值的表示范围整形可以为整形（int）、短整型（short）、长整型（long）三种。<br>这三种整型都默认为有符号型（signed）,有符号即可以是正数、负数和0。也可以根据需要，将整型指定为无符号型（unsigned），此时整型变量只能存放非负数。<br>上面提到的 Short、long、signed、unsigned 都是一些类型修饰符，用于补充说明变量的特性。</p>\n<h2 id=\"3-4-4-浮点型数据\"><a href=\"#3-4-4-浮点型数据\" class=\"headerlink\" title=\"3.4.4 浮点型数据\"></a>3.4.4 浮点型数据</h2><p>两种表示形式：</p>\n<ul>\n<li>十进制小数形式：必须带小数点。如：0.123，.123，123.0，0.0，123.</li>\n<li>指数形式：e或E之前必须有数字；指数必须为整数。如：12.3e3,123E2,1.23e4,e-5,1.2E-3.5</li>\n</ul>\n<p>在C语言中，则以”E”或”e”后跟一个整数来表示”10”为底数的幂数。（e代表10，3代表3次方）<br>12.3e3 &#x3D;&#x3D; 12.3*10^3<br>e代表基数10 3代表3次方</p>\n<p>1.2345e+002&#x3D;&#x3D;</p>\n<p>e+002表示10的2次方。科学计数法，用e表示10，加号表示正整数次方；减后，表示负整数次方，这里就是等于123.456实型常量的类型细分：</p>\n<ul>\n<li>默认为double型，例如3.14就是double类型。</li>\n<li>后面加f或F认为是Float型，例如：3.14f就是Float类型。</li>\n</ul>\n<p>%8.2f表示：<br>整数8表示宽度为8，也就是8个字符，而.2表示精度为2，也就是小数点后有2位。</p>\n<h2 id=\"3-4-5-浮点型变量\"><a href=\"#3-4-5-浮点型变量\" class=\"headerlink\" title=\"3.4.5 浮点型变量\"></a>3.4.5 浮点型变量</h2><p>浮点型分为单精度型（float）和双精度型（double）两种。<br>Float 型数据占用4个字节（32bit）存储单元，提供的有效数字是6 - 7位。<br>Double 型数据占用8个字节（64bit）存储单元，提供的有效数字是15 - 16位。</p>\n<h2 id=\"3-4-6-字符型数据\"><a href=\"#3-4-6-字符型数据\" class=\"headerlink\" title=\"3.4.6 字符型数据\"></a>3.4.6 字符型数据</h2><p>字符”1”和整数1是不同的概念：<br>字符”1”只是代表一个形状为”1”的符号，在需要时按原样输出，在内存中以ASCII码形式存储，占1个字符。<br>整数1是以整数存储方式（二进制补码方式）存储的，占2个或4个字节。<br>注意：</p>\n<ul>\n<li>字符型常量和字符串常量长度不一致，sizeof(‘A’)和sizeof(“A”)；长度不一致，前者为4个字节，后者为2个字节。</li>\n<li>一个汉字占两个字节，只能由宽字符存储，字符串存储一个汉字输出是3个字节，因为字是两个加个”\\0”的一个字节。</li>\n<li>sizeof数据类型和sizeof字符型常量不是一个东西例如：</li>\n</ul>\n<p>Char a &#x3D; ‘A’；sizeof(ch)是一个字节，但sizeof(‘A’)是四个字节</p>\n<ul>\n<li>Wchar_t wch &#x3D; “” 宽字符 可以存储汉字；’’是窄字符。</li>\n</ul>\n<h2 id=\"3-4-7-字符型变量\"><a href=\"#3-4-7-字符型变量\" class=\"headerlink\" title=\"3.4.7 字符型变量\"></a>3.4.7 字符型变量</h2><p>字符型变量在内存中占一个字节，由于存储的是字符的二进制ASCII码，与整型数据存储方式类似，字符型数据和整数数据可以相互运算。<br>注意：<br>字符串常量不允许赋值给字符型变量，C语言也没有专门的字符串变量。要在内存中存取字符串，只能使用数组或指针。<br>设置默认控制台前景和背景颜色：<br>COLOR [attr]   attr 指定控制台输出的颜色属性<br>颜色属性由两个十六进制数学指定，第一个为背景，第二个则为前景。每个数字可以为以下如何值之一（在CMD输入Color ？也可查询）：</p>\n<table>\n<thead>\n<tr>\n<th>0 &#x3D; 黑色</th>\n<th>8 &#x3D; 灰色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1 &#x3D; 蓝色</td>\n<td>9 &#x3D; 淡蓝色</td>\n</tr>\n<tr>\n<td>2 &#x3D; 绿色</td>\n<td>A &#x3D; 淡绿色</td>\n</tr>\n<tr>\n<td>3 &#x3D; 浅绿色</td>\n<td>B &#x3D; 淡浅绿色</td>\n</tr>\n<tr>\n<td>4 &#x3D; 红色</td>\n<td>C &#x3D; 淡红色</td>\n</tr>\n<tr>\n<td>5 &#x3D; 紫色</td>\n<td>D &#x3D; 淡紫色</td>\n</tr>\n<tr>\n<td>6 &#x3D; 黄色</td>\n<td>E &#x3D;淡黄色</td>\n</tr>\n<tr>\n<td>7 &#x3D; 白色</td>\n<td>F &#x3D; 亮白色</td>\n</tr>\n</tbody></table>\n<p>如果没有给定任何参数，该命令会将颜色还原到CMD.exe 启动时的颜色。这个值来自当前控制台窗口、&#x2F;T 命令行开关或 DefaultColor 注册表值。<br>如果用相同的前景和背景颜色来执行 COLOR命令，COLOR命令会将ERRORLEVEL设置为1。<br>例如：COLOR fc 在亮白色上产生亮红色</p>\n<h2 id=\"3-4-8-ASCII码\"><a href=\"#3-4-8-ASCII码\" class=\"headerlink\" title=\"3.4.8 ASCII码\"></a>3.4.8 ASCII码</h2><p>实际就是将我们所有字符都标号了。他们可以相互转换</p>\n<table>\n<thead>\n<tr>\n<th>ASCII值</th>\n<th>控制字符</th>\n<th>ASCII值</th>\n<th>字符</th>\n<th>ASCII值</th>\n<th>字符</th>\n<th>ASCII值</th>\n<th>字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>000</td>\n<td>NUL</td>\n<td>032</td>\n<td>(space)</td>\n<td>064</td>\n<td>@</td>\n<td>096</td>\n<td>&#96;</td>\n</tr>\n<tr>\n<td>001</td>\n<td>SOH</td>\n<td>033</td>\n<td>!</td>\n<td>065</td>\n<td>A</td>\n<td>097</td>\n<td>a</td>\n</tr>\n<tr>\n<td>002</td>\n<td>STX</td>\n<td>034</td>\n<td>“</td>\n<td>066</td>\n<td>B</td>\n<td>098</td>\n<td>b</td>\n</tr>\n<tr>\n<td>003</td>\n<td>ETX</td>\n<td>035</td>\n<td>#</td>\n<td>067</td>\n<td>C</td>\n<td>099</td>\n<td>c</td>\n</tr>\n<tr>\n<td>004</td>\n<td>EOT</td>\n<td>036</td>\n<td>$</td>\n<td>068</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>005</td>\n<td>END</td>\n<td>037</td>\n<td>%</td>\n<td>069</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>006</td>\n<td>ACK</td>\n<td>038</td>\n<td>&amp;</td>\n<td>070</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>007</td>\n<td>BEL</td>\n<td>039</td>\n<td>‘</td>\n<td>071</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>008</td>\n<td>BS</td>\n<td>040</td>\n<td>(</td>\n<td>072</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>009</td>\n<td>HT</td>\n<td>041</td>\n<td>)</td>\n<td>073</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>010</td>\n<td>LF</td>\n<td>042</td>\n<td>*</td>\n<td>074</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>011</td>\n<td>VT</td>\n<td>043</td>\n<td>+</td>\n<td>075</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>012</td>\n<td>FF</td>\n<td>044</td>\n<td>,</td>\n<td>076</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>013</td>\n<td>CR</td>\n<td>045</td>\n<td>-</td>\n<td>077</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>014</td>\n<td>SO</td>\n<td>046</td>\n<td>。</td>\n<td>078</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>015</td>\n<td>SI</td>\n<td>047</td>\n<td>&#x2F;</td>\n<td>079</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>016</td>\n<td>DLE</td>\n<td>048</td>\n<td>0</td>\n<td>080</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>017</td>\n<td>DC1</td>\n<td>049</td>\n<td>1</td>\n<td>081</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>018</td>\n<td>DC2</td>\n<td>050</td>\n<td>2</td>\n<td>082</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>019</td>\n<td>DC3</td>\n<td>051</td>\n<td>3</td>\n<td>083</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>020</td>\n<td>DC4</td>\n<td>052</td>\n<td>4</td>\n<td>084</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>021</td>\n<td>NAK</td>\n<td>053</td>\n<td>5</td>\n<td>085</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>022</td>\n<td>SYN</td>\n<td>054</td>\n<td>6</td>\n<td>086</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>023</td>\n<td>ETB</td>\n<td>055</td>\n<td>7</td>\n<td>087</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>024</td>\n<td>CAN</td>\n<td>056</td>\n<td>8</td>\n<td>088</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>025</td>\n<td>EM</td>\n<td>057</td>\n<td>9</td>\n<td>089</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>026</td>\n<td>SUB</td>\n<td>058</td>\n<td>:</td>\n<td>090</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>027</td>\n<td>ESC</td>\n<td>059</td>\n<td>;</td>\n<td>091</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>028</td>\n<td>FS</td>\n<td>060</td>\n<td>&lt;</td>\n<td>092</td>\n<td>\\</td>\n<td>124</td>\n<td>&#124;</td>\n</tr>\n<tr>\n<td>029</td>\n<td>GS</td>\n<td>061</td>\n<td>&#x3D;</td>\n<td>093</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>030</td>\n<td>RS</td>\n<td>062</td>\n<td>&gt;</td>\n<td>094</td>\n<td>^</td>\n<td>126</td>\n<td>~</td>\n</tr>\n<tr>\n<td>031</td>\n<td>US</td>\n<td>063</td>\n<td>?</td>\n<td>095</td>\n<td>_</td>\n<td>127</td>\n<td>▢</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-4-9-隐式类型转换（小转大）\"><a href=\"#3-4-9-隐式类型转换（小转大）\" class=\"headerlink\" title=\"3.4.9 隐式类型转换（小转大）\"></a>3.4.9 隐式类型转换（小转大）</h2><p>整型、实型、字符型数据之间可以混合运算。例如：<br>10 + ‘a’ + 1.5 - 8765.1234*’b’<br>不同数据类型之间运算会进行自动类型转换，规则如下：<br>转换步骤：简单而言就是小的转大的。<br>INT -&gt; unsigned -&gt; long -&gt; double。<br>运算过程：</p>\n<ol>\n<li>进行 10 + ‘a’ 的运算：将’a’转换成整数97，得到和为107.</li>\n<li>进行 107+1.5 的运算：将107转换成 double 型，得到和为 108.500000.</li>\n<li>进行 8765.1234*’b’的运算：将’b’转换为double型数 98.000000，再和8765.1234相乘。</li>\n<li>把之前得到的108.500000减去8765.1234*’b’的值，就完成了整个表达式的求值。</li>\n</ol>\n<h2 id=\"3-4-10-强制类型转换（大转小）\"><a href=\"#3-4-10-强制类型转换（大转小）\" class=\"headerlink\" title=\"3.4.10 强制类型转换（大转小）\"></a>3.4.10 强制类型转换（大转小）</h2><p>一般形式：（类型名）（表达式）<br>例如：<br>（int）（x+y）<br>（int）x+y<br>（double）（3&#x2F;2）<br>（int）3.6<br>​</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nvoidmain()&#123;\n\n_&#x2F;*第一种*&#x2F;_\ndoublea&#x3D;3.1415926;\nprintf(&quot;%f\\n&quot;,a);\nprintf(&quot;%d\\n&quot;,(int)a);_&#x2F;&#x2F;强制类型转换，Printf不会自动执行类型转换_\n\n_&#x2F;*第二种(最常用)*&#x2F;_\ndoubleb&#x3D;3.1415926;\nintc&#x3D;b;_&#x2F;&#x2F;b是8个字节c是4个字节。当你声明一个变量的时候，变量的空间就已经决定了15_\nprintf(&quot;%f\\n%d\\n&quot;,b,c);\n\nfloatd&#x3D;3.1415f;\ndoublee&#x3D;d;\nprintf(&quot;%f\\n%f\\n&quot;,d,e);\nprintf(&quot;%f\\n&quot;,(float)e);\n\n_&#x2F;*char转int*&#x2F;_\ncharf&#x3D;&#39;a&#39;;\nprintf(&quot;%d\\n&quot;,(int)f);_&#x2F;&#x2F;把字符转换成ASCII码进行运算_\nintg&#x3D;71;\ncharG&#x3D;g;\nprintf(&quot;%d\\n%c\\n&quot;,sizeof(G),G);_&#x2F;&#x2F;int转char_\ninth&#x3D;g-1;\ncharH&#x3D;h;\nprintf(&quot;%c\\n&quot;,H);_&#x2F;&#x2F;我们可以通过修改ASCII的值来改变符号_\n\nsystem(&quot;pause&quot;);\n\n&#125;</code></pre>\n<p>强制转换得到所需类型的中间变量，原变量类型、变量值保持不变。<br>注意：</p>\n<ol>\n<li>当赋值给一个已经声明的类型的时候会发生类型转换。</li>\n<li>Char类型转变其它类型是ASCII码的相加或相减。</li>\n</ol>\n<p>精度损失问题：较高类型向较低类型转换时可能发生精度损失。<br>类型间转换：<br>不同类型的整型数据所占的字节数不同，他们在相互转换时需要格外小心，不要把过大的数据放在过小的数据类型中，在把占字节较大的数据赋值给占字节较小的数据时，防止出现以下的情况：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">int a &#x3D; 2147483648；\nprintf（&quot;%d&quot;,a）;</code></pre>\n<p>这样赋值后，输出变量a的值并非预期的 2147483648，而是 -2147483648，原因是2147483648超出了int类型能装载的最大值，数据产生了溢出。如果换一种输出格式控制符，代码如下所示：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">printf(&quot;%u&quot;,a);</code></pre>\n<p>输出的结果就是变量a的值，原因是%u是按照无符号整型输出的数据，而无符号整型的数据范围上限大于2147483648这个值。</p>\n","text":"3.1 什么是变量变量是指其值可以变化的量。计算机中，指令代码、数据都存储与内存中。变量也需要存储在内存中。在计算机中，每个变量都被分配了一块内存空间，在这些空...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.1 什么是变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.1.1 什么是常量与变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-2-%E5%8F%98%E9%87%8F%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">3.1.2 变量的概念与命名规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%EF%BC%9A\"><span class=\"toc-text\">注意：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-3-C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%8F%98%E9%87%8F%E4%B8%80%E5%AE%9A%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">3.1.3 C语言中变量一定要初始化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-4-%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.1.4 定义常量的两种方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-5-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">3.1.5 转义字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-1-%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%81%E5%85%AB%E8%BF%9B%E5%88%B6%E3%80%81%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8C%96%E6%88%90%E5%8D%81%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">3.2.1 二进制、八进制、十六进制转化成十进制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-2-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">3.2.2 二进制和八进制互相转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-3-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">3.2.3 二进制十六进制相互转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-4-%E5%8D%81%E8%BF%9B%E5%88%B6%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">3.2.4 十进制二进制转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-5-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">3.2.5 二进制十进制转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-6-%E5%8D%81%E8%BF%9B%E5%88%B6%E5%B0%8F%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">3.2.6 十进制小数转换二进制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-7-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">3.2.7 计算机存储数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-8-%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E4%BD%8D%EF%BC%8C%E5%AD%97%E8%8A%82%EF%BC%8C%E5%AD%97\"><span class=\"toc-text\">3.2.8 内存中的位，字节，字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-8-1-%E8%AE%A1%E7%AE%97%E6%9C%BA32%E4%BD%8D%E4%B8%8E64%E4%BD%8D%E7%9A%84%E7%9C%9F%E6%AD%A3%E5%B7%AE%E5%88%AB\"><span class=\"toc-text\">3.2.8.1 计算机32位与64位的真正差别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-9-printf%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.2.9 printf类型与数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">数据类型：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E8%A1%A8\"><span class=\"toc-text\">输出字符表</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-0-sizeof-%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">3.3.0 sizeof 运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-1-%E7%AC%A6%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">3.3.1 符号的作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-0-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.4.0 基本数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-1-%E6%95%B0%E5%80%BC%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">3.4.1 数值范围</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-2-%E6%95%B4%E5%9E%8B%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">3.4.2 整型常量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-3-%E6%95%B4%E5%9E%8B%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.4.3 整型变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-4-%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">3.4.4 浮点型数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-5-%E6%B5%AE%E7%82%B9%E5%9E%8B%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.4.5 浮点型变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-6-%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">3.4.6 字符型数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-7-%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.4.7 字符型变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-8-ASCII%E7%A0%81\"><span class=\"toc-text\">3.4.8 ASCII码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-9-%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%88%E5%B0%8F%E8%BD%AC%E5%A4%A7%EF%BC%89\"><span class=\"toc-text\">3.4.9 隐式类型转换（小转大）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-10-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%88%E5%A4%A7%E8%BD%AC%E5%B0%8F%EF%BC%89\"><span class=\"toc-text\">3.4.10 强制类型转换（大转小）</span></a></li></ol>","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C语言基本语法（下）","uid":"f6fa249751f2d876b96ef869eefc23b6","slug":"C_2022_3.6.01","date":"2022-03-05T18:38:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/C_2022_3.6.01.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.f24dba1c0741d3e26719d27dcbfa9ddb?rik=ixXaTtSKatsoXg&riu=http%3a%2f%2fwww.huatengzy.com%2fuploadfile%2f2020%2f1124%2f20201124084901674.jpg&ehk=8cudqdmImcXfxpnTIdHfG5Fw3USMKmi72wqJwGyq34M%3d&risl=&pid=ImgRaw&r=0","text":"3.5.0 运算符与表达式算术运算符是用来进行基本的数学运算的，它的最终计算结果仍然是数值。算术运算符和数学中的算术运算符有很多相似之处，如优先级、综合性等。也...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C语言特性","uid":"b145a25a172abc434996c94993756fbb","slug":"C_2022.2.22.03","date":"2022-02-22T13:19:00.000Z","updated":"2023-11-26T10:38:32.665Z","comments":true,"path":"api/articles/C_2022.2.22.03.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.f24dba1c0741d3e26719d27dcbfa9ddb?rik=ixXaTtSKatsoXg&riu=http%3a%2f%2fwww.huatengzy.com%2fuploadfile%2f2020%2f1124%2f20201124084901674.jpg&ehk=8cudqdmImcXfxpnTIdHfG5Fw3USMKmi72wqJwGyq34M%3d&risl=&pid=ImgRaw&r=0","text":"2.0 C语言开发环境搭建 Visual studio（全宇宙最强IDE） 记得勾选C++就可以 2.1 C语言常用命令Dir：列出当前目录下的文件以及文件卷m...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}