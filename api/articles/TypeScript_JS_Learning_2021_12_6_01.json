{"title":"TypeScript 程序流程","uid":"024c24535770958fe5fa10d3d115c7c9","slug":"TypeScript_JS_Learning_2021_12_6_01","date":"2021-12-06T07:22:52.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/TypeScript_JS_Learning_2021_12_6_01.json","keywords":null,"cover":"https://th.bing.com/th/id/R.dc288c8099126dcd9dac931dba803328?rik=UT7Q8NHUjM78nw&riu=http%3a%2f%2fbloghoctap.com%2fwp-content%2fuploads%2f2017%2f01%2ftypescript.jpg&ehk=sAVZdoJHlKzU%2b7PmPVy5RFSx74EWpBmneW7oTdKbFvM%3d&risl=&pid=ImgRaw&r=0","content":"<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p><strong>算术运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>加号</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减号</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘号</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>除号</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余（取模）</td>\n</tr>\n<tr>\n<td>++ | –</td>\n<td>自增 | 自减</td>\n</tr>\n</tbody></table>\n<p><strong>比较运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&gt;&#x3D;</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>&lt;&#x3D;</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>&#x3D;&#x3D;</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&#x3D;&#x3D;&#x3D;</td>\n<td>等于（不仅值还包括类型）</td>\n</tr>\n<tr>\n<td>!&#x3D;</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>!&#x3D;&#x3D;</td>\n<td>不等于（不仅值还包括类型）</td>\n</tr>\n</tbody></table>\n<ul>\n<li>TypeScript</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">let num &#x3D; 2 + 3;\nlet num &#x3D; 2 - ( 3 + 3);\n\n&#x2F;&#x2F; 取余\nlet num &#x3D; 10 % 3;\ndocument.write(num);\t&#x2F;&#x2F; 输出为 1 取余等于（3*3 &#x3D; 9）余 1\n\n&#x2F;&#x2F; ++自增\nnum &#x3D; num + 1;\nnum ++;\n++ num;\n&#x2F;&#x2F; 在输出中++是程序会先打印然后执行++操作\ndocument.write(num++ + &quot;&quot;);\ndocument.write(num + &quot;&quot;);\n\n&#x2F;&#x2F;如果要先++再使用可以采用\ndocument.write(++num + &quot;&quot;);\n\n&#x2F;&#x2F; 比较运算\nlet res:boolean &#x3D; 5 &gt; 3;\ndocument.write(res);\t&#x2F;&#x2F; 输出为true\nres &#x3D; 5 &lt; 3;\ndocument.write(res);\t&#x2F;&#x2F; 输出为false\nnum &#x3D; 5\nres &#x3D; num &#x3D;&#x3D; 5;\ndocument.write(res);\t&#x2F;&#x2F; 输出为true\n\nnum &#x3D; 3;\nnum2 &#x3D; &quot;3&quot;;\nres &#x3D; num &#x3D;&#x3D;&#x3D; num2;\t&#x2F;&#x2F; 输出为false\nres &#x3D; num !&#x3D; num2;\t&#x2F;&#x2F; 输出为ture</code></pre>\n\n<p><strong>逻辑运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;&amp;</td>\n<td>逻辑与（并且 | 又）</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n</tr>\n<tr>\n<td>! ture (或者! false)</td>\n<td>逻辑非（取反）</td>\n</tr>\n</tbody></table>\n<ul>\n<li>TypeScript</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 例如：10 &gt; num &gt;2; 但是我们程序不能这样写：\nlet res:boolean &#x3D; null;\nres &#x3D; num &gt; 3 &amp;&amp; &lt; 10;\t&#x2F;&#x2F; num大于3，小于10 结果才为ture 一个为false 则结果为 false\n\n&#x2F;&#x2F; 或者是 num &gt; 10 num &lt; 5;\nres &#x3D; num &gt; 10 || num &lt; 5; &#x2F;&#x2F; 两个有一个为ture 则结果为 ture\n\n&#x2F;&#x2F; 取反\nres &#x3D; !(num &gt; 10); &#x2F;&#x2F;如果（num &gt; 10）为ture 则结果为 false</code></pre>\n\n<p><strong>赋值运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x3D;</td>\n<td>赋值</td>\n</tr>\n<tr>\n<td>+&#x3D;</td>\n<td>加赋值</td>\n</tr>\n<tr>\n<td>-&#x3D;</td>\n<td>减赋值</td>\n</tr>\n<tr>\n<td>*&#x3D;</td>\n<td>乘赋值</td>\n</tr>\n<tr>\n<td>&#x2F;&#x3D;</td>\n<td>除赋值</td>\n</tr>\n</tbody></table>\n<ul>\n<li>TypeScript</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">let num：number &#x3D; 3; &#x2F;&#x2F; 将3赋值给num\n\nnum &#x3D; num +3;\t&#x2F;&#x2F; 给num的值加3可以写成：\nnum +&#x3D; 3;</code></pre>\n\n<hr>\n<h3 id=\"判断语句-条件控制语句\"><a href=\"#判断语句-条件控制语句\" class=\"headerlink\" title=\"判断语句 | 条件控制语句\"></a>判断语句 | 条件控制语句</h3><p>假设有一个值 Age 如果大于18就输出成年人 如果小于18就输出未成年人</p>\n<ul>\n<li>TypeScript</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; if 判断语句 if 表示如果 else 表示否则\nlet age &#x3D; 20;\nif(age &gt; 18)&#123;\n    document.write(&quot;成年人&quot;);\n&#125;else&#123;\n    docment.write(&quot;未成年人&quot;);\n&#125;\n\n&#x2F;&#x2F; 如果大于60为老年人\nif( age &gt; 60)&#123;\n    document.write(&quot;老年人&quot;);\n&#125;else if(age &gt; 18)&#123;\n    doucument.write(&quot;成年人&quot;);\n&#125;else&#123;\n    doucument.write(&quot;未成年&quot;);\n&#125;\n\n&#x2F;&#x2F; 假设 0-59 是一般 60-79 是及格 80-100 是优秀\nlet score &#x3D; 80;\nif(score &gt;&#x3D; 0 &amp;&amp; score &lt; 60)&#123;\n    document.write(&quot;一般&quot;);\n&#125;else if(score &gt;&#x3D; 60 &amp;&amp; score &lt; 80)&#123;\n    document.write(&quot;及格&quot;);\n&#125;else if(score&gt;&#x3D;80&amp;&amp; score &lt;&#x3D;100)&#123;\n    document.write(&quot;优秀&quot;);\n&#125;else&#123;\n    document.write(&quot;系统出错&quot;);\n&#125;\n\n&#x2F;&#x2F; 假设我们有一个num 如果num大于100 我们只允许给它100，否则就输出本身值\nlet num &#x3D; 105;\nif(num &gt; 100)&#123;\n    num &#x3D; 100;\n&#125;\ndocument.write(num);\n&#x2F;&#x2F; 当然我们可以采用三目运算更加快速的解决这个问题 (条件？值1:值2 如果为ture则赋值值1 否则赋值值2)\nnum &#x3D; num &gt; 100 ? 100 : num;\n\n&#x2F;&#x2F; 假设我们需要多种状态\nenum State&#123;\n    idle,\n    run,\n    attack,\n    die\n&#125;\n\nlet state:State &#x3D; State.idle;\n\nif(state &#x3D;&#x3D; State.idle)&#123;\n    document.write(&quot;站立&quot;);\n&#125;\n&#x2F;&#x2F; 我们可以采用选择结构语句(分支语句) switch:\nswitch(state)&#123;\n    case State.idel:\n        document.write(&quot;站立&quot;);\n        break; &#x2F;&#x2F; 到此结束 \n    case State.run:\n        document.write(&quot;跑步&quot;);\n        break;\n    case State.attack:\n        document.write(&quot;攻击&quot;);\n        break;\n    default: &#x2F;&#x2F;如果以上都没进来就执行：\n        document.write(&quot;死亡&quot;);\n&#125;</code></pre>\n\n<hr>\n<h3 id=\"循环控制语句\"><a href=\"#循环控制语句\" class=\"headerlink\" title=\"循环控制语句\"></a>循环控制语句</h3><ul>\n<li>TypeScript</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; while() 循环判断 我们先输出5个HelloWorld\nlet i:number &#x3D; 0;\nlet num:number &#x3D; 0;\nwhile(i &lt; 5)&#123;\n   document.write(&quot;Hello World&quot;);\n    i++;\n&#125;\ndocument.write(num + &quot;&quot;)\n\n&#x2F;&#x2F; 我们在游戏开发中通常有while做成死循环检测或执行游戏全生命周期的事件\nwhile(ture)&#123;\n\t&#x2F;&#x2F; 游戏中持久生命周期事件\n&#125;\n\n&#x2F;&#x2F; 假设我们要打印出100以内的所有偶数的和\nlet i:number &#x3D; 0;\nlet num: number &#x3D; 0;\nwhile(i &lt; 101)&#123;\n    if(i % 2 &#x3D;&#x3D; 0)&#123;\n        num +&#x3D; i;\n    &#125;\n    i++;\n&#125;\ndocument.wirte(num +&quot;&quot;);\n\n&#x2F;&#x2F; do ... while 循环 第一次无论如何就进行执行一次 再进行循环、判断\nlet i:number &#x3D; 1;\ndo&#123;\n    document.write(&quot;do.while 循环&quot;);\n&#125;while(i &lt; 0);\n\n&#x2F;&#x2F; 我们有一个数组代表人名,我们需要将数组内容逐步打印出来：\nlet names:string[] &#x3D; [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;]\ndocument.write(names[0]);\t&#x2F;&#x2F; 这样的打印方法是效率很低的，且不好管理\n&#x2F;&#x2F; 我们用遍历方式\nlet i :number &#x3D; 0;\nwhile(i &lt; 3)&#123;\n    document.write(name[i]);\n    i++;\n&#125;\n\n&#x2F;&#x2F; 当然还要一个循环方式更加便捷，省去我们在外面创建变量和自增\nfor(let i &#x3D; 0;i &lt; 3; i++;)&#123;\n    document.write(names[i]);\n&#125;\n\n&#x2F;&#x2F; 当然在后面为了更加便捷还有一种for循环 它会遍历数组直到全部完成\nfor(let tmpName of nams)&#123;\n    document.write(tmpName);\n&#125;\n\n&#x2F;&#x2F; in 不会输出遍历数组的值而是遍历输出数组的索引\nfor(let index in names)&#123;\n    document.write(indx);\t&#x2F;&#x2F; 输出 0 1 2\n&#125;\n\n&#x2F;&#x2F; 当然我们可以在循环中退出来\nfor(let i &#x3D;0; i &lt; 10; i++)&#123;\n    if(i &gt; 5)&#123;\n        break; &#x2F;&#x2F;跳出for循环 这个方法可以用在所有循环，但是注意它只会跳出自己最近的循环，如果是嵌套循环，它只能跳出第一层\n    &#125;\n&#125;</code></pre>\n\n","text":"运算符算术运算符 运算符 说明 + 加号 - 减号 * 乘号 &#x2F; 除号 % 取余（取模） ++ | – 自增 | 自减 比较运算符 运算符 说明 &g...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Script","slug":"Script","count":2,"path":"api/categories/Script.json"}],"tags":[{"name":"程序","slug":"程序","count":11,"path":"api/tags/程序.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5-%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">判断语句 | 条件控制语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">循环控制语句</span></a></li></ol>","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Windows 游戏编程 — WinMain","uid":"d8cb551b5bafc53f2b07c2cf32c603c4","slug":"GameCode_WinMain_2022.2.22.01","date":"2022-02-22T12:44:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/GameCode_WinMain_2022.2.22.01.json","keywords":null,"cover":"https://p1.ssl.qhimg.com/t01f1364aab8bc27b46.jpg","text":"#include &lt;Windows.h&gt; Int WINAPI WinMain(_In_ HINSTANCE hInstance,_In_opt H...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"游戏开发","slug":"游戏开发","count":1,"path":"api/tags/游戏开发.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"TypeScript | JavaScript 变量与常量","uid":"c6bdcca557d7825169a4afae27e58649","slug":"TypeScript_JS_Learning_2021_12_5_01","date":"2021-12-05T12:47:52.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/TypeScript_JS_Learning_2021_12_5_01.json","keywords":null,"cover":"https://th.bing.com/th/id/R.dc288c8099126dcd9dac931dba803328?rik=UT7Q8NHUjM78nw&riu=http%3a%2f%2fbloghoctap.com%2fwp-content%2fuploads%2f2017%2f01%2ftypescript.jpg&ehk=sAVZdoJHlKzU%2b7PmPVy5RFSx74EWpBmneW7oTdKbFvM%3d&risl=&pid=ImgRaw&r=0","text":"语句介绍输出语句 document.write(); 只支持输出为字符串类型 TypeScript document.write(&quot;Hello Wor...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Script","slug":"Script","count":2,"path":"api/categories/Script.json"}],"tags":[{"name":"程序","slug":"程序","count":11,"path":"api/tags/程序.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}