{"title":"Windows 游戏编程 — WinMain","uid":"d8cb551b5bafc53f2b07c2cf32c603c4","slug":"GameCode_WinMain_2022.2.22.01","date":"2022-02-22T12:44:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/GameCode_WinMain_2022.2.22.01.json","keywords":null,"cover":"https://p1.ssl.qhimg.com/t01f1364aab8bc27b46.jpg","content":"<pre class=\"line-numbers language-Cpp\" data-language=\"Cpp\"><code class=\"language-Cpp\">#include &lt;Windows.h&gt;\nInt WINAPI  WinMain(_In_ HINSTANCE hInstance,_In_opt HINSTANCE hPrevInstance,_In_ LPSTR lpCmdine,_In_ int nCmdShow)&#123;\n    MessageBox(NULL,L&quot;你好，Visual Studio&quot;,L&quot;消息窗口&quot;,0);\n    Return 0;\n&#125;</code></pre>\n<p>WINAPI 其实就是 _stdcall 有时候也会写作 CALLBACK 它和 WINAPI 等效<br>WinMain 是Windows程序的入口函数</p>\n<h3 id=\"WinMain的第一个参数：\"><a href=\"#WinMain的第一个参数：\" class=\"headerlink\" title=\"WinMain的第一个参数：\"></a>WinMain的第一个参数：</h3><p>HINSTANCE类型的hInstance，它表示该程序当前运行的实例句柄。<br>我们可以对这个类型HINSTANCE进行字面上的理解，h前缀表示这个参数的类型为handle(句柄)，句柄的意思，而后面的Instance中文意思是实例，将两个意思结合起来，所以这个类型就是实例句柄。<br>hInstance其实就是一个数值。当一个程序在Windows下运行时，它唯一对应一个运行中的实例，也只有运行中的程序实例，才有资格分配到句柄。<br>一个应用程序可以运行多个实例，每运行一个实例，系统都会给该实例分配一个句柄，并且通过hInstance参数传递给程序的入口点WinMain函数。</p>\n<h3 id=\"WinMain的第二个参数：\"><a href=\"#WinMain的第二个参数：\" class=\"headerlink\" title=\"WinMain的第二个参数：\"></a>WinMain的第二个参数：</h3><p>HINSTANCE类型的hPrevInstance,表示当前实例的前一个实例句柄。<br>​我们可以对这个参数进行字面上的理解，h表示参数类型为句柄，Prev代表先前的(Previous)意思，Instance依旧表示实例，那么组合起来就是先前的实例句柄，这样顾名思义，是不是很好记忆呢，对于这个参数用法，MSDN中明确表示在Win32环境下，该参数总是取NULL，这就是说在Win32环境下这个参数没有存在感，不起任何作用，只是在进行WinMain函数书写时需要将它专门做为一个参数表示出来而已。</p>\n<h3 id=\"WinMain的第三个参数：\"><a href=\"#WinMain的第三个参数：\" class=\"headerlink\" title=\"WinMain的第三个参数：\"></a>WinMain的第三个参数：</h3><p>LPSTR类型的lpCmdLine，它是一个以空终止的字符串，指定传递给运用程序的命令行参数。<br>依旧是进行参数肢解：lp前缀表示这个参数是一个指针，Cmd表示Command，命令的意思，与Line组合起来就表示命令行。<br>例如在Windows7操作系统下的E盘有一个叫ForTheDream.txt的文件，我们用鼠标双击这个文件时将启动记事本程序(notepad.exe)。<br>此时系统会将E:\\ForTheDream.txt作为命令行的参数传递给记事本程序的WinMain函数，记事本程序会在得到这个文件的路径后，就会在窗口中正确显示这个文件的内容。</p>\n<h3 id=\"WinMain的第四个参数：\"><a href=\"#WinMain的第四个参数：\" class=\"headerlink\" title=\"WinMain的第四个参数：\"></a>WinMain的第四个参数：</h3><p>int类型的nCmdShow，指定程序窗口应该如何显示，是最大化，最小化，还是隐藏等等。<br>这个参数可有如下取值：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SW_HIDE</td>\n<td>0</td>\n<td>隐藏此窗口并激活另一个窗口</td>\n</tr>\n<tr>\n<td>SW_MAXIMIZE</td>\n<td>3</td>\n<td>最大化指定的窗口</td>\n</tr>\n<tr>\n<td>SW_MINIMIZE</td>\n<td>6</td>\n<td>最小化指定的窗口并激活当前Z次序中顶部的窗口</td>\n</tr>\n<tr>\n<td>SW_RESTOPE</td>\n<td>9</td>\n<td>激活并显示此窗口，如果此窗口被最小化或者最大化了，系统会恢复它到原始尺寸的位置，一个应用程序应该在恢复最小化的窗口时指定此SW_RESTORE标识</td>\n</tr>\n<tr>\n<td>SW_SHOW</td>\n<td>5</td>\n<td>以当前的尺寸和位置激活与显示指定窗口</td>\n</tr>\n<tr>\n<td>SW_SHOWMAXIMIZED</td>\n<td>3</td>\n<td>最大化激活并显示这个窗口</td>\n</tr>\n<tr>\n<td>SW_SHOWMINIMIZED</td>\n<td>2</td>\n<td>最小化激活并显示这个窗口</td>\n</tr>\n<tr>\n<td>SW_SHOWMINNOACTIVE</td>\n<td>7</td>\n<td>最小化显示这个窗口，与SW_SHOWMINIMIZED唯一的区别是不会去激活指定的窗口</td>\n</tr>\n<tr>\n<td>SW_SHOWNA</td>\n<td>8</td>\n<td>以当前的尺寸和位置激活与显示指定窗口，与SW_SHOW的唯一区别是不会去激活指定的窗口</td>\n</tr>\n<tr>\n<td>SW_SHOWNOACTIVATE</td>\n<td>4</td>\n<td>显示一个窗口，若指定的窗口是最小化或者最大化的，系统会恢复其到原始尺寸和位置，与SW_SHOWNORMAL的唯一区别是不会去激活指定的窗口</td>\n</tr>\n<tr>\n<td>SW_SHOWNORMAL</td>\n<td>1</td>\n<td>激活和显示一个窗口，若指定的窗口是最小化或者最大化的，系统会恢复其到原始尺寸和位置。一个应用程序应该在第一次显示窗口的时候指定这个标识</td>\n</tr>\n</tbody></table>\n<h2 id=\"MessageBox函数\"><a href=\"#MessageBox函数\" class=\"headerlink\" title=\"MessageBox函数\"></a>MessageBox函数</h2><p>MessageBox函数，它用于显示一个消息框，可以通过一些参数来设置这个消息框的样式。在MSDN中查到这个函数有如下原型：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">Int WINAPI MessageBox(\n_In_opt_ HWND hWnd,\n_In_opt_ LPCTSTR lpTest,\n_In_opt_ LPCTSTR lpCaption,\n_In_ UINT uType\n);</code></pre>\n<p>这里的_In_opt 类似于之前提到过的_in，只不过是后面多了一个_opt,表示可选的（Optional），两个词组合在一起就表示”可选的输入参数”了。就是说这个参数我们可以自己填内容，不填具体内容的话直接填NULL也行得通，选择权在于我们。</p>\n<h3 id=\"MessageBox函数第一个参数：\"><a href=\"#MessageBox函数第一个参数：\" class=\"headerlink\" title=\"MessageBox函数第一个参数：\"></a>MessageBox函数第一个参数：</h3><p>HWND类型的hWnd，表示我们显示的消息框所属的窗口的句柄。在进行Windows编程中，我们常常要和句柄打交道，后面我们会具体阐述什么是句柄，在我们的Visual Studio程序中，这个参数设为了NULL，表示消息框是从属于桌面。</p>\n<h3 id=\"MessageBox函数的第二个参数：\"><a href=\"#MessageBox函数的第二个参数：\" class=\"headerlink\" title=\"MessageBox函数的第二个参数：\"></a>MessageBox函数的第二个参数：</h3><p>LPCTSTR类型的lpText，它是一个以NULL结尾的字符串，表示所要显示的消息的内容。</p>\n<h3 id=\"MessageBox函数的第三个参数：\"><a href=\"#MessageBox函数的第三个参数：\" class=\"headerlink\" title=\"MessageBox函数的第三个参数：\"></a>MessageBox函数的第三个参数：</h3><p>LPCTSTR类型的lpCaption，它也是一个以NULL结尾的字符串，在其中填我们要显示的消息框的标题的内容。</p>\n<h3 id=\"MessageBox函数的第四个参数：\"><a href=\"#MessageBox函数的第四个参数：\" class=\"headerlink\" title=\"MessageBox函数的第四个参数：\"></a>MessageBox函数的第四个参数：</h3><p>UINT类型的uType，表示我们消息窗口需要什么样的样式。微软已经为我们定义好了很多可供选择的样式和消息对应的图标，一些常用的样式列表如下：</p>\n<table>\n<thead>\n<tr>\n<th>标识名（Flags）</th>\n<th>含有精析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MB_ABORTRETRYIGNORE</td>\n<td>消息框带有三个按钮：Abort、Retry和Ignore</td>\n</tr>\n<tr>\n<td>MB_OK</td>\n<td>消息框带有唯一一个按钮：OK。需要注意的是，MB_OK 是系统默认的MessageBox函数样式</td>\n</tr>\n<tr>\n<td>MB_OKCANCEL</td>\n<td>消息框带有两个按钮：OK和Cancel</td>\n</tr>\n<tr>\n<td>MB_RETRYCANCEL</td>\n<td>消息框带有两个按钮：Retry和Cancel</td>\n</tr>\n<tr>\n<td>MB_YESNO</td>\n<td>消息框带有两个按钮：YES和NO</td>\n</tr>\n<tr>\n<td>MB_YESNOCANCEL</td>\n<td>消息框带有三个按钮：YES、NO和Cancel</td>\n</tr>\n</tbody></table>\n<p>常见的图标我们也是通过一些标识名来指定，如以下几种：</p>\n<table>\n<thead>\n<tr>\n<th>标识名（Flags）</th>\n<th>含义精析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MB_ICONWARNING</td>\n<td>“警告”图标</td>\n</tr>\n<tr>\n<td>MB_ICONASTERISK</td>\n<td>“风险”图标</td>\n</tr>\n<tr>\n<td>MB_ICONSTOP</td>\n<td>“停止”图标</td>\n</tr>\n</tbody></table>\n<p>这里只列出了一些常用的标识，完整版可以自行查阅MSDN。<br>想要多个标识一起使用的话，我们可以采用逻辑或（Logical OR）把不同的标识连接起来，具体的符号是键盘上Enter键上方的那条竖杠”|”。比如要创建一个具有YES和NO的按钮并带有”问号”图标的消息框，我们就把uType填成这样：MB_YESNO|MB_ICONQUESTION,非常直观。后面我们也会经常碰到类似的、需要多个标识符同时使用的场合，用一下这条竖杠”|”连接一下就好了。<br>和大多数Win32函数一样，MessageBox函数也有返回值。在Visual Studio示例程序中，这个返回值可以忽略。而如果我们创建了具有对应按钮的消息框，就涉及到按下具体的按键，就需要给出按键的返回值，这样我们就需要判断哪个键被按下了，再对应作出相应的响应。返回值的列表如下：</p>\n<table>\n<thead>\n<tr>\n<th>返回值类型</th>\n<th>精析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IDABORT</td>\n<td>按下Abort后的返回值</td>\n</tr>\n<tr>\n<td>IDCANCEL</td>\n<td>按下Cancel后的返回值</td>\n</tr>\n<tr>\n<td>IDIGNORE</td>\n<td>按下Ignore后的返回值</td>\n</tr>\n<tr>\n<td>IDNO</td>\n<td>按下NO之后的返回值</td>\n</tr>\n<tr>\n<td>IDOK</td>\n<td>按下OK之后的返回值</td>\n</tr>\n<tr>\n<td>IDRETRY</td>\n<td>按下Retry之后的返回值</td>\n</tr>\n<tr>\n<td>IDYES</td>\n<td>按下Yes之后的返回值</td>\n</tr>\n</tbody></table>\n<p>这个短小的函数MessageBox我们算是讲完了。它虽然很简单，但是非常好用，可谓麻雀虽小五脏俱全，特别是在需要向玩家显示出错误消息的时候，比如我们写了一个函数，在程序执行出错的时候我们要知道出错的地方，就可以这样来写：</p>\n<pre class=\"line-numbers language-Cpp\" data-language=\"Cpp\"><code class=\"language-Cpp\">if（error）&#123;\nMessageBox（NULL,L&quot;在这里填写出错的信息&quot;,L&quot;在这里填报错信息标题&quot;,0）；\n&#125;</code></pre>\n<p>用MessageBox来显示错误消息的这个方法会贯穿我们游戏编程的始终，如果想让我们的游戏程序遇到问题可以更加智能，就要在我们的游戏程序源代码中多加一些这样的”错误处理”代码。值得一提的是，在运行游戏程序时经常会弹出一个提示框，提示缺失某某D3D的DLL或者MSVR的DLL，程序想要重新安装云云，就是这个MessageBox函数的杰作。</p>\n","text":"#include &lt;Windows.h&gt; Int WINAPI WinMain(_In_ HINSTANCE hInstance,_In_opt H...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"游戏开发","slug":"游戏开发","count":1,"path":"api/tags/游戏开发.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WinMain%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">WinMain的第一个参数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WinMain%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">WinMain的第二个参数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WinMain%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">WinMain的第三个参数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WinMain%E7%9A%84%E7%AC%AC%E5%9B%9B%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">WinMain的第四个参数：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MessageBox%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">MessageBox函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MessageBox%E5%87%BD%E6%95%B0%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">MessageBox函数第一个参数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MessageBox%E5%87%BD%E6%95%B0%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">MessageBox函数的第二个参数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MessageBox%E5%87%BD%E6%95%B0%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">MessageBox函数的第三个参数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MessageBox%E5%87%BD%E6%95%B0%E7%9A%84%E7%AC%AC%E5%9B%9B%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">MessageBox函数的第四个参数：</span></a></li></ol>","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C语言概述","uid":"82350a2ea1d339e4b4dfb5db5c6c2012","slug":"C_2022.2.22.02","date":"2022-02-22T13:10:00.000Z","updated":"2023-11-26T10:38:32.665Z","comments":true,"path":"api/articles/C_2022.2.22.02.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.f24dba1c0741d3e26719d27dcbfa9ddb?rik=ixXaTtSKatsoXg&riu=http%3a%2f%2fwww.huatengzy.com%2fuploadfile%2f2020%2f1124%2f20201124084901674.jpg&ehk=8cudqdmImcXfxpnTIdHfG5Fw3USMKmi72wqJwGyq34M%3d&risl=&pid=ImgRaw&r=0","text":"1.1.1 什么是C语言C语言就是和电脑进行交流的语言。学习C语言是为了进阶C++。 1.1.2 什么是软件软件：一系列按照特定顺序组织的计算机数据和指令集合。...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"TypeScript 程序流程","uid":"024c24535770958fe5fa10d3d115c7c9","slug":"TypeScript_JS_Learning_2021_12_6_01","date":"2021-12-06T07:22:52.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/TypeScript_JS_Learning_2021_12_6_01.json","keywords":null,"cover":"https://th.bing.com/th/id/R.dc288c8099126dcd9dac931dba803328?rik=UT7Q8NHUjM78nw&riu=http%3a%2f%2fbloghoctap.com%2fwp-content%2fuploads%2f2017%2f01%2ftypescript.jpg&ehk=sAVZdoJHlKzU%2b7PmPVy5RFSx74EWpBmneW7oTdKbFvM%3d&risl=&pid=ImgRaw&r=0","text":"运算符算术运算符 运算符 说明 + 加号 - 减号 * 乘号 &#x2F; 除号 % 取余（取模） ++ | – 自增 | 自减 比较运算符 运算符 说明 &g...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Script","slug":"Script","count":2,"path":"api/categories/Script.json"}],"tags":[{"name":"程序","slug":"程序","count":11,"path":"api/tags/程序.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}