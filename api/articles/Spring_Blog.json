{"title":"基于Spring-Boot的博客开发系统","uid":"216669ccbaf7065ae0dc9095bebf12e8","slug":"Spring_Blog","date":"2021-08-29T09:30:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/Spring_Blog.json","keywords":null,"cover":"https://pic2.zhimg.com/v2-8315cb308b890c7087edfc088043f572_1200x500.jpg","content":"<h1 id=\"基于Spring-Boot网站架构参考\"><a href=\"#基于Spring-Boot网站架构参考\" class=\"headerlink\" title=\"基于Spring Boot网站架构参考\"></a>基于Spring Boot网站架构参考</h1><p>文件说明：</p>\n<table>\n<thead>\n<tr>\n<th>文件名称</th>\n<th>文件说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pom.xml</td>\n<td>项目配置文件</td>\n</tr>\n<tr>\n<td>in.md</td>\n<td>开发参考说明文档</td>\n</tr>\n<tr>\n<td>application.yml</td>\n<td>SpringBoot开发环境配置文件(公共环境下配置)</td>\n</tr>\n<tr>\n<td>application-pro.yml</td>\n<td>SpringBoot开发环境配置文件(生产环境下配置)</td>\n</tr>\n<tr>\n<td>application-dev.yml</td>\n<td>SpringBoot开发环境配置文件(开发环境下配置)</td>\n</tr>\n<tr>\n<td>logback-spring.xml</td>\n<td>日志模块配置文件</td>\n</tr>\n<tr>\n<td>404.html</td>\n<td>404错误页面</td>\n</tr>\n<tr>\n<td>505.html</td>\n<td>505错误页面</td>\n</tr>\n<tr>\n<td>error.html</td>\n<td>BeBug页面</td>\n</tr>\n<tr>\n<td>blogs.html</td>\n<td>后台管理页面</td>\n</tr>\n<tr>\n<td>blogs-input.html</td>\n<td>博客后台发布页面</td>\n</tr>\n<tr>\n<td>type.html</td>\n<td>后台分类管理页面</td>\n</tr>\n<tr>\n<td>type-input.html</td>\n<td>后台分类新增页面</td>\n</tr>\n<tr>\n<td>about.html</td>\n<td>关于我页面</td>\n</tr>\n<tr>\n<td>archives.html</td>\n<td>归档页面</td>\n</tr>\n<tr>\n<td>blog.html</td>\n<td>博客详情页面</td>\n</tr>\n<tr>\n<td>index.html</td>\n<td>博客首页</td>\n</tr>\n<tr>\n<td>tags.html</td>\n<td>标签页面</td>\n</tr>\n<tr>\n<td>type.html</td>\n<td>分类页面</td>\n</tr>\n<tr>\n<td>login.html</td>\n<td>登录页面</td>\n</tr>\n<tr>\n<td>search.html</td>\n<td>搜索页面</td>\n</tr>\n<tr>\n<td>_fragments.html</td>\n<td>动态页面 定义Thymeleaf片段</td>\n</tr>\n<tr>\n<td>IndexController.java</td>\n<td>Web控制器</td>\n</tr>\n<tr>\n<td>LoginController.java</td>\n<td>WEB登录模块控制器</td>\n</tr>\n<tr>\n<td>BlogController.java</td>\n<td>Blog后台页面权限过滤管理类</td>\n</tr>\n<tr>\n<td>TypeController.java</td>\n<td>Web层分类模块操作</td>\n</tr>\n<tr>\n<td>TagController.java</td>\n<td>Web层标签模块操作</td>\n</tr>\n<tr>\n<td>CommentController.java</td>\n<td>评论模块处理</td>\n</tr>\n<tr>\n<td>TypeShowController.java</td>\n<td>分类模块处理</td>\n</tr>\n<tr>\n<td>TagShowController.java</td>\n<td>标签模块处理</td>\n</tr>\n<tr>\n<td>ArchiveShowController.java</td>\n<td>归档模块处理</td>\n</tr>\n<tr>\n<td>AboutShowController.java</td>\n<td>个人模块处理</td>\n</tr>\n<tr>\n<td>LongInterceptor.java</td>\n<td>Blog后台页面权限(登录过滤)类</td>\n</tr>\n<tr>\n<td>WebConfig.html</td>\n<td>Blog后台页面权限(拦截配置) 类</td>\n</tr>\n<tr>\n<td>ControllerExceptionHandler.java</td>\n<td>BeBug拦截器</td>\n</tr>\n<tr>\n<td>NotFoundException.java</td>\n<td>异常类，业务相关（如果没有页面报错404）</td>\n</tr>\n<tr>\n<td>Blog.java</td>\n<td>Blog实体类</td>\n</tr>\n<tr>\n<td>Type.java</td>\n<td>分类实体类</td>\n</tr>\n<tr>\n<td>Tag.java</td>\n<td>标签实体类</td>\n</tr>\n<tr>\n<td>Comment.java</td>\n<td>评论实体类</td>\n</tr>\n<tr>\n<td>User.java</td>\n<td>用户实体类</td>\n</tr>\n<tr>\n<td>UserService.java</td>\n<td>User登录业务逻辑处理接口类</td>\n</tr>\n<tr>\n<td>UserServiceImpl.java</td>\n<td>User登录业务逻辑处理实现类</td>\n</tr>\n<tr>\n<td>TypeService.java</td>\n<td>分类业务逻辑处理接口</td>\n</tr>\n<tr>\n<td>TypeServiceImpl.java</td>\n<td>分类业务逻辑处理实现类</td>\n</tr>\n<tr>\n<td>TagService.java</td>\n<td>标签业务逻辑处理接口</td>\n</tr>\n<tr>\n<td>BlogService.java</td>\n<td>博客业务逻辑处理接口</td>\n</tr>\n<tr>\n<td>BlogServiceImpl.java</td>\n<td>博客业务逻辑处理实现类</td>\n</tr>\n<tr>\n<td>TagServiceImpl.java</td>\n<td>标签业务逻辑处理实现类</td>\n</tr>\n<tr>\n<td>CommentService.java</td>\n<td>评论业务逻辑处理接口</td>\n</tr>\n<tr>\n<td>CommentServiceImpl.java</td>\n<td>评论业务逻辑处理实现类</td>\n</tr>\n<tr>\n<td>UserRepository.java</td>\n<td>引用SpringJPA SQL操作接口</td>\n</tr>\n<tr>\n<td>TypeRepository.java</td>\n<td>分类业务处理 SQL操作接口</td>\n</tr>\n<tr>\n<td>TagRepository.java</td>\n<td>标签业务处理 SQL操作接口</td>\n</tr>\n<tr>\n<td>BlogRepository.java</td>\n<td>博客业务处理 SQL操作接口</td>\n</tr>\n<tr>\n<td>CommentRepository.java</td>\n<td>评论业务处理 SQL操作接口</td>\n</tr>\n<tr>\n<td>BlogQuery.java</td>\n<td>博客搜索查询类</td>\n</tr>\n<tr>\n<td>MD5Utils.java</td>\n<td>MD5加密类</td>\n</tr>\n<tr>\n<td>MyBeanUtils.java</td>\n<td>修复SQL数据修改后为null工具类(过滤掉数据值为null)</td>\n</tr>\n<tr>\n<td>MarkdownUtils.java</td>\n<td>Markdown转换HTML工具类</td>\n</tr>\n<tr>\n<td>messages.properties</td>\n<td>数据配置文件</td>\n</tr>\n</tbody></table>\n<p>项目配置(Jar包)</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.4.2&lt;&#x2F;version&gt;\n        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;&#x2F;parent&gt;\n\n    &lt;groupId&gt;com.cxkj&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;blog&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;name&gt;blog&lt;&#x2F;name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;\n        &lt;tymeleaf.version&gt;3.0.2.RELEASE&lt;&#x2F;tymeleaf.version&gt;\n        &lt;tymeleaf-layout-dialect.version&gt;2.1.1&lt;&#x2F;tymeleaf-layout-dialect.version&gt;\n    &lt;&#x2F;properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n            &lt;optional&gt;true&lt;&#x2F;optional&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;test&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n            &lt;&#x2F;plugin&gt;\n        &lt;&#x2F;plugins&gt;\n    &lt;&#x2F;build&gt;\n\n&lt;&#x2F;project&gt;</code></pre>\n<p>后面导入的Jar包(新版本原因曾经的Jar不包含了)</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;javax.validation&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;validation-api&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.hibernate&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;hibernate-validator&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;6.0.13.Final&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n<p>Markdown转换HTML第三方Jar包配置</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;com.atlassian.commonmark&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;commonmark&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.10.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.atlassian.commonmark&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.10.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.atlassian.commonmark&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.10.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n<h3 id=\"Application-yml配置文件\"><a href=\"#Application-yml配置文件\" class=\"headerlink\" title=\"Application.yml配置文件\"></a>Application.yml配置文件</h3><p>thymeleaf模板配置</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  thymeleaf: \n    mode: HTML</code></pre>\n<p>数据库相关连接配置</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">datasource:\n  driver-class-name: com.mysql.cj.jdbc.Driver\n  url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;blog?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8\n  username: root\n  password: 123456789</code></pre>\n<p>JPA的连接配置</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">jpa:\nhibernate:\n  ddl-auto: update\nshow-sql: true</code></pre>\n<p>日志配置</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">logging:\n  level:\n    root: info\n    com.cxkj: debug\n  file:\n    name: log&#x2F;blog.log</code></pre>\n<p>日志的细节操作(logback-spring.xml)</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;configuration&gt;\n    &lt;!--包含Spring boot对logback日志的默认配置--&gt;\n    &lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;defaults.xml&quot; &#x2F;&gt;\n    &lt;property name&#x3D;&quot;LOG_FILE&quot; value&#x3D;&quot;$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-&#x2F;tmp&#125;&#125;&#125;&#x2F;spring.log&#125;&quot;&#x2F;&gt;\n    &lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;console-appender.xml&quot; &#x2F;&gt;\n\n    &lt;!--重写了Spring Boot框架 org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;file-appender.xml 配置--&gt;\n    &lt;appender name&#x3D;&quot;TIME_FILE&quot;\n              class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n        &lt;encoder&gt;\n            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;encoder&gt;\n        &lt;file&gt;$&#123;LOG_FILE&#125;&lt;&#x2F;file&gt;\n        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n            &lt;fileNamePattern&gt;$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i&lt;&#x2F;fileNamePattern&gt;\n            &lt;!--保留历史日志一个月的时间--&gt;\n            &lt;maxHistory&gt;30&lt;&#x2F;maxHistory&gt;\n            &lt;!--\n            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志\n            --&gt;\n            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;\n                &lt;maxFileSize&gt;10MB&lt;&#x2F;maxFileSize&gt;\n            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;\n\n        &lt;&#x2F;rollingPolicy&gt;\n    &lt;&#x2F;appender&gt;\n\n    &lt;root level&#x3D;&quot;INFO&quot;&gt;\n        &lt;appender-ref ref&#x3D;&quot;CONSOLE&quot; &#x2F;&gt;\n        &lt;appender-ref ref&#x3D;&quot;TIME_FILE&quot; &#x2F;&gt;\n    &lt;&#x2F;root&gt;\n\n&lt;&#x2F;configuration&gt;\n        &lt;!--\n            1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）\n            2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：\n\n                blog.2017-08-01.0   80MB\n                blog.2017-08-01.1   10MB\n                blog.2017-08-02.0   56MB\n                blog.2017-08-03.0   53MB\n                ......\n        --&gt;</code></pre>\n<p>公共环境(开发环境指定为dev)</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  thymeleaf:\n    mode: HTML\n  profiles:\n    active: dev</code></pre>\n<p>开发环境</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;blog?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8\n    username: root\n    password: 123456789\n\n  jpa:\n    hibernate:\n      ddl-auto: update\n    show-sql: true\n\nlogging:\n  level:\n    root: info\n    com.cxkj: debug\n  file:\n    name: log&#x2F;blog-dev.log</code></pre>\n<p>生产环境</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;blog?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8\n    username: root\n    password: 123456789\n\n  jpa:\n    hibernate:\n      ddl-auto: none\n    show-sql: true\n\nlogging:\n  level:\n    root: warn\n    com.cxkj: info\n  file:\n    name: log&#x2F;blog-pro.log\n\nserver:\n  port: 808</code></pre>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>IndexController.java Web控制器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.NotFoundException;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n    @GetMapping(&quot;&#x2F;&quot;)\n    public String index()&#123;\n        String blog &#x3D; null;\n        if (blog &#x3D;&#x3D; null)&#123;\n            throw  new NotFoundException(&quot;博客不存在&quot;);\n        &#125;\n        return &quot;index&quot;;\n    &#125;\n\n&#125;</code></pre>\n<p>ControllerExceptionHandler.java BeBug拦截器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.handler;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@ControllerAdvice\npublic class ControllerExceptionHandler &#123;\n    private final Logger logger &#x3D; LoggerFactory.getLogger(this.getClass());\n\n    @ExceptionHandler(Exception.class)\n    public ModelAndView exceptionHandler(HttpServletRequest request,Exception e) throws Exception &#123;\n        logger.error(&quot;Requst URL : &#123;&#125;,Exception : &#123;&#125;&quot;, request.getRequestURI(),e);\n\n        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) !&#x3D; null)&#123;\n            throw e;\n        &#125;\n        ModelAndView mv &#x3D; new ModelAndView();\n        mv.addObject(&quot;url&quot;,request.getRequestURI());\n        mv.addObject(&quot;exception&quot;,e);\n        mv.setViewName(&quot;error&#x2F;error&quot;);\n        return mv;\n    &#125;\n&#125;</code></pre>\n<p>error.html BeBug页面</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;\n\n    &lt;head&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;title&gt;BeBug&lt;&#x2F;title&gt;\n    &lt;&#x2F;head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;BeBug&lt;&#x2F;h1&gt;\n        &lt;div&gt;\n            &lt;div th:utext&#x3D;&quot;&#39;&lt;!--&#39;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n            &lt;div th:utext&#x3D;&quot;&#39;Failed Request URL : &#39; + $&#123;url&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n            &lt;div th:utext&#x3D;&quot;&#39;Exception message : &#39; + $&#123;exception.message&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n            &lt;ul th:remove&#x3D;&quot;tag&quot;&gt;\n                &lt;li th:each&#x3D;&quot;st : $&#123;exception.stackTrace&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;span th:utext&#x3D;&quot;$&#123;st&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;\n            &lt;&#x2F;ul&gt;\n            &lt;div th:utext&#x3D;&quot;&#39;--&gt;&#39;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;</code></pre>\n<p>NotFoundException.java 异常类，业务相关（如果没有页面报错404）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@ResponseStatus(HttpStatus.NOT_FOUND)\npublic class NotFoundException extends RuntimeException&#123;\n    public NotFoundException() &#123;\n    &#125;\n\n    public NotFoundException(String message) &#123;\n        super(message);\n    &#125;\n\n    public NotFoundException(String message, Throwable cause) &#123;\n        super(message, cause);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"日志处理\"><a href=\"#日志处理\" class=\"headerlink\" title=\"日志处理\"></a>日志处理</h3><p>LogAspect.java 接口记录日志AOP类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.aspect;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.*;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Arrays;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Aspect\n@Component\npublic class LogAspect &#123;\n\n    private final Logger logger &#x3D; LoggerFactory.getLogger(this.getClass());\n\n    @Pointcut(&quot;execution(* com.cxkj.blog.web.*.*(..))&quot;)\n    public void log() &#123;\n    &#125;\n\n    @Before(&quot;log()&quot;)\n    public void doBefore(JoinPoint joinPoint) &#123;\n        ServletRequestAttributes attributes &#x3D; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request &#x3D; attributes.getRequest();\n        String url &#x3D; request.getRequestURL().toString();\n        String ip &#x3D; request.getRemoteAddr();\n        String classMethod &#x3D; joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();\n        Object[] args &#x3D; joinPoint.getArgs();\n        RequestLog requestLog &#x3D; new RequestLog(url, ip, classMethod, args);\n        logger.info(&quot;Request : &#123;&#125;&quot;, requestLog);\n    &#125;\n\n    @After(&quot;log()&quot;)\n    public void doAfter() &#123;\n        &#x2F;&#x2F;logger.info(&quot;------ doAfter ------&quot;);\n    &#125;\n\n    @AfterReturning(returning &#x3D; &quot;result&quot;, pointcut &#x3D; &quot;log()&quot;)\n    public void doAfterReturning(Object result) &#123;\n        logger.info(&quot;Result : &#123;&#125;&quot; + result);\n    &#125;\n\n    private class RequestLog &#123;\n        private final String url;\n        private final String ip;\n        private final String classMethod;\n        private final Object[] args;\n\n        public RequestLog(String url, String ip, String classMethod, Object[] args) &#123;\n            this.url &#x3D; url;\n            this.ip &#x3D; ip;\n            this.classMethod &#x3D; classMethod;\n            this.args &#x3D; args;\n        &#125;\n\n        @Override\n        public String toString() &#123;\n            return &quot;&#123;&quot; +\n                    &quot;url&#x3D;&#39;&quot; + url + &#39;\\&#39;&#39; +\n                    &quot;, ip&#x3D;&#39;&quot; + ip + &#39;\\&#39;&#39; +\n                    &quot;, classMethod&#x3D;&#39;&quot; + classMethod + &#39;\\&#39;&#39; +\n                    &quot;, args&#x3D;&quot; + Arrays.toString(args) +\n                    &#39;&#125;&#39;;\n        &#125;\n    &#125;\n\n&#125;</code></pre>\n<p>IndexController.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.NotFoundException;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n    @GetMapping(&quot;&#x2F;&#123;id&#125;&#x2F;&#123;name&#125;&quot;)\n    public String index(@PathVariable Integer id,@PathVariable String name)&#123;\n            &#x2F;*String blog &#x3D; null;\n            if (blog &#x3D;&#x3D; null)&#123;\n                throw  new NotFoundException(&quot;博客不存在&quot;);\n            &#125;*&#x2F;\n        System.out.println(&quot;------ Index ------&quot;);\n        return &quot;index&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"页面处理\"><a href=\"#页面处理\" class=\"headerlink\" title=\"页面处理\"></a>页面处理</h3><p>IndexController.java Web控制器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.NotFoundException;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n    @GetMapping(&quot;&#x2F;&quot;)\n    public String index()&#123;\n            &#x2F;*String blog &#x3D; null;\n            if (blog &#x3D;&#x3D; null)&#123;\n                throw  new NotFoundException(&quot;博客不存在&quot;);\n            &#125;*&#x2F;\n        return &quot;index&quot;;\n    &#125;\n\n&#125;</code></pre>\n<p>动态页面 定义Thymeleaf片段</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;\n\n    &lt;head th:fragment&#x3D;&quot;head(title)&quot;&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0&quot;&gt;\n        &lt;title th:replace&#x3D;&quot;$&#123;title&#125;&quot;&gt;详情&lt;&#x2F;title&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;semantic-ui@2.4.2&#x2F;dist&#x2F;semantic.min.css&quot;&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;typo.css&quot; th:href &#x3D; &quot;@&#123;&#x2F;css&#x2F;typo.css&#125;&quot;&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;animate.css&quot; th:href &#x3D; &quot;@&#123;&#x2F;css&#x2F;animate.css&#125;&quot;&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;prism&#x2F;prism.css&quot; th:href &#x3D; &quot;@&#123;&#x2F;lib&#x2F;prism&#x2F;prism.css&#125;&quot;&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;tocbot&#x2F;tocbot.css&quot; th:href &#x3D; &quot;@&#123;&#x2F;lib&#x2F;tocbot&#x2F;tocbot.css&#125;&quot;&gt;\n        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;meCs.css&quot; th:href &#x3D; &quot;@&#123;&#x2F;css&#x2F;meCs.css&#125;&quot;&gt;\n    &lt;&#x2F;head&gt;\n\n    &lt;body&gt;\n\n        &lt;!--导航--&gt;\n        &lt;nav th:fragment&#x3D;&quot;menu(n)&quot; class&#x3D;&quot;ui inverted attached segment m-padded-tb-mini m-shadow-small&quot;&gt;\n            &lt;div class&#x3D;&quot;ui container&quot;&gt;\n                &lt;div class&#x3D;&quot;ui inverted secondary stackable menu&quot;&gt;\n                    &lt;h2 class&#x3D;&quot;ui teal header item&quot;&gt;Guest Island&lt;&#x2F;h2&gt;\n                    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;m-item item m-mobile-hide&quot; th:classappend&#x3D;&quot;$&#123;n&#x3D;&#x3D;1&#125; ? &#39;active&#39;&quot;&gt;&lt;i class&#x3D;&quot;home icon&quot;&gt;&lt;&#x2F;i&gt;首页&lt;&#x2F;a&gt;\n                    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;m-item item m-mobile-hide&quot; th:classappend&#x3D;&quot;$&#123;n&#x3D;&#x3D;2&#125; ? &#39;active&#39;&quot;&gt;&lt;i class&#x3D;&quot;idea icon&quot;&gt;&lt;&#x2F;i&gt;分类&lt;&#x2F;a&gt;\n                    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;m-item item m-mobile-hide&quot; th:classappend&#x3D;&quot;$&#123;n&#x3D;&#x3D;3&#125; ? &#39;active&#39;&quot;&gt;&lt;i class&#x3D;&quot;tags icon&quot;&gt;&lt;&#x2F;i&gt;标签&lt;&#x2F;a&gt;\n                    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;m-item item m-mobile-hide&quot; th:classappend&#x3D;&quot;$&#123;n&#x3D;&#x3D;4&#125; ? &#39;active&#39;&quot;&gt;&lt;i class&#x3D;&quot;clone icon&quot;&gt;&lt;&#x2F;i&gt;归档&lt;&#x2F;a&gt;\n                    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;m-item item m-mobile-hide&quot; th:classappend&#x3D;&quot;$&#123;n&#x3D;&#x3D;5&#125; ? &#39;active&#39;&quot;&gt;&lt;i class&#x3D;&quot;info icon&quot;&gt;&lt;&#x2F;i&gt;关于我&lt;&#x2F;a&gt;\n                    &lt;!--搜索栏--&gt;\n                    &lt;div class&#x3D;&quot;right m-item item m-mobile-hide&quot;&gt;\n                        &lt;div class&#x3D;&quot;ui icon inverted transparent input&quot;&gt;\n                            &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Search......&quot;&gt;\n                            &lt;i class&#x3D;&quot;search link icon&quot;&gt;&lt;&#x2F;i&gt;\n                        &lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                &lt;&#x2F;div&gt;\n            &lt;&#x2F;div&gt;\n            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;ui menu toggle black icon button m-right-top m-mobile-show&quot;&gt;\n                &lt;i class&#x3D;&quot;sidebar icon&quot;&gt;&lt;&#x2F;i&gt;\n            &lt;&#x2F;a&gt;\n        &lt;&#x2F;nav&gt;\n\n        &lt;!--底部--&gt;\n        &lt;footer th:fragment&#x3D;&quot;footer&quot; class&#x3D;&quot;ui inverted vertical segment m-padded-tb-massivs&quot;&gt;\n            &lt;div class&#x3D;&quot;ui center aligned container&quot;&gt;\n                &lt;div class&#x3D;&quot;ui inverted divided stackable grid&quot;&gt;\n                    &lt;div class&#x3D;&quot;three wide column&quot;&gt;\n                        &lt;div class&#x3D;&quot;ui inverted link list&quot;&gt;\n                            &lt;div class&#x3D;&quot;item&quot;&gt;\n                                &lt;img src&#x3D;&quot;..&#x2F;static&#x2F;images&#x2F;WX_Arvin.jpg&quot; th:src &#x3D; &quot;@&#123;&#x2F;images&#x2F;WX_Arvin.jpg&#125;&quot; class&#x3D;&quot;ui rounded image&quot; alt&#x3D;&quot;Guest Island&quot; style&#x3D;&quot;width: 100px&quot;&gt;\n                            &lt;&#x2F;div&gt;\n                        &lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                    &lt;div class&#x3D;&quot;three wide column&quot;&gt;\n                        &lt;h4 class&#x3D;&quot;ui inverted header m-text-thin m-text-spaced&quot;&gt;最新博客&lt;&#x2F;h4&gt;\n                        &lt;div class&#x3D;&quot;ui inverted link list&quot;&gt;\n                            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;item&quot;&gt;用户故事 (User Story) &lt;&#x2F;a&gt;\n                            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;item&quot;&gt;关于脑机的那些事&lt;&#x2F;a&gt;\n                            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;item&quot;&gt;2021年计划&lt;&#x2F;a&gt;\n                        &lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                    &lt;div class&#x3D;&quot;three wide column&quot;&gt;\n                        &lt;h4 class&#x3D;&quot;ui inverted header m-text-thin m-text-spaced&quot;&gt;关于我&lt;&#x2F;h4&gt;\n                        &lt;div class&#x3D;&quot;ui inverted link list&quot;&gt;\n                            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;item&quot;&gt;Email: 2644266656@qq.com&lt;&#x2F;a&gt;\n                            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;item&quot;&gt;QQ: 2644266656&lt;&#x2F;a&gt;\n                        &lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                    &lt;div class&#x3D;&quot;seven wide column&quot;&gt;\n                        &lt;h4 class&#x3D;&quot;ui inverted header m-text-thin m-text-spaced&quot;&gt;Guest Island&lt;&#x2F;h4&gt;\n                        &lt;p class&#x3D;&quot;m-text-thin m-text-spaced m-opacity-mini&quot;&gt;南有孤岛北有亡梦，南柯一梦终是虚无。&lt;&#x2F;p&gt;\n                    &lt;&#x2F;div&gt;\n                &lt;&#x2F;div&gt;\n                &lt;div class&#x3D;&quot;ui inverted section divider&quot;&gt;&lt;&#x2F;div&gt;\n                &lt;p class&#x3D;&quot;m-text-thin m-text-spaced m-opacity-tiny&quot;&gt;Copyright &amp;copy; 2020-2021 Guest Island Personal blog&lt;&#x2F;p&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;footer&gt;\n\n        &lt;!--script--&gt;\n        &lt;th:block th:fragment&#x3D;&quot;script&quot;&gt;\n            &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery@3.2&#x2F;dist&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;semantic-ui@2.4.2&#x2F;dist&#x2F;semantic.min.js&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery.scrollto@2.1.2&#x2F;jquery.scrollTo.min.js&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;prism&#x2F;prism.js&quot; th:src&#x3D;&quot;@&#123;&#x2F;lib&#x2F;prism&#x2F;prism.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;tocbot&#x2F;tocbot.min.js&quot; th:src&#x3D;&quot;@&#123;&#x2F;lib&#x2F;tocbot&#x2F;tocbot.min.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;qrcode&#x2F;qrcode.min.js&quot; th:src&#x3D;&quot;@&#123;&#x2F;lib&#x2F;qrcode&#x2F;qrcode.min.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n            &lt;script src&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;waypoints&#x2F;jquery.waypoints.min.js&quot; th:src&#x3D;&quot;@&#123;&#x2F;lib&#x2F;waypoints&#x2F;jquery.waypoints.min.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n        &lt;&#x2F;th:block&gt;\n\n    &lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"实体设计\"><a href=\"#实体设计\" class=\"headerlink\" title=\"实体设计\"></a>实体设计</h3><p>blog.java 博客实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_blog&quot;)\npublic class Blog &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String title;\n    private String content;\n    private String firstPicture;\n    private String flag;\n    private Integer views;\n    private boolean appreciation;\n    private boolean shareStatement;\n    private boolean commentabled;\n    private boolean published;\n    private boolean recommend;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createTime;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date updateTime;\n\n    @ManyToOne\n    private Type type;\n\n    @ManyToMany(cascade &#x3D; &#123;CascadeType.PERSIST&#125;)\n    private List&lt;Tag&gt; tags &#x3D; new ArrayList&lt;&gt;();\n\n    @ManyToOne\n    private User user;\n\n    @OneToMany(mappedBy &#x3D; &quot;blog&quot;)\n    private List&lt;Comment&gt; comments &#x3D; new ArrayList&lt;&gt;();\n\n    public Blog() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getTitle() &#123;\n        return title;\n    &#125;\n\n    public void setTitle(String title) &#123;\n        this.title &#x3D; title;\n    &#125;\n\n    public String getContent() &#123;\n        return content;\n    &#125;\n\n    public void setContent(String content) &#123;\n        this.content &#x3D; content;\n    &#125;\n\n    public String getFirstPicture() &#123;\n        return firstPicture;\n    &#125;\n\n    public void setFirstPicture(String firstPicture) &#123;\n        this.firstPicture &#x3D; firstPicture;\n    &#125;\n\n    public String getFlag() &#123;\n        return flag;\n    &#125;\n\n    public void setFlag(String flag) &#123;\n        this.flag &#x3D; flag;\n    &#125;\n\n    public Integer getViews() &#123;\n        return views;\n    &#125;\n\n    public void setViews(Integer views) &#123;\n        this.views &#x3D; views;\n    &#125;\n\n    public boolean isAppreciation() &#123;\n        return appreciation;\n    &#125;\n\n    public void setAppreciation(boolean appreciation) &#123;\n        this.appreciation &#x3D; appreciation;\n    &#125;\n\n    public boolean isShareStatement() &#123;\n        return shareStatement;\n    &#125;\n\n    public void setShareStatement(boolean shareStatement) &#123;\n        this.shareStatement &#x3D; shareStatement;\n    &#125;\n\n    public boolean isCommentabled() &#123;\n        return commentabled;\n    &#125;\n\n    public void setCommentabled(boolean commentabled) &#123;\n        this.commentabled &#x3D; commentabled;\n    &#125;\n\n    public boolean isPublished() &#123;\n        return published;\n    &#125;\n\n    public void setPublished(boolean published) &#123;\n        this.published &#x3D; published;\n    &#125;\n\n    public boolean isRecommend() &#123;\n        return recommend;\n    &#125;\n\n    public void setRecommend(boolean recommend) &#123;\n        this.recommend &#x3D; recommend;\n    &#125;\n\n    public Date getCreateTime() &#123;\n        return createTime;\n    &#125;\n\n    public void setCreateTime(Date createTime) &#123;\n        this.createTime &#x3D; createTime;\n    &#125;\n\n    public Date getUpdateTime() &#123;\n        return updateTime;\n    &#125;\n\n    public void setUpdateTime(Date updateTime) &#123;\n        this.updateTime &#x3D; updateTime;\n    &#125;\n\n    public Type getType() &#123;\n        return type;\n    &#125;\n\n    public void setType(Type type) &#123;\n        this.type &#x3D; type;\n    &#125;\n\n    public List&lt;Tag&gt; getTags() &#123;\n        return tags;\n    &#125;\n\n    public void setTags(List&lt;Tag&gt; tags) &#123;\n        this.tags &#x3D; tags;\n    &#125;\n\n    public User getUser() &#123;\n        return user;\n    &#125;\n\n    public void setUser(User user) &#123;\n        this.user &#x3D; user;\n    &#125;\n\n    public List&lt;Comment&gt; getComments() &#123;\n        return comments;\n    &#125;\n\n    public void setComments(List&lt;Comment&gt; comments) &#123;\n        this.comments &#x3D; comments;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Blog&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, title&#x3D;&#39;&quot; + title + &#39;\\&#39;&#39; +\n                &quot;, content&#x3D;&#39;&quot; + content + &#39;\\&#39;&#39; +\n                &quot;, firstPicture&#x3D;&#39;&quot; + firstPicture + &#39;\\&#39;&#39; +\n                &quot;, flag&#x3D;&#39;&quot; + flag + &#39;\\&#39;&#39; +\n                &quot;, views&#x3D;&quot; + views +\n                &quot;, appreciation&#x3D;&quot; + appreciation +\n                &quot;, shareStatement&#x3D;&quot; + shareStatement +\n                &quot;, commentabled&#x3D;&quot; + commentabled +\n                &quot;, published&#x3D;&quot; + published +\n                &quot;, recommend&#x3D;&quot; + recommend +\n                &quot;, createTime&#x3D;&quot; + createTime +\n                &quot;, updateTime&#x3D;&quot; + updateTime +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;</code></pre>\n<p>Type.java 分类实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport javax.validation.constraints.NotBlank;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_type&quot;)\npublic class Type &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    @NotBlank(message &#x3D; &quot;分类名称不能为空哦&quot;)\n    private String name;\n\n    @OneToMany(mappedBy &#x3D; &quot;type&quot;)\n    private List&lt;Blog&gt; blogs &#x3D; new ArrayList&lt;&gt;();\n\n    public Type() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public List&lt;Blog&gt; getBlogs() &#123;\n        return blogs;\n    &#125;\n\n    public void setBlogs(List&lt;Blog&gt; blogs) &#123;\n        this.blogs &#x3D; blogs;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Type&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, name&#x3D;&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;</code></pre>\n<p>Tag.java 标签实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_tag&quot;)\npublic class Tag &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    private String name;\n\n    @ManyToMany(mappedBy &#x3D; &quot;tags&quot;)\n    private List&lt;Blog&gt; blogs &#x3D; new ArrayList&lt;&gt;();\n\n    public Tag() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public List&lt;Blog&gt; getBlogs() &#123;\n        return blogs;\n    &#125;\n\n    public void setBlogs(List&lt;Blog&gt; blogs) &#123;\n        this.blogs &#x3D; blogs;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Tag&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, name&#x3D;&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;</code></pre>\n<p>Comment.java 评论实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_comment&quot;)\npublic class Comment &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    private String nickname;\n    private String email;\n    private String content;\n    private String avatar;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createTime;\n\n    @ManyToOne\n    private Blog blog;\n\n    @OneToMany(mappedBy &#x3D; &quot;parentComment&quot;)\n    private List&lt;Comment&gt; replyComments &#x3D; new ArrayList&lt;&gt;();\n    @ManyToOne\n    private Comment parentComment;\n\n    public Comment() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getNickname() &#123;\n        return nickname;\n    &#125;\n\n    public void setNickname(String nickname) &#123;\n        this.nickname &#x3D; nickname;\n    &#125;\n\n    public String getEmail() &#123;\n        return email;\n    &#125;\n\n    public void setEmail(String email) &#123;\n        this.email &#x3D; email;\n    &#125;\n\n    public String getContent() &#123;\n        return content;\n    &#125;\n\n    public void setContent(String content) &#123;\n        this.content &#x3D; content;\n    &#125;\n\n    public String getAvatar() &#123;\n        return avatar;\n    &#125;\n\n    public void setAvatar(String avatar) &#123;\n        this.avatar &#x3D; avatar;\n    &#125;\n\n    public Date getCreateTime() &#123;\n        return createTime;\n    &#125;\n\n    public void setCreateTime(Date createTime) &#123;\n        this.createTime &#x3D; createTime;\n    &#125;\n\n    public Blog getBlog() &#123;\n        return blog;\n    &#125;\n\n    public void setBlog(Blog blog) &#123;\n        this.blog &#x3D; blog;\n    &#125;\n\n    public List&lt;Comment&gt; getReplyComments() &#123;\n        return replyComments;\n    &#125;\n\n    public void setReplyComments(List&lt;Comment&gt; replyComments) &#123;\n        this.replyComments &#x3D; replyComments;\n    &#125;\n\n    public Comment getParentComment() &#123;\n        return parentComment;\n    &#125;\n\n    public void setParentComment(Comment parentComment) &#123;\n        this.parentComment &#x3D; parentComment;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Comment&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, nickname&#x3D;&#39;&quot; + nickname + &#39;\\&#39;&#39; +\n                &quot;, email&#x3D;&#39;&quot; + email + &#39;\\&#39;&#39; +\n                &quot;, content&#x3D;&#39;&quot; + content + &#39;\\&#39;&#39; +\n                &quot;, avatar&#x3D;&#39;&quot; + avatar + &#39;\\&#39;&#39; +\n                &quot;, createTime&#x3D;&quot; + createTime +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;</code></pre>\n<p>User.java 用户实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_user&quot;)\npublic class User &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    private String nickname;\n    private String username;\n    private String password;\n    private String email;\n    private String avatar;\n    private Integer type;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date CreateTime;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date updateTime;\n\n    @OneToMany(mappedBy &#x3D; &quot;user&quot;)\n    private List&lt;Blog&gt; blogs &#x3D; new ArrayList&lt;&gt;();\n\n    public User() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getNickname() &#123;\n        return nickname;\n    &#125;\n\n    public void setNickname(String nickname) &#123;\n        this.nickname &#x3D; nickname;\n    &#125;\n\n    public String getUsername() &#123;\n        return username;\n    &#125;\n\n    public void setUsername(String username) &#123;\n        this.username &#x3D; username;\n    &#125;\n\n    public String getPassword() &#123;\n        return password;\n    &#125;\n\n    public void setPassword(String password) &#123;\n        this.password &#x3D; password;\n    &#125;\n\n    public String getEmail() &#123;\n        return email;\n    &#125;\n\n    public void setEmail(String email) &#123;\n        this.email &#x3D; email;\n    &#125;\n\n    public String getAvatar() &#123;\n        return avatar;\n    &#125;\n\n    public void setAvatar(String avatar) &#123;\n        this.avatar &#x3D; avatar;\n    &#125;\n\n    public Integer getType() &#123;\n        return type;\n    &#125;\n\n    public void setType(Integer type) &#123;\n        this.type &#x3D; type;\n    &#125;\n\n    public Date getCreateTime() &#123;\n        return CreateTime;\n    &#125;\n\n    public void setCreateTime(Date createTime) &#123;\n        CreateTime &#x3D; createTime;\n    &#125;\n\n    public Date getUpdateTime() &#123;\n        return updateTime;\n    &#125;\n\n    public void setUpdateTime(Date updateTime) &#123;\n        this.updateTime &#x3D; updateTime;\n    &#125;\n\n    public List&lt;Blog&gt; getBlogs() &#123;\n        return blogs;\n    &#125;\n\n    public void setBlogs(List&lt;Blog&gt; blogs) &#123;\n        this.blogs &#x3D; blogs;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;User&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, nickname&#x3D;&#39;&quot; + nickname + &#39;\\&#39;&#39; +\n                &quot;, username&#x3D;&#39;&quot; + username + &#39;\\&#39;&#39; +\n                &quot;, password&#x3D;&#39;&quot; + password + &#39;\\&#39;&#39; +\n                &quot;, email&#x3D;&#39;&quot; + email + &#39;\\&#39;&#39; +\n                &quot;, avatar&#x3D;&#39;&quot; + avatar + &#39;\\&#39;&#39; +\n                &quot;, type&#x3D;&quot; + type +\n                &quot;, CreateTime&#x3D;&quot; + CreateTime +\n                &quot;, updateTime&#x3D;&quot; + updateTime +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"后台登录业务\"><a href=\"#后台登录业务\" class=\"headerlink\" title=\"后台登录业务\"></a>后台登录业务</h3><p>UserService.java User登录业务逻辑处理接口类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.User;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n\npublic interface UserService &#123;\n    \n    User checkUser(String username,String password);\n&#125;</code></pre>\n<p>UserServiceImpl.java User登录业务逻辑处理实现类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.dao.UserRepository;\nimport com.cxkj.blog.pojo.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Service\npublic class UserServiceImpl implements UserService&#123;\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    @Override\n    public User checkUser(String username, String password) &#123;\n        User user &#x3D; userRepository.findByUsernameAndPassword(username,password);\n        return user;\n    &#125;\n    \n&#125;</code></pre>\n<p>UserRepository.java 引用SpringJPA SQL操作接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n\npublic interface UserRepository extends JpaRepository&lt;User,Long&gt; &#123;\n    \n    User findByUsernameAndPassword(String username,String password);\n&#125;</code></pre>\n<p>LoginController.java WEB登录模块控制器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web.admin;\n\nimport com.cxkj.blog.pojo.User;\nimport com.cxkj.blog.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.servlet.http.HttpSession;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Controller\n@RequestMapping(&quot;&#x2F;admin&quot;)\npublic class LoginController &#123;\n    \n    @Autowired\n    private UserService userService;\n    \n    @GetMapping\n    public String loginPage()&#123;\n        return &quot;admin&#x2F;login&quot;;\n    &#125;\n    \n    @PostMapping(&quot;&#x2F;login&quot;)\n    public String login(@RequestParam String username, @RequestParam String password, HttpSession session, RedirectAttributes attributes)&#123;\n        User user &#x3D; userService.checkUser(username,password);\n        if (user !&#x3D; null)&#123;\n            user.setPassword(null);\n            session.setAttribute(&quot;user&quot;,user);\n            return &quot;admin&#x2F;index&quot;;\n        &#125;else &#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;用户名和密码存在异常错误&quot;);\n            return &quot;redirect:&#x2F;admin&quot;;\n        &#125;\n        \n    &#125;\n    \n    @GetMapping(&quot;&#x2F;logout&quot;)\n    public String logout(HttpSession session)&#123;\n        session.removeAttribute(&quot;user&quot;);\n        return &quot;redirect:&#x2F;admin&quot;;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"MD5加密\"><a href=\"#MD5加密\" class=\"headerlink\" title=\"MD5加密\"></a>MD5加密</h3><p>MD5Utils.java MD5加密工具类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.util;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *\n *  MD5加密类\n * @parm str 要加密的字符串\n * @return 加密后的字符串\n *&#x2F;\n\npublic class MD5Utils &#123;\n\n    public static String code(String str)&#123;\n\n        try &#123;\n            MessageDigest md &#x3D; MessageDigest.getInstance(&quot;MD5&quot;);\n            md.update(str.getBytes());\n            byte[] bytesDigest &#x3D; md.digest();\n            int i;\n            StringBuffer buffer &#x3D; new StringBuffer(&quot;&quot;);\n            for (int offset &#x3D; 0;offset&lt;bytesDigest.length;offset++)&#123;\n                i &#x3D; bytesDigest[offset];\n                if (i&lt;0)\n                    i+&#x3D; 256;\n                if (i&lt;16)\n                    buffer.append(&quot;0&quot;);\n                buffer.append(Integer.toHexString(i));\n            &#125;\n            &#x2F;&#x2F;32位加密\n            return buffer.toString();\n            &#x2F;&#x2F;16位加密\n            &#x2F;&#x2F;return buffer.toString().substring(8,20);\n        &#125; catch (NoSuchAlgorithmException e) &#123;\n            e.printStackTrace();\n            return null;\n        &#125;\n\n    &#125;\n    \n    &#x2F;&#x2F;加密测试Main方法\n    public static void main(String[] args) &#123;\n        System.out.println(code(&quot;123456789&quot;));\n    &#125;\n&#125;</code></pre>\n<p>UserServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.dao.UserRepository;\nimport com.cxkj.blog.pojo.User;\nimport com.cxkj.blog.util.MD5Utils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Service\npublic class UserServiceImpl implements UserService&#123;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public User checkUser(String username, String password) &#123;\n        User user &#x3D; userRepository.findByUsernameAndPassword(username, MD5Utils.code(password));\n        return user;\n    &#125;\n\n&#125;</code></pre>\n<p>BlogController.java 博客后台页面权限过滤管理类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web.admin;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Controller\n@RequestMapping(&quot;&#x2F;admin&quot;)\npublic class BlogController &#123;\n\n    @GetMapping(&quot;&#x2F;blogs&quot;)\n    public String blogs() &#123;\n        return &quot;blogs&quot;;\n    &#125;\n\n&#125;</code></pre>\n<p>LongInterceptor.java Blog后台页面权限(登录过滤)类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.interceptor;\n\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n\npublic class LongInterceptor extends WebMvcConfigurerAdapter &#123;\n\n    &#x2F;&#x2F;WebMvcConfigurerAdapter这个也过时了\n    \n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n\n        if (request.getSession().getAttribute(&quot;user&quot;) &#x3D;&#x3D; null)&#123;\n            response.sendRedirect(&quot;&#x2F;admin&quot;);\n            return false;\n        &#125;\n\n        return true;\n    &#125;\n&#125;</code></pre>\n<p>WebConfig.java Blog后台页面权限(拦截配置)类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.interceptor;\n\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Configuration\npublic class WebConfig extends WebMvcConfigurerAdapter &#123;\n\n    &#x2F;&#x2F;WebMvcConfigurerAdapter这个过时了\n    \n    @Override\n    public void addInterceptors(InterceptorRegistry registry) &#123;\n        registry.addInterceptor(new LongInterceptor()).addPathPatterns(&quot;&#x2F;admin&#x2F;**&quot;)\n                .excludePathPatterns(&quot;&#x2F;admin&quot;)\n                .excludePathPatterns(&quot;&#x2F;admin&#x2F;login&quot;);\n    &#125;\n\n&#125;</code></pre>\n<h3 id=\"关于弃用类整改\"><a href=\"#关于弃用类整改\" class=\"headerlink\" title=\"关于弃用类整改\"></a>关于弃用类整改</h3><p>LongInterceptor.java Blog后台页面权限(登录过滤)类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.interceptor;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n\npublic class LongInterceptor implements HandlerInterceptor &#123;\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n\n        if (request.getSession().getAttribute(&quot;user&quot;) &#x3D;&#x3D; null)&#123;\n            response.sendRedirect(&quot;&#x2F;admin&quot;);\n            return false;\n        &#125;\n\n        return true;\n    &#125;\n&#125;</code></pre>\n<p>WebConfig.java Blog后台页面权限(拦截配置)类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.interceptor;\n\n\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Configuration\npublic class WebConfig implements WebMvcConfigurer &#123;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) &#123;\n        registry.addInterceptor(new LongInterceptor()).addPathPatterns(&quot;&#x2F;admin&#x2F;**&quot;)\n                .excludePathPatterns(&quot;&#x2F;admin&quot;)\n                .excludePathPatterns(&quot;&#x2F;admin&#x2F;login&quot;);\n    &#125;\n\n&#125;</code></pre>\n<h3 id=\"分类业务处理\"><a href=\"#分类业务处理\" class=\"headerlink\" title=\"分类业务处理\"></a>分类业务处理</h3><p>TypeService.java 分类业务逻辑处理接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n\npublic interface TypeService &#123;\n\n    Type saveType(Type type);\n\n    Type getType(Long id);\n\n    Type getTypeByName(String name);\n\n    Page&lt;Type&gt; listType(Pageable pageable);\n\n    List&lt;Type&gt; listType();\n\n    Type updateType(Long id,Type type);\n\n    void deleteType(Long id);\n&#125;</code></pre>\n<p>TypeServiceImpl.java 分类业务逻辑处理实现类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.TypeRepository;\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n@Service\npublic class TypeServiceImpl implements TypeService&#123;\n\n    @Autowired\n    private TypeRepository typeRepository;\n\n    @Transactional\n    @Override\n    public Type saveType(Type type) &#123;\n        return typeRepository.save(type);\n    &#125;\n\n    @Transactional\n    @Override\n    public Type getType(Long id) &#123;\n        return typeRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Type getTypeByName(String name) &#123;\n        return typeRepository.findByName(name);\n    &#125;\n\n    @Transactional\n    @Override\n    public Page&lt;Type&gt; listType(Pageable pageable) &#123;\n        return typeRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Type&gt; listType() &#123;\n        return typeRepository.findAll();\n    &#125;\n\n    @Transactional\n    @Override\n    public Type updateType(Long id, Type type) &#123;\n        Type t &#x3D; typeRepository.findById(id).get();\n        if (t &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;您查找的信息不存在(︶︹︺)&quot;);\n        &#125;\n        BeanUtils.copyProperties(type,t);\n        return typeRepository.save(t);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteType(Long id) &#123;\n        typeRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<p>TypeRepository.java 分类业务 SQL操作接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n\npublic interface TypeRepository extends JpaRepository&lt;Type,Long&gt; &#123;\n\n    Type findByName(String name);\n&#125;</code></pre>\n<p>TypeController.java Web层操作</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web.admin;\n\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.service.TypeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.validation.Valid;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n@Controller\n@RequestMapping(&quot;&#x2F;admin&quot;)\npublic class TypeController &#123;\n\n    @Autowired\n    private TypeService typeService;\n\n    @GetMapping(&quot;&#x2F;types&quot;)\n    public String types(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;id&quot;&#125;,direction &#x3D; Sort.Direction.DESC)\n                                Pageable pageable, Model model)&#123;\n\n        model.addAttribute(&quot;page&quot;,typeService.listType(pageable));\n        return &quot;&#x2F;admin&#x2F;types&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;types&#x2F;input&quot;)\n    public String input(Model model)&#123;\n        model.addAttribute(&quot;type&quot;,new Type());\n        return &quot;&#x2F;admin&#x2F;types-input&quot;;\n    &#125;\n\n    @GetMapping(&quot;types&#x2F;&#123;id&#125;&#x2F;input&quot;)\n    public String editInput(@PathVariable Long id, Model model)&#123;\n        model.addAttribute(&quot;type&quot;,typeService.getType(id));\n        return &quot;&#x2F;admin&#x2F;types-input&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;types&quot;)\n    public String post(@Valid Type type, BindingResult result, RedirectAttributes attributes)&#123;\n        Type typename &#x3D; typeService.getTypeByName(type.getName());\n        if (typename !&#x3D; null)&#123;\n            result.rejectValue(&quot;name&quot;,&quot;nameError&quot;,&quot;管理员大大，这个分类已经有了。((٩(&#x2F;&#x2F;̀Д&#x2F;́&#x2F;)۶))做人要专一哦！&quot;);\n        &#125;\n        if (result.hasErrors())&#123;\n            return &quot;&#x2F;admin&#x2F;types-input&quot;;\n        &#125;\n        Type t &#x3D;  typeService.saveType(type);\n        if (t &#x3D;&#x3D; null)&#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;新增失败 ﾍ(;´Д｀ﾍ),管理员大大重新试下吧&quot;);\n        &#125;else &#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;新增成功 ≖‿≖✧ 快去发布新内容吧&quot;);\n        &#125;\n        return &quot;redirect:..&#x2F;admin&#x2F;types&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;types&#x2F;&#123;id&#125;&quot;)\n    public String editPost(@Valid Type type, BindingResult result,@PathVariable Long id, RedirectAttributes attributes)&#123;\n        Type typename &#x3D; typeService.getTypeByName(type.getName());\n        if (typename !&#x3D; null)&#123;\n            result.rejectValue(&quot;name&quot;,&quot;nameError&quot;,&quot;管理员大大，这个分类已经有了。((٩(&#x2F;&#x2F;̀Д&#x2F;́&#x2F;)۶))做人要专一哦！&quot;);\n        &#125;\n        if (result.hasErrors())&#123;\n            return &quot;&#x2F;admin&#x2F;types-input&quot;;\n        &#125;\n        Type t &#x3D;  typeService.updateType(id,type);\n        if (t &#x3D;&#x3D; null)&#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;更新失败（⊙o⊙）,管理员大大重新试下吧&quot;);\n        &#125;else &#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;更新成功 (≥◇≤) 快去发布新内容吧&quot;);\n        &#125;\n        return &quot;redirect:..&#x2F;types&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;types&#x2F;&#123;id&#125;&#x2F;delete&quot;)\n    public String delete(@PathVariable Long id,RedirectAttributes attributes)&#123;\n        typeService.deleteType(id);\n        attributes.addFlashAttribute(&quot;message&quot;,&quot;删除成功,可能是管理员大大不喜欢它了吧(.◕ฺˇд ˇ◕ฺ)&quot;);\n        return &quot;redirect:..&#x2F;&quot;;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"标签业务处理\"><a href=\"#标签业务处理\" class=\"headerlink\" title=\"标签业务处理\"></a>标签业务处理</h3><p>TagService.java 标签业务逻辑处理接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n\npublic interface TagService &#123;\n\n    Tag saveTag(Tag tag);\n\n    Tag getTag(Long id);\n\n    Tag getTagByName(String name);\n\n    Page&lt;Tag&gt; listTag(Pageable pageable);\n\n    List&lt;Tag&gt; listTag();\n\n    List&lt;Tag&gt; listTag(String ids);\n\n    Tag updateTag(Long id,Tag tag);\n\n    void deleteTag(Long id);\n&#125;</code></pre>\n<p>TagServiceImpl.java 标签业务逻辑处理实现类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.TagRepository;\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.thymeleaf.util.StringUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n@Service\npublic class TagServiceImpl implements TagService&#123;\n\n    @Autowired\n    private TagRepository tagRepository;\n\n    @Transactional\n    @Override\n    public Tag saveTag(Tag tag) &#123;\n        return tagRepository.save(tag);\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTag(Long id) &#123;\n        return tagRepository.findById(id).get();\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTagByName(String name) &#123;\n        return tagRepository.findByName(name);\n    &#125;\n\n    @Transactional\n    @Override\n    public Page&lt;Tag&gt; listTag(Pageable pageable) &#123;\n        return tagRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Tag&gt; listTag() &#123;\n        return tagRepository.findAll();\n    &#125;\n\n    @Override\n    public List&lt;Tag&gt; listTag(String ids) &#123;  &#x2F;&#x2F;1,2,3\n        return tagRepository.findAllById(convertToList(ids));\n    &#125;\n\n    private List&lt;Long&gt; convertToList(String ids)&#123;\n        List&lt;Long&gt; list &#x3D; new ArrayList&lt;&gt;();\n        if (&quot;&quot;.equals(ids) &amp;&amp; ids !&#x3D; null)&#123;\n            String[] idarray &#x3D; ids.split(&quot;,&quot;);\n            for (int i&#x3D;0; i&lt;idarray.length; i++)&#123;\n                list.add(new Long(idarray[i]));\n            &#125;\n        &#125;\n        return list;\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag updateTag(Long id, Tag tag) &#123;\n        Tag t &#x3D; tagRepository.findById(id).get();\n        if (t &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;您查找的信息不存在(︶︹︺)&quot;);\n        &#125;\n        BeanUtils.copyProperties(tag,t);\n        return tagRepository.save(t);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteTag(Long id) &#123;\n        tagRepository.deleteById(id);\n    &#125;\n&#125;\n</code></pre>\n<p>TagRepository.java 标签业务 SQL操作接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n\npublic interface TagRepository extends JpaRepository&lt;Tag,Long&gt; &#123;\n    \n    Tag findByName(String name);\n&#125;</code></pre>\n<p>TagController.java WEB操作</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.TagRepository;\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n@Service\npublic class TagServiceImpl implements TagService&#123;\n\n    private TagRepository tagRepository;\n\n    @Transactional\n    @Override\n    public Tag saveTag(Tag tag) &#123;\n        return tagRepository.save(tag);\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTag(Long id) &#123;\n        return tagRepository.findById(id).get();\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTagByName(String name) &#123;\n        return tagRepository.findByName(name);\n    &#125;\n\n    @Transactional\n    @Override\n    public Page&lt;Tag&gt; listTag(Pageable pageable) &#123;\n        return tagRepository.findAll(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag updateTag(Long id, Tag tag) &#123;\n        Tag t &#x3D; tagRepository.findById(id).get();\n        if (t &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;您查找的信息不存在(︶︹︺)&quot;);\n        &#125;\n        BeanUtils.copyProperties(tag,t);\n        return tagRepository.save(t);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteTag(Long id) &#123;\n        tagRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<h3 id=\"博客业务处理\"><a href=\"#博客业务处理\" class=\"headerlink\" title=\"博客业务处理\"></a>博客业务处理</h3><p>BlogService.java 博客业务处理逻辑接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;</code></pre>\n<p>BlogServiceImpl.java 博客业务处理逻辑实现类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;\n</code></pre>\n<p>BlogRepository.java 博客业务 SQL操作接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Blog;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogRepository extends JpaRepository&lt;Blog,Long&gt;, JpaSpecificationExecutor&lt;Blog&gt; &#123;\n    \n&#125;</code></pre>\n<p>BlogController.java WEB操作</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web.admin;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Tag;\nimport com.cxkj.blog.pojo.User;\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TagService;\nimport com.cxkj.blog.service.TypeService;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.servlet.http.HttpSession;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;5.\n *&#x2F;\n@Controller\n@RequestMapping(&quot;&#x2F;admin&quot;)\npublic class BlogController &#123;\n\n    private static final  String INPUT &#x3D; &quot;&#x2F;admin&#x2F;blogs-input&quot;;\n    private static final  String LIST &#x3D; &quot;&#x2F;admin&#x2F;blogs&quot;;\n    private static final  String REDIRECT_LIST &#x3D; &quot;redirect:&#x2F;admin&#x2F;blogs&quot;;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Autowired\n    private TypeService typeService;\n\n    @Autowired\n    private TagService tagService;\n\n    @GetMapping(&quot;&#x2F;blogs&quot;)\n    public String blogs(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC) Pageable pageable, BlogQuery blogQuery, Model model)&#123;\n        model.addAttribute(&quot;types&quot;,typeService.listType());\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable,blogQuery));\n        return LIST;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;blogs&#x2F;search&quot;)\n    public String search(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC) Pageable pageable,BlogQuery blogQuery,Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable,blogQuery));\n        return &quot;&#x2F;admin&#x2F;blogs :: blogList&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blogs&#x2F;input&quot;)\n    public String input(Model model)&#123;\n        setTypeAndTag(model);\n        model.addAttribute(&quot;blog&quot;,new Blog());\n        return INPUT;\n    &#125;\n\n    private void setTypeAndTag(Model model)&#123;\n        model.addAttribute(&quot;types&quot;,typeService.listType());\n        model.addAttribute(&quot;tags&quot;,tagService.listTag());\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blogs&#x2F;&#123;id&#125;&#x2F;input&quot;)\n    public String editInput (@PathVariable Long id, Model model)&#123;\n        setTypeAndTag(model);\n        Blog blog &#x3D; blogService.getBlog(id);\n        blog.init();\n        model.addAttribute(&quot;blog&quot;,blog);\n        return INPUT;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;blogs&quot;)\n    public String post(Blog blog, RedirectAttributes attributes, HttpSession session)&#123;\n        blog.setUser((User) session.getAttribute(&quot;user&quot;));\n        blog.setType(typeService.getType(blog.getType().getId()));\n        blog.setTags(tagService.listTag(blog.getTagIds()));\n        Blog b;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            b &#x3D; blogService.saveBlog(blog);\n        &#125;else &#123;\n            b &#x3D; blogService.updateBlog(blog.getId(),blog);\n        &#125;\n        if (b &#x3D;&#x3D; null)&#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;操作失败 ﾍ(;´Д｀ﾍ),管理员大大重新试下吧&quot;);\n        &#125;else &#123;\n            attributes.addFlashAttribute(&quot;message&quot;,&quot;操作成功 ≖‿≖✧ 快去发布新内容吧&quot;);\n        &#125;\n        return REDIRECT_LIST;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blogs&#x2F;&#123;id&#125;&#x2F;delete&quot;)\n    public String delete(@PathVariable Long id,RedirectAttributes attributes)&#123;\n        blogService.deleteBlog(id);\n        attributes.addFlashAttribute(&quot;message&quot;,&quot;删除成功,期待您发布更加美好的内容︿(￣︶￣)︿&quot;);\n        return REDIRECT_LIST;\n    &#125;\n&#125;</code></pre>\n<p>BlogQuery.java 博客搜索查询类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.vo;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic class BlogQuery &#123;\n    \n    private String title;\n    private Long typeID;\n    private boolean recommend;\n\n    public BlogQuery() &#123;\n    &#125;\n\n    public String getTitle() &#123;\n        return title;\n    &#125;\n\n    public void setTitle(String title) &#123;\n        this.title &#x3D; title;\n    &#125;\n\n    public Long getTypeID() &#123;\n        return typeID;\n    &#125;\n\n    public void setTypeID(Long typeID) &#123;\n        this.typeID &#x3D; typeID;\n    &#125;\n\n    public boolean isRecommend() &#123;\n        return recommend;\n    &#125;\n\n    public void setRecommend(boolean recommend) &#123;\n        this.recommend &#x3D; recommend;\n    &#125;\n&#125;</code></pre>\n<p>Blog.java 博客实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_blog&quot;)\npublic class Blog &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String title;\n\n    @Basic(fetch &#x3D; FetchType.LAZY)\n    @Lob\n    private String content;\n    private String firstPicture;\n    private String flag;\n    private Integer views;\n    private boolean appreciation;\n    private boolean shareStatement;\n    private boolean commentabled;\n    private boolean published;\n    private boolean recommend;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createTime;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date updateTime;\n\n    @ManyToOne\n    private Type type;\n\n    @ManyToMany(cascade &#x3D; &#123;CascadeType.PERSIST&#125;)\n    private List&lt;Tag&gt; tags &#x3D; new ArrayList&lt;&gt;();\n\n    @ManyToOne\n    private User user;\n\n    @OneToMany(mappedBy &#x3D; &quot;blog&quot;)\n    private List&lt;Comment&gt; comments &#x3D; new ArrayList&lt;&gt;();\n\n    @Transient\n    private String tagIds;\n\n    private String description;\n\n    public Blog() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getTitle() &#123;\n        return title;\n    &#125;\n\n    public void setTitle(String title) &#123;\n        this.title &#x3D; title;\n    &#125;\n\n    public String getContent() &#123;\n        return content;\n    &#125;\n\n    public void setContent(String content) &#123;\n        this.content &#x3D; content;\n    &#125;\n\n    public String getFirstPicture() &#123;\n        return firstPicture;\n    &#125;\n\n    public void setFirstPicture(String firstPicture) &#123;\n        this.firstPicture &#x3D; firstPicture;\n    &#125;\n\n    public String getFlag() &#123;\n        return flag;\n    &#125;\n\n    public void setFlag(String flag) &#123;\n        this.flag &#x3D; flag;\n    &#125;\n\n    public Integer getViews() &#123;\n        return views;\n    &#125;\n\n    public void setViews(Integer views) &#123;\n        this.views &#x3D; views;\n    &#125;\n\n    public boolean isAppreciation() &#123;\n        return appreciation;\n    &#125;\n\n    public void setAppreciation(boolean appreciation) &#123;\n        this.appreciation &#x3D; appreciation;\n    &#125;\n\n    public boolean isShareStatement() &#123;\n        return shareStatement;\n    &#125;\n\n    public void setShareStatement(boolean shareStatement) &#123;\n        this.shareStatement &#x3D; shareStatement;\n    &#125;\n\n    public boolean isCommentabled() &#123;\n        return commentabled;\n    &#125;\n\n    public void setCommentabled(boolean commentabled) &#123;\n        this.commentabled &#x3D; commentabled;\n    &#125;\n\n    public boolean isPublished() &#123;\n        return published;\n    &#125;\n\n    public void setPublished(boolean published) &#123;\n        this.published &#x3D; published;\n    &#125;\n\n    public boolean isRecommend() &#123;\n        return recommend;\n    &#125;\n\n    public void setRecommend(boolean recommend) &#123;\n        this.recommend &#x3D; recommend;\n    &#125;\n\n    public Date getCreateTime() &#123;\n        return createTime;\n    &#125;\n\n    public void setCreateTime(Date createTime) &#123;\n        this.createTime &#x3D; createTime;\n    &#125;\n\n    public Date getUpdateTime() &#123;\n        return updateTime;\n    &#125;\n\n    public void setUpdateTime(Date updateTime) &#123;\n        this.updateTime &#x3D; updateTime;\n    &#125;\n\n    public Type getType() &#123;\n        return type;\n    &#125;\n\n    public void setType(Type type) &#123;\n        this.type &#x3D; type;\n    &#125;\n\n    public List&lt;Tag&gt; getTags() &#123;\n        return tags;\n    &#125;\n\n    public void setTags(List&lt;Tag&gt; tags) &#123;\n        this.tags &#x3D; tags;\n    &#125;\n\n    public User getUser() &#123;\n        return user;\n    &#125;\n\n    public void setUser(User user) &#123;\n        this.user &#x3D; user;\n    &#125;\n\n    public List&lt;Comment&gt; getComments() &#123;\n        return comments;\n    &#125;\n\n    public void setComments(List&lt;Comment&gt; comments) &#123;\n        this.comments &#x3D; comments;\n    &#125;\n\n    public String getTagIds() &#123;\n        return tagIds;\n    &#125;\n\n    public void setTagIds(String tagIds) &#123;\n        this.tagIds &#x3D; tagIds;\n    &#125;\n\n    public String getDescription() &#123;\n        return description;\n    &#125;\n\n    public void setDescription(String description) &#123;\n        this.description &#x3D; description;\n    &#125;\n\n    &#x2F;&#x2F;初始化tagIds方法\n    public void init()&#123;\n        this.tagIds &#x3D; tagsToIds(this.getTags());\n    &#125;\n    private String tagsToIds(List&lt;Tag&gt; tags)&#123;\n        if (!tags.isEmpty())&#123;\n            StringBuffer ids &#x3D; new StringBuffer();\n            boolean flag &#x3D; false;\n            for (Tag tag : tags)&#123;\n                if (flag)&#123;\n                    ids.append(&quot;,&quot;);\n                &#125;else &#123;\n                    flag &#x3D; true;\n                &#125;\n                ids.append(tag.getId());\n            &#125;\n            return ids.toString();\n        &#125;else &#123;\n            return tagIds;\n        &#125;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Blog&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, title&#x3D;&#39;&quot; + title + &#39;\\&#39;&#39; +\n                &quot;, content&#x3D;&#39;&quot; + content + &#39;\\&#39;&#39; +\n                &quot;, firstPicture&#x3D;&#39;&quot; + firstPicture + &#39;\\&#39;&#39; +\n                &quot;, flag&#x3D;&#39;&quot; + flag + &#39;\\&#39;&#39; +\n                &quot;, views&#x3D;&quot; + views +\n                &quot;, appreciation&#x3D;&quot; + appreciation +\n                &quot;, shareStatement&#x3D;&quot; + shareStatement +\n                &quot;, commentabled&#x3D;&quot; + commentabled +\n                &quot;, published&#x3D;&quot; + published +\n                &quot;, recommend&#x3D;&quot; + recommend +\n                &quot;, createTime&#x3D;&quot; + createTime +\n                &quot;, updateTime&#x3D;&quot; + updateTime +\n                &quot;, type&#x3D;&quot; + type +\n                &quot;, tags&#x3D;&quot; + tags +\n                &quot;, user&#x3D;&quot; + user +\n                &quot;, comments&#x3D;&quot; + comments +\n                &quot;, tagIds&#x3D;&#39;&quot; + tagIds + &#39;\\&#39;&#39; +\n                &quot;, description&#x3D;&#39;&quot; + description + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"后端细节优化\"><a href=\"#后端细节优化\" class=\"headerlink\" title=\"后端细节优化\"></a>后端细节优化</h3><p>MyBeanUtils.java 修复SQL数据修改后为null工具类(过滤掉数据值为null)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.util;\n\nimport org.springframework.beans.BeanWrapper;\nimport org.springframework.beans.BeanWrapperImpl;\n\nimport java.beans.PropertyDescriptor;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n * Created by Arvin on 2021&#x2F;2&#x2F;10.\n *&#x2F;\npublic class MyBeanUtils &#123;\n\n\n    &#x2F;**\n     * 获取所有的属性值为空属性名数组\n     * @param source\n     * @return\n     *&#x2F;\n    public static String[] getNullPropertyNames(Object source) &#123;\n        BeanWrapper beanWrapper &#x3D; new BeanWrapperImpl(source);\n        PropertyDescriptor[] pds &#x3D;  beanWrapper.getPropertyDescriptors();\n        List&lt;String&gt; nullPropertyNames &#x3D; new ArrayList&lt;&gt;();\n        for (PropertyDescriptor pd : pds) &#123;\n            String propertyName &#x3D; pd.getName();\n            if (beanWrapper.getPropertyValue(propertyName) &#x3D;&#x3D; null) &#123;\n                nullPropertyNames.add(propertyName);\n            &#125;\n        &#125;\n        return nullPropertyNames.toArray(new String[nullPropertyNames.size()]);\n    &#125;\n\n&#125;</code></pre>\n<p>前端index优化<br>BlogService.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n    \n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;</code></pre>\n<p>BlogServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<p>IndexController.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TagService;\nimport com.cxkj.blog.service.TypeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Autowired\n    private TypeService typeService;\n\n    @Autowired\n    private TagService tagService;\n\n    @GetMapping(&quot;&#x2F;&quot;)\n    public String index(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable, Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable));\n        model.addAttribute(&quot;types&quot;,typeService.listTypeTop(6));\n        model.addAttribute(&quot;tags&quot;,tagService.listTagTop(10));\n        model.addAttribute(&quot;recommendBlogs&quot;,blogService.listRecommendBlogTop(8));\n        return &quot;index&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blog&quot;)\n    public String blog()&#123;\n            &#x2F;*String blog &#x3D; null;\n            if (blog &#x3D;&#x3D; null)&#123;\n                throw  new NotFoundException(&quot;博客不存在&quot;);\n            &#125;*&#x2F;\n        return &quot;blog&quot;;\n    &#125;\n\n&#125;</code></pre>\n<p>TypeService.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n\npublic interface TypeService &#123;\n\n    Type saveType(Type type);\n\n    Type getType(Long id);\n\n    Type getTypeByName(String name);\n\n    Page&lt;Type&gt; listType(Pageable pageable);\n\n    List&lt;Type&gt; listType();\n\n    List&lt;Type&gt; listTypeTop(Integer size);\n\n    Type updateType(Long id,Type type);\n\n    void deleteType(Long id);\n&#125;</code></pre>\n<p>TypeServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.TypeRepository;\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n@Service\npublic class TypeServiceImpl implements TypeService&#123;\n\n    @Autowired\n    private TypeRepository typeRepository;\n\n    @Transactional\n    @Override\n    public Type saveType(Type type) &#123;\n        return typeRepository.save(type);\n    &#125;\n\n    @Transactional\n    @Override\n    public Type getType(Long id) &#123;\n        return typeRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Type getTypeByName(String name) &#123;\n        return typeRepository.findByName(name);\n    &#125;\n\n    @Transactional\n    @Override\n    public Page&lt;Type&gt; listType(Pageable pageable) &#123;\n        return typeRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Type&gt; listType() &#123;\n        return typeRepository.findAll();\n    &#125;\n\n    @Override\n    public List&lt;Type&gt; listTypeTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;blogs.size&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return typeRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Type updateType(Long id, Type type) &#123;\n        Type t &#x3D; typeRepository.findById(id).get();\n        if (t &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;您查找的信息不存在(︶︹︺)&quot;);\n        &#125;\n        BeanUtils.copyProperties(type,t);\n        return typeRepository.save(t);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteType(Long id) &#123;\n        typeRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<p>TypeRepository.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Type;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;6.\n *&#x2F;\n\npublic interface TypeRepository extends JpaRepository&lt;Type,Long&gt; &#123;\n\n    Type findByName(String name);\n    \n    @Query(&quot;select t from Type t&quot;)\n    List&lt;Type&gt; findTop(Pageable pageable);\n&#125;</code></pre>\n<p>TagService.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n\npublic interface TagService &#123;\n\n    Tag saveTag(Tag tag);\n\n    Tag getTag(Long id);\n\n    Tag getTagByName(String name);\n\n    Page&lt;Tag&gt; listTag(Pageable pageable);\n\n    List&lt;Tag&gt; listTag();\n    \n    List&lt;Tag&gt; listTagTop(Integer size);\n\n    List&lt;Tag&gt; listTag(String ids);\n\n    Tag updateTag(Long id,Tag tag);\n\n    void deleteTag(Long id);\n&#125;</code></pre>\n<p>TagServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.TagRepository;\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n@Service\npublic class TagServiceImpl implements TagService&#123;\n\n    @Autowired\n    private TagRepository tagRepository;\n\n    @Transactional\n    @Override\n    public Tag saveTag(Tag tag) &#123;\n        return tagRepository.save(tag);\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTag(Long id) &#123;\n        return tagRepository.findById(id).get();\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag getTagByName(String name) &#123;\n        return tagRepository.findByName(name);\n    &#125;\n\n    @Transactional\n    @Override\n    public Page&lt;Tag&gt; listTag(Pageable pageable) &#123;\n        return tagRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Tag&gt; listTag() &#123;\n        return tagRepository.findAll();\n    &#125;\n\n    @Override\n    public List&lt;Tag&gt; listTagTop(Integer size) &#123;\n        Sort sort &#x3D;  Sort.by(Sort.Direction.DESC,&quot;blogs.size&quot;);\n        Pageable pageable &#x3D; PageRequest.of (0,size,sort);\n        return tagRepository.findTop(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Tag&gt; listTag(String ids) &#123;  &#x2F;&#x2F;1,2,3\n        return tagRepository.findAllById(convertToList(ids));\n    &#125;\n\n    private List&lt;Long&gt; convertToList(String ids)&#123;\n        List&lt;Long&gt; list &#x3D; new ArrayList&lt;&gt;();\n        if (!&quot;&quot;.equals(ids) &amp;&amp; ids !&#x3D; null)&#123;\n            String[] idarray &#x3D; ids.split(&quot;,&quot;);\n            for (int i&#x3D;0; i&lt;idarray.length; i++)&#123;\n                list.add(new Long(idarray[i]));\n            &#125;\n        &#125;\n        return list;\n    &#125;\n\n    @Transactional\n    @Override\n    public Tag updateTag(Long id, Tag tag) &#123;\n        Tag t &#x3D; tagRepository.findById(id).get();\n        if (t &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;您查找的信息不存在(︶︹︺)&quot;);\n        &#125;\n        BeanUtils.copyProperties(tag,t);\n        return tagRepository.save(t);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteTag(Long id) &#123;\n        tagRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<p>TagRepository.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Tag;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;7.\n *&#x2F;\n\npublic interface TagRepository extends JpaRepository&lt;Tag,Long&gt; &#123;\n\n    Tag findByName(String name);\n\n    @Query(&quot;select t from Tag t&quot;)\n    List&lt;Tag&gt; findTop(Pageable pageable);\n&#125;</code></pre>\n<p>BlogService.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n\n    List&lt;Blog&gt; listRecommendBlogTop(Integer size);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;</code></pre>\n<p>BlogServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<p>BlogRepository.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Blog;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogRepository extends JpaRepository&lt;Blog,Long&gt;, JpaSpecificationExecutor&lt;Blog&gt; &#123;\n\n    @Query(&quot;select b from Blog b where b.recommend &#x3D; true&quot;)\n    List&lt;Blog&gt; findTop(Pageable pageable);\n&#125;</code></pre>\n<h3 id=\"全局搜索\"><a href=\"#全局搜索\" class=\"headerlink\" title=\"全局搜索\"></a>全局搜索</h3><p>IndexController.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TagService;\nimport com.cxkj.blog.service.TypeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Autowired\n    private TypeService typeService;\n\n    @Autowired\n    private TagService tagService;\n\n    @GetMapping(&quot;&#x2F;&quot;)\n    public String index(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable, Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable));\n        model.addAttribute(&quot;types&quot;,typeService.listTypeTop(6));\n        model.addAttribute(&quot;tags&quot;,tagService.listTagTop(10));\n        model.addAttribute(&quot;recommendBlogs&quot;,blogService.listRecommendBlogTop(8));\n        return &quot;index&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;search&quot;)\n    public String search(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable, @RequestParam String query, Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(&quot;%&quot;+query+&quot;%&quot;,pageable));\n        model.addAttribute(&quot;query&quot;,query);\n        return &quot;search&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blog&#x2F;&#123;id&#125;&quot;)\n    public String blog()&#123;\n            &#x2F;*String blog &#x3D; null;\n            if (blog &#x3D;&#x3D; null)&#123;\n                throw  new NotFoundException(&quot;博客不存在&quot;);\n            &#125;*&#x2F;\n        return &quot;blog&quot;;\n    &#125;\n\n&#125;</code></pre>\n<p>BlogService.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n\n    Page&lt;Blog&gt; listBlog(String query,Pageable pageable);\n\n    List&lt;Blog&gt; listRecommendBlogTop(Integer size);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;</code></pre>\n<p>BlogServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(String query, Pageable pageable) &#123;\n        return blogRepository.findByQuery(query,pageable);\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<p>BlogRepository.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Blog;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogRepository extends JpaRepository&lt;Blog,Long&gt;, JpaSpecificationExecutor&lt;Blog&gt; &#123;\n\n    @Query(&quot;select b from Blog b where b.recommend &#x3D; true&quot;)\n    List&lt;Blog&gt; findTop(Pageable pageable);\n\n    &#x2F;&#x2F;select * from t_blog where title like &#39;%内容%&#39;\n    @Query(&quot;select b from Blog b where b.title like ?1 or b.content like ?1&quot;)\n    Page&lt;Blog&gt; findByQuery(String query,Pageable pageable);\n&#125;</code></pre>\n<h3 id=\"博客详情业务处理\"><a href=\"#博客详情业务处理\" class=\"headerlink\" title=\"博客详情业务处理\"></a>博客详情业务处理</h3><p>IndexController.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TagService;\nimport com.cxkj.blog.service.TypeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;3.\n *&#x2F;\n@Controller\npublic class IndexController &#123;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Autowired\n    private TypeService typeService;\n\n    @Autowired\n    private TagService tagService;\n\n    @GetMapping(&quot;&#x2F;&quot;)\n    public String index(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable, Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable));\n        model.addAttribute(&quot;types&quot;,typeService.listTypeTop(6));\n        model.addAttribute(&quot;tags&quot;,tagService.listTagTop(10));\n        model.addAttribute(&quot;recommendBlogs&quot;,blogService.listRecommendBlogTop(8));\n        return &quot;index&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;search&quot;)\n    public String search(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable, @RequestParam String query, Model model)&#123;\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(&quot;%&quot;+query+&quot;%&quot;,pageable));\n        model.addAttribute(&quot;query&quot;,query);\n        return &quot;search&quot;;\n    &#125;\n\n    @GetMapping(&quot;&#x2F;blog&#x2F;&#123;id&#125;&quot;)\n    public String blog(@PathVariable Long id, Model model)&#123;\n        model.addAttribute(&quot;blog&quot;,blogService.getAndConvert(id));\n        return &quot;blog&quot;;\n    &#125;\n\n&#125;</code></pre>\n<p>MarkdownUtils.java Markdown转换HTML工具类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.util;\n\nimport org.commonmark.Extension;\nimport org.commonmark.ext.gfm.tables.TableBlock;\nimport org.commonmark.ext.gfm.tables.TablesExtension;\nimport org.commonmark.ext.heading.anchor.HeadingAnchorExtension;\nimport org.commonmark.node.Link;\nimport org.commonmark.node.Node;\nimport org.commonmark.parser.Parser;\nimport org.commonmark.renderer.html.AttributeProvider;\nimport org.commonmark.renderer.html.AttributeProviderContext;\nimport org.commonmark.renderer.html.AttributeProviderFactory;\nimport org.commonmark.renderer.html.HtmlRenderer;\n\nimport java.util.*;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;12.\n *&#x2F;\n\npublic class MarkdownUtils &#123;\n\n    &#x2F;**\n     * markdown格式转换成HTML格式\n     * @param markdown\n     * @return\n     *&#x2F;\n    public static String markdownToHtml(String markdown) &#123;\n        Parser parser &#x3D; Parser.builder().build();\n        Node document &#x3D; parser.parse(markdown);\n        HtmlRenderer renderer &#x3D; HtmlRenderer.builder().build();\n        return renderer.render(document);\n    &#125;\n\n    &#x2F;**\n     * 增加扩展[标题锚点，表格生成]\n     * Markdown转换成HTML\n     * @param markdown\n     * @return\n     *&#x2F;\n    public static String markdownToHtmlExtensions(String markdown) &#123;\n        &#x2F;&#x2F;h标题生成id\n        Set&lt;Extension&gt; headingAnchorExtensions &#x3D; Collections.singleton(HeadingAnchorExtension.create());\n        &#x2F;&#x2F;转换table的HTML\n        List&lt;Extension&gt; tableExtension &#x3D; Arrays.asList(TablesExtension.create());\n        Parser parser &#x3D; Parser.builder()\n                .extensions(tableExtension)\n                .build();\n        Node document &#x3D; parser.parse(markdown);\n        HtmlRenderer renderer &#x3D; HtmlRenderer.builder()\n                .extensions(headingAnchorExtensions)\n                .extensions(tableExtension)\n                .attributeProviderFactory(new AttributeProviderFactory() &#123;\n                    public AttributeProvider create(AttributeProviderContext context) &#123;\n                        return new CustomAttributeProvider();\n                    &#125;\n                &#125;)\n                .build();\n        return renderer.render(document);\n    &#125;\n\n    &#x2F;**\n     * 处理标签的属性\n     *&#x2F;\n    static class CustomAttributeProvider implements AttributeProvider &#123;\n        @Override\n        public void setAttributes(Node node, String tagName, Map&lt;String, String&gt; attributes) &#123;\n            &#x2F;&#x2F;改变a标签的target属性为_blank\n            if (node instanceof Link) &#123;\n                attributes.put(&quot;target&quot;, &quot;_blank&quot;);\n            &#125;\n            if (node instanceof TableBlock) &#123;\n                attributes.put(&quot;class&quot;, &quot;ui celled table&quot;);\n            &#125;\n        &#125;\n    &#125;\n\n\n    public static void main(String[] args) &#123;\n        String table &#x3D; &quot;| hello | hi   | 哈哈哈   |\\n&quot; +\n                &quot;| ----- | ---- | ----- |\\n&quot; +\n                &quot;| 斯维尔多  | 士大夫  | f啊    |\\n&quot; +\n                &quot;| 阿什顿发  | 非固定杆 | 撒阿什顿发 |\\n&quot; +\n                &quot;\\n&quot;;\n        String a &#x3D; &quot;[imCoding 爱编程](http:&#x2F;&#x2F;www.lirenmi.cn)&quot;;\n        System.out.println(markdownToHtmlExtensions(a));\n    &#125;\n&#125;</code></pre>\n<p>BlogService.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n\n    Page&lt;Blog&gt; listBlog(String query,Pageable pageable);\n    \n    Blog getAndConvert(Long id);\n\n    List&lt;Blog&gt; listRecommendBlogTop(Integer size);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;</code></pre>\n<p>BlogServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MarkdownUtils;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(String query, Pageable pageable) &#123;\n        return blogRepository.findByQuery(query,pageable);\n    &#125;\n\n    @Override\n    public Blog getAndConvert(Long id) &#123;\n        Blog blog &#x3D; blogRepository.findById(id).get();\n        if (blog &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;博客不存在哦&quot;);\n        &#125;\n        Blog b &#x3D; new Blog();\n        BeanUtils.copyProperties(blog,b);\n        String content &#x3D; b.getContent();\n        b.setContent(MarkdownUtils.markdownToHtmlExtensions(content));\n        return b;\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<h3 id=\"评论模块实现\"><a href=\"#评论模块实现\" class=\"headerlink\" title=\"评论模块实现\"></a>评论模块实现</h3><p>CommentController.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.pojo.Comment;\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.CommentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\n\nimport javax.validation.Valid;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n@Controller\npublic class CommentController &#123;\n\n    @Autowired\n    private CommentService commentService;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Value(&quot;$&#123;comment.avatar&#125;&quot;)\n    private String avatar;\n\n    @GetMapping(&quot;&#x2F;comments&#x2F;&#123;blogId&#125;&quot;)\n    public String comments(@PathVariable Long blogId, Model model)&#123;\n        model.addAttribute(&quot;comments&quot;,commentService.listCommentByBlogId(blogId));\n        return &quot;blog :: commentList&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;comments&quot;)\n    public String post(Comment comment) &#123;\n        Long blogId &#x3D; comment.getBlog().getId();\n        comment.setBlog(blogService.getBlog(blogId));\n        comment.setAvatar(avatar);\n        commentService.saveComment(comment);\n        return &quot;redirect:&#x2F;comments&#x2F;&quot; + blogId;\n    &#125;\n&#125;</code></pre>\n<p>CommentService.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Comment;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n\npublic interface CommentService &#123;\n\n    List&lt;Comment&gt; listCommentByBlogId(Long blogId);\n\n    Comment saveComment(Comment comment);\n&#125;</code></pre>\n<p>CommentServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.dao.CommentRepository;\nimport com.cxkj.blog.pojo.Comment;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n@Service\npublic class CommentServiceImpl implements CommentService&#123;\n\n    @Autowired\n    private CommentRepository commentRepository;\n\n    @Override\n    public List&lt;Comment&gt; listCommentByBlogId(Long blogId) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;createTime&quot;);\n        return commentRepository.findByBlogId(blogId,sort);\n    &#125;\n\n    @Transactional\n    @Override\n    public Comment saveComment(Comment comment) &#123;\n        Long parentCommentId &#x3D; comment.getParentComment().getId();\n        if (parentCommentId !&#x3D; -1)&#123;\n            comment.setParentComment(commentRepository.findById(parentCommentId).get());\n        &#125;else &#123;\n            comment.setParentComment(null);\n        &#125;\n        comment.setCreateTime(new Date());\n        return commentRepository.save(comment);\n    &#125;\n&#125;</code></pre>\n<p>CommentRepository.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Comment;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n\npublic interface CommentRepository extends JpaRepository&lt;Comment,Long&gt; &#123;\n\n    List&lt;Comment&gt; findByBlogId(Long blogId, Sort sort);\n&#125;</code></pre>\n<h3 id=\"评论模块细节优化\"><a href=\"#评论模块细节优化\" class=\"headerlink\" title=\"评论模块细节优化\"></a>评论模块细节优化</h3><p>CommentRepository.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Comment;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n\npublic interface CommentRepository extends JpaRepository&lt;Comment,Long&gt; &#123;\n\n    List&lt;Comment&gt; findByBlogIdAndParentCommentNull(Long blogId, Sort sort);\n&#125;</code></pre>\n<p>CommentServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.dao.CommentRepository;\nimport com.cxkj.blog.pojo.Comment;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n@Service\npublic class CommentServiceImpl implements CommentService&#123;\n\n    @Autowired\n    private CommentRepository commentRepository;\n\n    @Override\n    public List&lt;Comment&gt; listCommentByBlogId(Long blogId) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;createTime&quot;);\n        List&lt;Comment&gt; comments &#x3D; commentRepository.findByBlogIdAndParentCommentNull(blogId,sort);\n        return eachComment(comments);\n    &#125;\n\n    @Transactional\n    @Override\n    public Comment saveComment(Comment comment) &#123;\n        Long parentCommentId &#x3D; comment.getParentComment().getId();\n        if (parentCommentId !&#x3D; -1)&#123;\n            comment.setParentComment(commentRepository.findById(parentCommentId).get());\n        &#125;else &#123;\n            comment.setParentComment(null);\n        &#125;\n        comment.setCreateTime(new Date());\n        return commentRepository.save(comment);\n    &#125;\n\n    &#x2F;**\n     * 循环每个顶级的评论节点\n     * @param comments\n     * @return\n     *&#x2F;\n    private List&lt;Comment&gt; eachComment(List&lt;Comment&gt; comments)&#123;\n        List&lt;Comment&gt; commentsView &#x3D; new ArrayList&lt;&gt;();\n        for (Comment comment : comments)&#123;\n            Comment c &#x3D; new Comment();\n            BeanUtils.copyProperties(comment,c);\n            commentsView.add(c);\n        &#125;\n        &#x2F;&#x2F;合并评论的各层子代到第一级子代集合中\n        combineChildren(commentsView);\n        return commentsView;\n    &#125;\n\n    &#x2F;**\n     * @param comments root根节点，blog不为null的对象集合\n     * @return\n     *&#x2F;\n    private void combineChildren(List&lt;Comment&gt; comments)&#123;\n        for (Comment comment : comments)&#123;\n            List&lt;Comment&gt; replys &#x3D; comment.getReplyComments();\n            for (Comment reply : replys)&#123;\n                &#x2F;&#x2F;循环迭代,找出子代,存放在tempReplys中\n                recursively(reply);\n            &#125;\n            &#x2F;&#x2F;修改顶级节点的reply集合为迭代处理后的集合\n            comment.setReplyComments(tempReplys);\n            &#x2F;&#x2F;清除临时存放区\n            tempReplys &#x3D; new ArrayList&lt;&gt;();\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F;存放迭代找出的所有子代的集合\n    private List&lt;Comment&gt; tempReplys &#x3D; new ArrayList&lt;&gt;();\n    &#x2F;**\n     * 递归迭代，剥洋葱\n     * @param comment 被迭代的对象\n     * @return\n     *&#x2F;\n    private void recursively(Comment comment) &#123;\n        tempReplys.add(comment);&#x2F;&#x2F;顶节点添加到临时存放集合\n        if (comment.getReplyComments().size()&gt;0) &#123;\n            List&lt;Comment&gt; replays &#x3D; comment.getReplyComments();\n            for (Comment reply : replays) &#123;\n                tempReplys.add(reply);\n                if (reply.getReplyComments().size()&gt;0) &#123;\n                    recursively(reply);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n<p>CommentController.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.pojo.Comment;\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.CommentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\n\nimport javax.validation.Valid;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n@Controller\npublic class CommentController &#123;\n\n    @Autowired\n    private CommentService commentService;\n\n    @Autowired\n    private BlogService blogService;\n\n    @Value(&quot;$&#123;comment.avatar&#125;&quot;)\n    private String avatar;\n\n    @GetMapping(&quot;&#x2F;comments&#x2F;&#123;blogId&#125;&quot;)\n    public String comments(@PathVariable Long blogId, Model model)&#123;\n        model.addAttribute(&quot;comments&quot;,commentService.listCommentByBlogId(blogId));\n        return &quot;blog :: commentList&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;comments&quot;)\n    public String post(Comment comment) &#123;\n        Long blogId &#x3D; comment.getBlog().getId();\n        comment.setBlog(blogService.getBlog(blogId));\n        comment.setAvatar(avatar);\n        commentService.saveComment(comment);\n        return &quot;redirect:&#x2F;comments&#x2F;&quot; + blogId;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"特殊用户评论模块\"><a href=\"#特殊用户评论模块\" class=\"headerlink\" title=\"特殊用户评论模块\"></a>特殊用户评论模块</h3><p>CommentServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.dao.CommentRepository;\nimport com.cxkj.blog.pojo.Comment;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;13.\n *&#x2F;\n@Service\npublic class CommentServiceImpl implements CommentService&#123;\n\n    @Autowired\n    private CommentRepository commentRepository;\n\n    @Override\n    public List&lt;Comment&gt; listCommentByBlogId(Long blogId) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.ASC,&quot;createTime&quot;);\n        List&lt;Comment&gt; comments &#x3D; commentRepository.findByBlogIdAndParentCommentNull(blogId,sort);\n        return eachComment(comments);\n    &#125;\n\n    @Transactional\n    @Override\n    public Comment saveComment(Comment comment) &#123;\n        Long parentCommentId &#x3D; comment.getParentComment().getId();\n        if (parentCommentId !&#x3D; -1)&#123;\n            comment.setParentComment(commentRepository.findById(parentCommentId).get());\n        &#125;else &#123;\n            comment.setParentComment(null);\n        &#125;\n        comment.setCreateTime(new Date());\n        return commentRepository.save(comment);\n    &#125;\n\n    &#x2F;**\n     * 循环每个顶级的评论节点\n     * @param comments\n     * @return\n     *&#x2F;\n    private List&lt;Comment&gt; eachComment(List&lt;Comment&gt; comments)&#123;\n        List&lt;Comment&gt; commentsView &#x3D; new ArrayList&lt;&gt;();\n        for (Comment comment : comments)&#123;\n            Comment c &#x3D; new Comment();\n            BeanUtils.copyProperties(comment,c);\n            commentsView.add(c);\n        &#125;\n        &#x2F;&#x2F;合并评论的各层子代到第一级子代集合中\n        combineChildren(commentsView);\n        return commentsView;\n    &#125;\n\n    &#x2F;**\n     * @param comments root根节点，blog不为null的对象集合\n     * @return\n     *&#x2F;\n    private void combineChildren(List&lt;Comment&gt; comments)&#123;\n        for (Comment comment : comments)&#123;\n            List&lt;Comment&gt; replys &#x3D; comment.getReplyComments();\n            for (Comment reply : replys)&#123;\n                &#x2F;&#x2F;循环迭代,找出子代,存放在tempReplys中\n                recursively(reply);\n            &#125;\n            &#x2F;&#x2F;修改顶级节点的reply集合为迭代处理后的集合\n            comment.setReplyComments(tempReplys);\n            &#x2F;&#x2F;清除临时存放区\n            tempReplys &#x3D; new ArrayList&lt;&gt;();\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F;存放迭代找出的所有子代的集合\n    private List&lt;Comment&gt; tempReplys &#x3D; new ArrayList&lt;&gt;();\n    &#x2F;**\n     * 递归迭代，剥洋葱\n     * @param comment 被迭代的对象\n     * @return\n     *&#x2F;\n    private void recursively(Comment comment) &#123;\n        tempReplys.add(comment);&#x2F;&#x2F;顶节点添加到临时存放集合\n        if (comment.getReplyComments().size()&gt;0) &#123;\n            List&lt;Comment&gt; replays &#x3D; comment.getReplyComments();\n            for (Comment reply : replays) &#123;\n                tempReplys.add(reply);\n                if (reply.getReplyComments().size()&gt;0) &#123;\n                    recursively(reply);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n<p>Comment.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.pojo;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;4.\n *&#x2F;\n@Entity\n@Table(name &#x3D; &quot;t_comment&quot;)\npublic class Comment &#123;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    private String nickname;\n    private String email;\n    private String content;\n    private String avatar;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createTime;\n\n    @ManyToOne\n    private Blog blog;\n\n    @OneToMany(mappedBy &#x3D; &quot;parentComment&quot;)\n    private List&lt;Comment&gt; replyComments &#x3D; new ArrayList&lt;&gt;();\n    @ManyToOne\n    private Comment parentComment;\n    \n    private boolean adminComment;\n\n    public Comment() &#123;\n    &#125;\n\n    public Long getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(Long id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getNickname() &#123;\n        return nickname;\n    &#125;\n\n    public void setNickname(String nickname) &#123;\n        this.nickname &#x3D; nickname;\n    &#125;\n\n    public String getEmail() &#123;\n        return email;\n    &#125;\n\n    public void setEmail(String email) &#123;\n        this.email &#x3D; email;\n    &#125;\n\n    public String getContent() &#123;\n        return content;\n    &#125;\n\n    public void setContent(String content) &#123;\n        this.content &#x3D; content;\n    &#125;\n\n    public String getAvatar() &#123;\n        return avatar;\n    &#125;\n\n    public void setAvatar(String avatar) &#123;\n        this.avatar &#x3D; avatar;\n    &#125;\n\n    public Date getCreateTime() &#123;\n        return createTime;\n    &#125;\n\n    public void setCreateTime(Date createTime) &#123;\n        this.createTime &#x3D; createTime;\n    &#125;\n\n    public Blog getBlog() &#123;\n        return blog;\n    &#125;\n\n    public void setBlog(Blog blog) &#123;\n        this.blog &#x3D; blog;\n    &#125;\n\n    public List&lt;Comment&gt; getReplyComments() &#123;\n        return replyComments;\n    &#125;\n\n    public void setReplyComments(List&lt;Comment&gt; replyComments) &#123;\n        this.replyComments &#x3D; replyComments;\n    &#125;\n\n    public Comment getParentComment() &#123;\n        return parentComment;\n    &#125;\n\n    public void setParentComment(Comment parentComment) &#123;\n        this.parentComment &#x3D; parentComment;\n    &#125;\n\n    public boolean isAdminComment() &#123;\n        return adminComment;\n    &#125;\n\n    public void setAdminComment(boolean adminComment) &#123;\n        this.adminComment &#x3D; adminComment;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Comment&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, nickname&#x3D;&#39;&quot; + nickname + &#39;\\&#39;&#39; +\n                &quot;, email&#x3D;&#39;&quot; + email + &#39;\\&#39;&#39; +\n                &quot;, content&#x3D;&#39;&quot; + content + &#39;\\&#39;&#39; +\n                &quot;, avatar&#x3D;&#39;&quot; + avatar + &#39;\\&#39;&#39; +\n                &quot;, createTime&#x3D;&quot; + createTime +\n                &quot;, blog&#x3D;&quot; + blog +\n                &quot;, replyComments&#x3D;&quot; + replyComments +\n                &quot;, parentComment&#x3D;&quot; + parentComment +\n                &quot;, adminComment&#x3D;&quot; + adminComment +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"浏览次数模块\"><a href=\"#浏览次数模块\" class=\"headerlink\" title=\"浏览次数模块\"></a>浏览次数模块</h3><p>BlogRepository.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Blog;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogRepository extends JpaRepository&lt;Blog,Long&gt;, JpaSpecificationExecutor&lt;Blog&gt; &#123;\n\n    @Query(&quot;select b from Blog b where b.recommend &#x3D; true&quot;)\n    List&lt;Blog&gt; findTop(Pageable pageable);\n\n    &#x2F;&#x2F;select * from t_blog where title like &#39;%内容%&#39;\n    @Query(&quot;select b from Blog b where b.title like ?1 or b.content like ?1&quot;)\n    Page&lt;Blog&gt; findByQuery(String query,Pageable pageable);\n    \n    @Transactional\n    @Modifying\n    @Query(&quot;update Blog b set b.views &#x3D; b.views+1 where b.id &#x3D; ?1&quot;)\n    int updateViews(Long id);\n&#125;</code></pre>\n<p>BlogServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MarkdownUtils;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(String query, Pageable pageable) &#123;\n        return blogRepository.findByQuery(query,pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog getAndConvert(Long id) &#123;\n        Blog blog &#x3D; blogRepository.findById(id).get();\n        if (blog &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;博客不存在哦&quot;);\n        &#125;\n        Blog b &#x3D; new Blog();\n        BeanUtils.copyProperties(blog,b);\n        String content &#x3D; b.getContent();\n        b.setContent(MarkdownUtils.markdownToHtmlExtensions(content));\n        blogRepository.updateViews(id);\n        return b;\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<h3 id=\"分类Web模块\"><a href=\"#分类Web模块\" class=\"headerlink\" title=\"分类Web模块\"></a>分类Web模块</h3><p>TypeShowController.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TypeService;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;12&#x2F;16\n *&#x2F;\n@Controller\npublic class TypeShowController &#123;\n\n    @Autowired\n    private TypeService typeService;\n\n    @Autowired\n    private BlogService blogService;\n\n    @GetMapping(&quot;&#x2F;types&#x2F;&#123;id&#125;&quot;)\n    public String types(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable,@PathVariable Long id, Model model)&#123;\n        List&lt;Type&gt; types &#x3D; typeService.listTypeTop(10000);\n        if (id &#x3D;&#x3D; -1)&#123;\n            id &#x3D; types.get(0).getId();\n        &#125;\n        BlogQuery blogQuery &#x3D; new BlogQuery();\n        blogQuery.setTypeID(id);\n        model.addAttribute(&quot;types&quot;,types);\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(pageable,blogQuery));\n        model.addAttribute(&quot;activeTypeId&quot;,id);\n        return &quot;types&quot;;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"标签Web模块\"><a href=\"#标签Web模块\" class=\"headerlink\" title=\"标签Web模块\"></a>标签Web模块</h3><p>TagShowController.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.pojo.Tag;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.service.BlogService;\nimport com.cxkj.blog.service.TagService;\nimport com.cxkj.blog.service.TypeService;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;12&#x2F;16\n *&#x2F;\n@Controller\npublic class TagShowController &#123;\n\n    @Autowired\n    private TagService tagService;\n\n    @Autowired\n    private BlogService blogService;\n\n    @GetMapping(&quot;&#x2F;tags&#x2F;&#123;id&#125;&quot;)\n    public String tags(@PageableDefault(size &#x3D; 10,sort &#x3D; &#123;&quot;updateTime&quot;&#125;,direction &#x3D; Sort.Direction.DESC)Pageable pageable,@PathVariable Long id, Model model)&#123;\n        List&lt;Tag&gt; tags &#x3D; tagService.listTagTop(10000);\n        if (id &#x3D;&#x3D; -1)&#123;\n            id &#x3D; tags.get(0).getId();\n        &#125;\n        model.addAttribute(&quot;tags&quot;,tags);\n        model.addAttribute(&quot;page&quot;,blogService.listBlog(id,pageable));\n        model.addAttribute(&quot;activeTagId&quot;,id);\n        return &quot;tags&quot;;\n    &#125;\n&#125;</code></pre>\n<p>BlogService.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n    \n    Page&lt;Blog&gt; listBlog(Long tagId,Pageable pageable);\n\n    Page&lt;Blog&gt; listBlog(String query,Pageable pageable);\n\n    Blog getAndConvert(Long id);\n\n    List&lt;Blog&gt; listRecommendBlogTop(Integer size);\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;</code></pre>\n<p>BlogServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MarkdownUtils;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Long tagId, Pageable pageable) &#123;\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                Join join &#x3D; root.join(&quot;tags&quot;);\n                return criteriaBuilder.equal(join.get(&quot;id&quot;),tagId);\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(String query, Pageable pageable) &#123;\n        return blogRepository.findByQuery(query,pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog getAndConvert(Long id) &#123;\n        Blog blog &#x3D; blogRepository.findById(id).get();\n        if (blog &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;博客不存在哦&quot;);\n        &#125;\n        Blog b &#x3D; new Blog();\n        BeanUtils.copyProperties(blog,b);\n        String content &#x3D; b.getContent();\n        b.setContent(MarkdownUtils.markdownToHtmlExtensions(content));\n        blogRepository.updateViews(id);\n        return b;\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<h3 id=\"归档模块处理\"><a href=\"#归档模块处理\" class=\"headerlink\" title=\"归档模块处理\"></a>归档模块处理</h3><p>ArchiveShowController.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport com.cxkj.blog.service.BlogService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;16.\n *&#x2F;\n@Controller\npublic class ArchiveShowController &#123;\n\n    @Autowired\n    private BlogService blogService;\n\n    @GetMapping(&quot;&#x2F;archives&quot;)\n    public String archives(Model model)&#123;\n        model.addAttribute(&quot;archiveMap&quot;,blogService.archiveBlog());\n        model.addAttribute(&quot;blogCouot&quot;,blogService.countBlog());\n        return &quot;archives&quot;;\n    &#125;\n&#125;</code></pre>\n<p>BlogService.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\nimport java.util.Map;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogService &#123;\n\n    Blog getBlog(Long id);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery);\n\n    Page&lt;Blog&gt; listBlog(Pageable pageable);\n\n    Page&lt;Blog&gt; listBlog(Long tagId,Pageable pageable);\n\n    Page&lt;Blog&gt; listBlog(String query,Pageable pageable);\n\n    Blog getAndConvert(Long id);\n\n    List&lt;Blog&gt; listRecommendBlogTop(Integer size);\n    \n    Map&lt;String,List&lt;Blog&gt;&gt; archiveBlog();\n    \n    Long countBlog();\n\n    Blog saveBlog(Blog blog);\n\n    Blog updateBlog(Long id,Blog blog);\n\n    void deleteBlog(Long id);\n&#125;</code></pre>\n<p>BlogServiceImpl.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.service;\n\nimport com.cxkj.blog.NotFoundException;\nimport com.cxkj.blog.dao.BlogRepository;\nimport com.cxkj.blog.pojo.Blog;\nimport com.cxkj.blog.pojo.Type;\nimport com.cxkj.blog.util.MarkdownUtils;\nimport com.cxkj.blog.util.MyBeanUtils;\nimport com.cxkj.blog.vo.BlogQuery;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.criteria.*;\nimport java.util.*;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n@Service\npublic class BlogServiceImpl implements BlogService&#123;\n\n    @Autowired\n    private BlogRepository blogRepository;\n\n    @Override\n    public Blog getBlog(Long id) &#123;\n        return blogRepository.findById(id).get();\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable, BlogQuery blogQuery) &#123;\n\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                List&lt;Predicate&gt; predicateList &#x3D; new ArrayList&lt;&gt;();\n                if (!&quot;&quot;.equals(blogQuery.getTitle()) &amp;&amp; blogQuery.getTitle() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.like(root.&lt;String&gt;get(&quot;title&quot;),&quot;%&quot;+blogQuery.getTitle()+&quot;%&quot;));\n                &#125;\n                if (blogQuery.getTypeID() !&#x3D; null)&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Type&gt;get(&quot;type&quot;).get(&quot;id&quot;),blogQuery.getTypeID()));\n                &#125;\n                if (blogQuery.isRecommend())&#123;\n                    predicateList.add(criteriaBuilder.equal(root.&lt;Boolean&gt;get(&quot;recommend&quot;),blogQuery.isRecommend()));\n                &#125;\n                criteriaQuery.where(predicateList.toArray(new Predicate[predicateList.size()]));\n                return null;\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Pageable pageable) &#123;\n        return blogRepository.findAll(pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(Long tagId, Pageable pageable) &#123;\n        return blogRepository.findAll(new Specification&lt;Blog&gt;() &#123;\n            @Override\n            public Predicate toPredicate(Root&lt;Blog&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) &#123;\n                Join join &#x3D; root.join(&quot;tags&quot;);\n                return criteriaBuilder.equal(join.get(&quot;id&quot;),tagId);\n            &#125;\n        &#125;,pageable);\n    &#125;\n\n    @Override\n    public Page&lt;Blog&gt; listBlog(String query, Pageable pageable) &#123;\n        return blogRepository.findByQuery(query,pageable);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog getAndConvert(Long id) &#123;\n        Blog blog &#x3D; blogRepository.findById(id).get();\n        if (blog &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;博客不存在哦&quot;);\n        &#125;\n        Blog b &#x3D; new Blog();\n        BeanUtils.copyProperties(blog,b);\n        String content &#x3D; b.getContent();\n        b.setContent(MarkdownUtils.markdownToHtmlExtensions(content));\n        blogRepository.updateViews(id);\n        return b;\n    &#125;\n\n    @Override\n    public List&lt;Blog&gt; listRecommendBlogTop(Integer size) &#123;\n        Sort sort &#x3D; Sort.by(Sort.Direction.DESC,&quot;updateTime&quot;);\n        Pageable pageable &#x3D; PageRequest.of(0,size,sort);\n        return blogRepository.findTop(pageable);\n    &#125;\n\n    @Override\n    public Map&lt;String, List&lt;Blog&gt;&gt; archiveBlog() &#123;\n        \n        List&lt;String&gt; years &#x3D; blogRepository.findGroupYear();\n        Map&lt;String,List&lt;Blog&gt;&gt; map &#x3D; new HashMap&lt;&gt;();\n        for (String year : years)&#123;\n            map.put(year,blogRepository.findByYear(year));\n        &#125;\n        return map;\n    &#125;\n\n    @Override\n    public Long countBlog() &#123;\n        return blogRepository.count();\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog saveBlog(Blog blog) &#123;\n        if (blog.getId() &#x3D;&#x3D; null)&#123;\n            blog.setCreateTime(new Date());\n            blog.setUpdateTime(new Date());\n            blog.setViews(0);\n        &#125;else &#123;\n            blog.setUpdateTime(new Date());\n        &#125;\n        return blogRepository.save(blog);\n    &#125;\n\n    @Transactional\n    @Override\n    public Blog updateBlog(Long id, Blog blog) &#123;\n        Blog b &#x3D; blogRepository.findById(id).get();\n        if (b &#x3D;&#x3D; null)&#123;\n            throw new NotFoundException(&quot;管理员大大,这个博客不存在哦！～(　TロT)σ&quot;);\n        &#125;\n        BeanUtils.copyProperties(blog,b, MyBeanUtils.getNullPropertyNames(blog));\n        b.setUpdateTime(new Date());\n        return blogRepository.save(b);\n    &#125;\n\n    @Transactional\n    @Override\n    public void deleteBlog(Long id) &#123;\n        blogRepository.deleteById(id);\n    &#125;\n&#125;</code></pre>\n<p>BlogRepository.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.dao;\n\nimport com.cxkj.blog.pojo.Blog;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;2&#x2F;8.\n *&#x2F;\n\npublic interface BlogRepository extends JpaRepository&lt;Blog,Long&gt;, JpaSpecificationExecutor&lt;Blog&gt; &#123;\n\n    @Query(&quot;select b from Blog b where b.recommend &#x3D; true&quot;)\n    List&lt;Blog&gt; findTop(Pageable pageable);\n\n    &#x2F;&#x2F;select * from t_blog where title like &#39;%内容%&#39;\n    @Query(&quot;select b from Blog b where b.title like ?1 or b.content like ?1&quot;)\n    Page&lt;Blog&gt; findByQuery(String query,Pageable pageable);\n\n    @Transactional\n    @Modifying\n    @Query(&quot;update Blog b set b.views &#x3D; b.views+1 where b.id &#x3D; ?1&quot;)\n    int updateViews(Long id);\n    \n    @Query(&quot;select function(&#39;date_format&#39;,b.updateTime,&#39;%Y&#39;) as year from Blog b group by function(&#39;date_format&#39;,b.updateTime,&#39;%Y&#39;) order by function(&#39;date_format&#39;,b.updateTime,&#39;%Y&#39;) desc &quot;)\n    List&lt;String&gt; findGroupYear();\n    @Query(&quot;select b from Blog b where function(&#39;date_format&#39;,b.updateTime,&#39;%Y&#39;) &#x3D; ?1&quot;)\n    List&lt;Blog&gt; findByYear(String year);\n&#125;</code></pre>\n<h3 id=\"个人模块处理\"><a href=\"#个人模块处理\" class=\"headerlink\" title=\"个人模块处理\"></a>个人模块处理</h3><p>AboutShowController.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.cxkj.blog.web;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n&#x2F;**\n *  Created by Arvin on 2021&#x2F;12&#x2F;16\n *&#x2F;\n@Controller\npublic class AboutShowController &#123;\n\n    @GetMapping(&quot;&#x2F;about&quot;)\n    public String about()&#123;\n\n        return &quot;about&quot;;\n    &#125;\n\n&#125;</code></pre>\n<p>messages.properties</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">index.email&#x3D;Email: 2644266656@qq.com\nindex.qq&#x3D;QQ: 2644266656\nindex.tagcontext&#x3D;南有孤岛北有亡梦，南柯一梦终是虚无。\nindex.titlename&#x3D;Guest Island\nindex.kor&#x3D;Copyright &amp;copy; 2020-2021 Guest Island Personal blog\nblog.serurl&#x3D;127.0.0.1:8080</code></pre>","text":"基于Spring Boot网站架构参考文件说明： 文件名称 文件说明 pom.xml 项目配置文件 in.md 开发参考说明文档 application.yml...","link":"","photos":[],"count_time":{"symbolsCount":"158k","symbolsTime":"2:23"},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"程序开发","slug":"程序开发","count":3,"path":"api/tags/程序开发.json"},{"name":"博客网站","slug":"博客网站","count":6,"path":"api/tags/博客网站.json"},{"name":"Spring","slug":"Spring","count":1,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8ESpring-Boot%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E5%8F%82%E8%80%83\"><span class=\"toc-text\">基于Spring Boot网站架构参考</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Application-yml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">Application.yml配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">异常处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86\"><span class=\"toc-text\">日志处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E9%9D%A2%E5%A4%84%E7%90%86\"><span class=\"toc-text\">页面处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BD%93%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">实体设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8E%E5%8F%B0%E7%99%BB%E5%BD%95%E4%B8%9A%E5%8A%A1\"><span class=\"toc-text\">后台登录业务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MD5%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">MD5加密</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%BC%83%E7%94%A8%E7%B1%BB%E6%95%B4%E6%94%B9\"><span class=\"toc-text\">关于弃用类整改</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BB%E4%B8%9A%E5%8A%A1%E5%A4%84%E7%90%86\"><span class=\"toc-text\">分类业务处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE%E4%B8%9A%E5%8A%A1%E5%A4%84%E7%90%86\"><span class=\"toc-text\">标签业务处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%9A%E5%AE%A2%E4%B8%9A%E5%8A%A1%E5%A4%84%E7%90%86\"><span class=\"toc-text\">博客业务处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8E%E7%AB%AF%E7%BB%86%E8%8A%82%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">后端细节优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">全局搜索</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%9A%E5%AE%A2%E8%AF%A6%E6%83%85%E4%B8%9A%E5%8A%A1%E5%A4%84%E7%90%86\"><span class=\"toc-text\">博客详情业务处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">评论模块实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97%E7%BB%86%E8%8A%82%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">评论模块细节优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E7%94%A8%E6%88%B7%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">特殊用户评论模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E6%AC%A1%E6%95%B0%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">浏览次数模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BBWeb%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">分类Web模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BEWeb%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">标签Web模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BD%92%E6%A1%A3%E6%A8%A1%E5%9D%97%E5%A4%84%E7%90%86\"><span class=\"toc-text\">归档模块处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AA%E4%BA%BA%E6%A8%A1%E5%9D%97%E5%A4%84%E7%90%86\"><span class=\"toc-text\">个人模块处理</span></a></li></ol></li></ol></li></ol>","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【無憂樹洞】晚安","uid":"e282a6887ea4ee7f400b573a3573e955","slug":"epistle.2021.8.31.01","date":"2021-08-30T16:19:38.000Z","updated":"2023-11-26T10:38:32.673Z","comments":true,"path":"api/articles/epistle.2021.8.31.01.json","keywords":null,"cover":"https://tse4-mm.cn.bing.net/th/id/OIP-C.JeDFDxnHYhXeq0m_6R74ogHaE8?w=294&h=196&c=7&r=0&o=5&pid=1.7","text":"听课有点累了。 我准备睡觉了。 希望你今天过得好。 还是要跟你说晚安。祝你今夜无梦。 这是我第27天跟你道晚安。 我只是在呢喃自语， 如果你看了，就已经是一种见...","link":"","photos":[],"count_time":{"symbolsCount":206,"symbolsTime":"1 mins."},"categories":[{"name":"书信","slug":"书信","count":9,"path":"api/categories/书信.json"}],"tags":[{"name":"小柔书信","slug":"小柔书信","count":8,"path":"api/tags/小柔书信.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Git指令讲解","uid":"bfcb3fbcb26721e95b0baa036371e1cb","slug":"Git","date":"2021-08-29T09:23:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/Git.json","keywords":null,"cover":"https://tse2-mm.cn.bing.net/th/id/OIP-C.yB2JuF2uOWan-VGTHCE0yQHaEK?w=277&h=180&c=7&r=0&o=5&pid=1.7","text":" 查看、添加、提交、删除、找回，重置修改文件 git help &lt;command&gt; # 显示command的help git show # 显示某次...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"},{"name":"程序开发","slug":"程序开发","count":3,"path":"api/tags/程序开发.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}