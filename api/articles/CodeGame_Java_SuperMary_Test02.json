{"title":"Java 超级玛丽常量类","uid":"6374967d93b8cc5abec98fcd5a48952a","slug":"CodeGame_Java_SuperMary_Test02","date":"2021-11-06T11:44:52.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/CodeGame_Java_SuperMary_Test02.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.561cca1ae61021b1003bcd9bfc912a54?rik=Ma3%2f0x90xOBW9A&riu=http%3a%2f%2fpic109.nipic.com%2ffile%2f20160912%2f11443495_131824907000_2.jpg&ehk=Gjmj3gOeXe1F6b%2bKGcs9g7CJRaZOO7NcU0i0l3%2bVSNQ%3d&risl=&pid=ImgRaw&r=0","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.arvin;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n&#x2F;**\n *  常量类 (初始化图片)\n *&#x2F;\n\npublic class StaticValue &#123;\n\n    &#x2F;**\n     *  定义所需的所有变量\n     *&#x2F;\n\n    public static BufferedImage BackgroundImage_Noe &#x3D; null; &#x2F;&#x2F; 背景 1\n    public static BufferedImage BackgroundImage_Two &#x3D; null; &#x2F;&#x2F; 背景 2\n    public static BufferedImage Jump_Left &#x3D; null;   &#x2F;&#x2F; 马里奥向左跳\n    public static BufferedImage Jump_Right &#x3D; null; &#x2F;&#x2F; 马里奥向右跳\n    public static BufferedImage Stand_Left &#x3D; null;  &#x2F;&#x2F; 马里奥向左站立\n    public static BufferedImage Stand_Right &#x3D; null; &#x2F;&#x2F; 马里奥向右站立\n    public static BufferedImage Tower &#x3D; null;   &#x2F;&#x2F; 城堡\n    public static BufferedImage Gan &#x3D; null; &#x2F;&#x2F; 旗杆\n\n    &#x2F;* 障碍物 因为障碍物很多 所以我们要创建一个列表 *&#x2F;\n    public static List&lt;BufferedImage&gt; Obstacle &#x3D; new ArrayList&lt;&gt;();\n\n    &#x2F;* 马里奥向左跑 是两张图片所以也要创建一个列表 *&#x2F;\n    public static List&lt;BufferedImage&gt; Run_Left &#x3D; new ArrayList&lt;&gt;();\n    public static List&lt;BufferedImage&gt; Run_Right &#x3D; new ArrayList&lt;&gt;(); &#x2F;&#x2F; 马里奥向右边跑\n\n    &#x2F;* 蘑菇敌人 两张行动图像一张死亡图像所以也要创建一个列表 *&#x2F;\n    public static List&lt;BufferedImage&gt; Mogu &#x3D; new ArrayList&lt;&gt;();\n\n    &#x2F;* 食人花敌人 两种图片一个张嘴图一个闭嘴图所以也要创建一个列表 *&#x2F;\n    public static List&lt;BufferedImage&gt; Flower &#x3D; new ArrayList&lt;&gt;();\n\n    &#x2F;* 路径的前缀 方便后续调用 定义一个Path 我们通过绝对路径来获取图片的路径我们除了名称外前缀都是一样的所以我们把它定义成一个变量 *&#x2F;\n    public static String Path &#x3D; System.getProperty(&quot;user.dir&quot;) + &quot;&#x2F;src&#x2F;images&#x2F;&quot;;\n\n    &#x2F;* 初始化方法 *&#x2F;\n    public static void Init()&#123;\n\n        &#x2F;&#x2F; 加载背景图片 try捕获 read 异常\n        try &#123;\n            BackgroundImage_Noe &#x3D; ImageIO.read(new File(Path + &quot;bg.png&quot;));      &#x2F;&#x2F;  背景 1\n            BackgroundImage_Two &#x3D; ImageIO.read(new File(Path + &quot;bg2.png&quot;));     &#x2F;&#x2F;  背景 2、\n            Jump_Left &#x3D; ImageIO.read(new File(Path + &quot;s_mario_jump1_L.png&quot;));   &#x2F;&#x2F;  马里奥向左跳跃\n            Jump_Right &#x3D; ImageIO.read(new File(Path + &quot;s_mario_jump1_R.png&quot;));  &#x2F;&#x2F;  马里奥向右跳跃\n            Stand_Left &#x3D; ImageIO.read(new File(Path + &quot;s_mario_stand_L.png&quot;));  &#x2F;&#x2F;  马里奥向左站立\n            Stand_Right &#x3D; ImageIO.read(new File(Path + &quot;s_mario_stand_R.png&quot;)); &#x2F;&#x2F;  马里奥向右站立\n            Tower &#x3D; ImageIO.read(new File(Path + &quot;tower.png&quot;));                 &#x2F;&#x2F;  加载城堡\n            Gan &#x3D; ImageIO.read(new File(Path +&quot;gan.png&quot;));                      &#x2F;&#x2F;  加载旗杆\n        &#125; catch (IOException exception) &#123;\n            exception.printStackTrace();\n        &#125;\n\n        &#x2F;* 加载障碍物 try捕获 read 异常 *&#x2F;\n        try &#123;\n            Obstacle.add(ImageIO.read(new File(Path + &quot;brick.png&quot;)));       &#x2F;&#x2F; 首先加载砖块一种是可破坏的一种是不可破坏的\n            Obstacle.add(ImageIO.read(new File(Path + &quot;soil_up.png&quot;)));     &#x2F;&#x2F; 加载地面(上地面) 分为两种一个是我们的上地面一个是我们的下地面\n            Obstacle.add(ImageIO.read(new File(Path + &quot;soil_base.png&quot;)));   &#x2F;&#x2F; 加载下地面\n        &#125; catch (IOException exception) &#123;\n            exception.printStackTrace();\n        &#125;\n\n        &#x2F;* 加载不可破坏的砖块和旗子 try捕获 read 异常 *&#x2F;\n        try &#123;\n            Obstacle.add(ImageIO.read(new File(Path + &quot;brick2.png&quot;)));  &#x2F;&#x2F;  不可破坏砖块\n            Obstacle.add(ImageIO.read(new File(Path + &quot;flag.png&quot;)));    &#x2F;&#x2F;  旗子障碍物\n        &#125; catch (IOException exception) &#123;\n            exception.printStackTrace();\n        &#125;\n\n        &#x2F;* 加载水管 因为是四个图像所以我们采用 For 循环处理 try捕获 read 异常 *&#x2F;\n        for (int i &#x3D; 1; i &lt;&#x3D; 4; i++) &#123;\n            try &#123;\n                Obstacle.add(ImageIO.read(new File(Path + &quot;pipe&quot; + i + &quot;.png&quot;)));\n            &#125; catch (IOException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n\n        &#x2F;* 加载马里奥向左跑图片 因为有两张所以我们要采用 For 循环 try捕获 read 异常 *&#x2F;\n        for (int i &#x3D; 1; i &lt;&#x3D; 2; i++) &#123;\n            try &#123;\n                Run_Left.add(ImageIO.read(new File(Path + &quot;s_mario_run&quot; + i + &quot;_L.png&quot;)));\n            &#125; catch (IOException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n\n        &#x2F;* 加载马里奥向右跑图片 因为有两张所以我们和加载马里奥向左跑图片一样 *&#x2F;\n        for (int i &#x3D; 1; i &lt;&#x3D; 2; i++) &#123;\n            try &#123;\n                Run_Right.add(ImageIO.read(new File(Path + &quot;s_mario_run&quot; + i + &quot;_R.png&quot;)));\n            &#125; catch (IOException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n\n        &#x2F;* 加载蘑菇敌人 因为是三张图片所以我们仍然通过一个 For 循环 *&#x2F;\n        for (int i &#x3D; 1; i &lt;&#x3D; 3; i++) &#123;\n            try &#123;\n                Mogu.add(ImageIO.read(new File(Path + &quot;fungus&quot; + i + &quot;.png&quot;)));\n            &#125; catch (IOException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n\n        &#x2F;* 加载食人花敌人 因为是两张图片所以我们仍然通过一个 For 循环 加载*&#x2F;\n        for (int i &#x3D; 1; i &lt;&#x3D; 2; i++)&#123;\n            try &#123;\n                Flower.add(ImageIO.read(new File(Path + &quot;flower1.&quot; + i + &quot;.png&quot;)));\n            &#125; catch (IOException exception) &#123;\n                exception.printStackTrace();\n            &#125;\n        &#125;\n\n    &#125;\n&#125;</code></pre>","text":"package com.arvin; import javax.imageio.ImageIO; import java.awt.image.BufferedI...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"CodeGame","slug":"CodeGame","count":9,"path":"api/categories/CodeGame.json"}],"tags":[{"name":"程序","slug":"程序","count":11,"path":"api/tags/程序.json"}],"toc":"","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Minecraft 类游戏地形生成算法","uid":"b9f0a691f1e575c41aa38be21dfe4644","slug":"CodeGame_Technology_Minecratf_Terrain01","date":"2021-11-06T21:11:52.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/CodeGame_Technology_Minecratf_Terrain01.json","keywords":null,"cover":"https://z3.ax1x.com/2021/11/07/IlDnN6.png","text":"Minecraft 类游戏地形生成算法噪声算法 为什么要有噪声？ 随机数 VS 噪声 随机数：随机生成一个噪点不一的黑白图，但因为过于随机生成的图看起来特别不舒...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"CodeGame","slug":"CodeGame","count":9,"path":"api/categories/CodeGame.json"}],"tags":[{"name":"程序","slug":"程序","count":11,"path":"api/tags/程序.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java 创建窗口","uid":"da69133c682847c464fcd9e3550d815c","slug":"CodeGame_Java_SuperMary_Test01","date":"2021-11-05T10:57:52.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/CodeGame_Java_SuperMary_Test01.json","keywords":null,"cover":"https://tse3-mm.cn.bing.net/th/id/OIP-C.mRQUEYkDCy0aqlsBtq54zwHaJg?pid=ImgDet&rs=1","text":"Java 窗口绘制 创建窗口我们需要继承 JFrame 类 向窗口对象添加键盘监听器 需要该类实现 KeyListener 接口 并重写抽象方法 代码演示pac...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"CodeGame","slug":"CodeGame","count":9,"path":"api/categories/CodeGame.json"}],"tags":[{"name":"程序","slug":"程序","count":11,"path":"api/tags/程序.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}