{"title":"Lua讲解","uid":"c4376d974567342d893650726b4846c5","slug":"UnLua_Programming_Guide_CN","date":"2021-08-28T17:02:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/UnLua_Programming_Guide_CN.json","keywords":null,"cover":"https://pic4.zhimg.com/v2-149560fe9bf1888aad0035c490f6a59c_1440w.jpg?source=172ae18b","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>UnLua是一个功能丰富并且高效的UE4脚本编程解决方案。开发者可以使用Lua来开发游戏逻辑，并且它允许我们利用Lua的热加载功能来更快地更新游戏逻辑。这份文档将会介绍UnLua的主要功能以及最基础的编程模式。</p>\n<hr>\n<h1 id=\"Lua和引擎的绑定\"><a href=\"#Lua和引擎的绑定\" class=\"headerlink\" title=\"Lua和引擎的绑定\"></a>Lua和引擎的绑定</h1><p>UnLua提供了一种简单的方法将Lua和游戏引擎相互绑定，包括静态绑定和动态绑定：</p>\n<h2 id=\"静态绑定\"><a href=\"#静态绑定\" class=\"headerlink\" title=\"静态绑定\"></a>静态绑定</h2><h4 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h4><p>你的UCLASS只需要实现接口<strong>IUnLuaInterface</strong>，并在函数**GetModuleName_Implementation()**中返回一个Lua文件路径。</p>\n<h4 id=\"蓝图\"><a href=\"#蓝图\" class=\"headerlink\" title=\"蓝图\"></a>蓝图</h4><p>你的蓝图只需要实现接口<strong>UnLuaInterface</strong>，并在函数**GetModuleName()**中返回一个Lua文件路径。</p>\n<h2 id=\"动态绑定\"><a href=\"#动态绑定\" class=\"headerlink\" title=\"动态绑定\"></a>动态绑定</h2><p>动态绑定适用于运行时创建AActor和UObject</p>\n<h4 id=\"Actor\"><a href=\"#Actor\" class=\"headerlink\" title=\"Actor\"></a>Actor</h4><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Proj &#x3D; World:SpawnActor(ProjClass, Transform, ESpawnActorCollisionHandlingMethod.AlwaysSpawn, self, self.Instigator, &quot;Weapon.BP_DefaultProjectile_C&quot;)</code></pre>\n<p><strong>“Weapon.BP_DefaultProjectile_C”</strong>是一个Lua文件路径.</p>\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local ProxyObj &#x3D; NewObject(ObjClass, nil, nil, &quot;Objects.ProxyObject&quot;)</code></pre>\n<p><strong>“Objects.ProxyObject”</strong>是一个Lua文件路径.</p>\n<h2 id=\"Lua文件路径\"><a href=\"#Lua文件路径\" class=\"headerlink\" title=\"Lua文件路径\"></a>Lua文件路径</h2><p>不论是静态绑定还是动态绑定都需要一个Lua文件路径。它是项目目录**’Content&#x2F;Script’<strong>的</strong>相对**路径。</p>\n<hr>\n<h1 id=\"Lua调用引擎\"><a href=\"#Lua调用引擎\" class=\"headerlink\" title=\"Lua调用引擎\"></a>Lua调用引擎</h1><p>UnLua提供了两种从Lua端访问引擎的方法：</p>\n<ul>\n<li>使用反射系统动态导出；</li>\n<li>在反射系统外部静态导出类、成员变量、成员函数、全局函数和枚举。</li>\n</ul>\n<h2 id=\"使用反射系统动态导出\"><a href=\"#使用反射系统动态导出\" class=\"headerlink\" title=\"使用反射系统动态导出\"></a>使用反射系统动态导出</h2><p>利用反射系统进行动态导出，使代码简洁、直观，消除了大量的胶水代码。</p>\n<h3 id=\"访问UCLASS\"><a href=\"#访问UCLASS\" class=\"headerlink\" title=\"访问UCLASS\"></a>访问UCLASS</h3><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Widget &#x3D; UWidgetBlueprintLibrary.Create(self, UClass.Load(&quot;&#x2F;Game&#x2F;Core&#x2F;UI&#x2F;UMG_Main&quot;))</code></pre>\n<p><strong>UWidgetBlueprintLibrary</strong> 是一个UCLASS。类在Lua里的名称必须是 <strong>PrefixCPP</strong> + <strong>ClassName</strong> + **[<code>_C</code>]**，例如： <strong>AActor</strong> (原生类)， <strong>ABP_PlayerCharacter_C</strong>（蓝图类）</p>\n<h3 id=\"访问UFUNCTION\"><a href=\"#访问UFUNCTION\" class=\"headerlink\" title=\"访问UFUNCTION\"></a>访问UFUNCTION</h3><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">Widget:AddToViewport(0)</code></pre>\n<p><strong>AddToViewport</strong> 是 <strong>UUserWidget</strong> 的一个UFUNCTION。 <strong>0</strong> 是函数的参数。如果（被标记为 <strong>‘BlueprintCallable’</strong> 或 **’Exec’**的）UFUNCTION的参数拥有默认值，那在Lua代码中可以忽略参数0：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">Widget:AddToViewport()</code></pre>\n\n<h4 id=\"输出值处理\"><a href=\"#输出值处理\" class=\"headerlink\" title=\"输出值处理\"></a>输出值处理</h4><p>输出值包括 <strong>非常量引用参数</strong> and <strong>返回值参数</strong>。这些输出值分为 <strong>原生类型（bool, integer, number, string）</strong> 和 <strong>非原生类型 （用户自定义数据）</strong>。</p>\n<h5 id=\"非常量引用参数\"><a href=\"#非常量引用参数\" class=\"headerlink\" title=\"非常量引用参数\"></a>非常量引用参数</h5><h6 id=\"原生类型\"><a href=\"#原生类型\" class=\"headerlink\" title=\"原生类型\"></a>原生类型</h6><p>Lua代码：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Level, Health, Name &#x3D; self:GetPlayerBaseInfo()</code></pre>\n\n<h6 id=\"非原生类型\"><a href=\"#非原生类型\" class=\"headerlink\" title=\"非原生类型\"></a>非原生类型</h6><p>他们在Lua中有两种调用的方法：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local HitResult &#x3D; FHitResult()\nself:GetHitResult(HitResult)</code></pre>\n<p>或</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local HitResult &#x3D; self:GetHitResult()</code></pre>\n<p>第一种方法和C++极为相似，当调用多次（比如在循环中）时，它比第二种方法效率高得多。</p>\n<h5 id=\"返回值参数\"><a href=\"#返回值参数\" class=\"headerlink\" title=\"返回值参数\"></a>返回值参数</h5><h6 id=\"原生类型-1\"><a href=\"#原生类型-1\" class=\"headerlink\" title=\"原生类型\"></a>原生类型</h6><p>Lua代码：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local MeleeDamage &#x3D; self:GetMeleeDamage()</code></pre>\n\n<h6 id=\"非原生类型-1\"><a href=\"#非原生类型-1\" class=\"headerlink\" title=\"非原生类型\"></a>非原生类型</h6><p>他在Lua中有三种调用方式：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Location &#x3D; self:GetCurrentLocation()</code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Location &#x3D; FVector()\nself:GetCurrentLocation(Location)</code></pre>\n<p>以及</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Location &#x3D; FVector()\nlocal LocationCopy &#x3D; self:GetCurrentLocation(Location)</code></pre>\n<p>第一种方法最为直观，事实上，当调用多次（比如在循环中）时，后两种方法要比第一种方法效率高得多。最后一种方法等价于：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Location &#x3D; FVector()\nself:GetCurrentLocation(Location)\nlocal LocationCopy &#x3D; Location</code></pre>\n\n<h4 id=\"潜在功能\"><a href=\"#潜在功能\" class=\"headerlink\" title=\"潜在功能\"></a>潜在功能</h4><p>潜在功能允许开发人员使用同步调用风格开发异步逻辑。一个典型的潜在功能例子是<strong>Delay</strong>：</p>\n<p>你可以在Lua协程中调用潜在功能：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">coroutine.resume(\n\tcoroutine.create(\n    \tfunction(GameMode, Duration)\n        \tUKismetSystemLibrary.Delay(GameMode, Duration)\n        end\n    ), self, 5.0\n)</code></pre>\n\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><p>UnLua对UFUNCTION的调用进行了以下几点优化：</p>\n<ul>\n<li>持久的缓冲参数</li>\n<li>优化局部函数调用</li>\n<li>优化参数传递</li>\n<li>优化输出值处理</li>\n</ul>\n<h3 id=\"访问USTRUCT\"><a href=\"#访问USTRUCT\" class=\"headerlink\" title=\"访问USTRUCT\"></a>访问USTRUCT</h3><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Position &#x3D; FVector()</code></pre>\n<p><strong>FVector</strong> 是一个USTRUCT。</p>\n<h3 id=\"访问UPROPERTY\"><a href=\"#访问UPROPERTY\" class=\"headerlink\" title=\"访问UPROPERTY\"></a>访问UPROPERTY</h3><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Position &#x3D; FVector()\nPosition.X &#x3D; 256.0</code></pre>\n<p><strong>X</strong> 是 <strong>FVector</strong> 的一个UPROPERTY。</p>\n<h4 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h4><ul>\n<li><p>绑定</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">FloatTrack.InterpFunc:Bind(self, BP_PlayerCharacter_C.OnZoomInOutUpdate)</code></pre>\n<p><strong>InterpFunc</strong> 是 FTimelineFloatTrack 的代理， <strong>‘Bind’</strong> 为 <strong>InterpFunc</strong> 绑定了一个回调函数 （<strong>BP_PlayerCharacter_C.OnZoomInOutUpdate</strong>）。</p>\n</li>\n<li><p>解除绑定</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">FloatTrack.InterpFunc:Unbind()</code></pre>\n<p><strong>InterpFunc</strong> 是 FTimelineFloatTrack 的代理， <strong>‘Unbind’</strong> 解除了 <strong>InterpFunc</strong> 所绑定的回调函数。</p>\n</li>\n<li><p>执行</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">FloatTrack.InterpFunc:Execute(0.5)</code></pre>\n<p><strong>InterpFunc</strong> 是 FTimelineFloatTrack 的代理， <strong>‘Execute’</strong> 调用了绑定到<strong>InterpFunc</strong>对象上的函数。</p>\n</li>\n</ul>\n<h4 id=\"多播代理\"><a href=\"#多播代理\" class=\"headerlink\" title=\"多播代理\"></a>多播代理</h4><ul>\n<li><p>添加</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">self.ExitButton.OnClicked:Add(self, UMG_Main_C.OnClicked_ExitButton)</code></pre>\n<p><strong>OnClicked</strong> 是 UButton 的一个多播代理，**’Add’** 为 <strong>OnClicked</strong> 添加了一个回调（<strong>UMG_Main_C.OnClicked_ExitButton</strong>）。</p>\n</li>\n<li><p>移除</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">self.ExitButton.OnClicked:Remove(self, UMG_Main_C.OnClicked_ExitButton)</code></pre>\n<p><strong>OnClicked</strong> 是 UButton 的一个多播代理，**’Remove’** 在 <strong>OnClicked</strong> 上移除了一个回调（<strong>UMG_Main_C.OnClicked_ExitButton</strong>）。</p>\n</li>\n<li><p>清除</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">self.ExitButton.OnClicked:Clear()</code></pre>\n<p><strong>OnClicked</strong> 是 UButton 的一个多播代理，**’Clear’** 清除了在 <strong>OnClicked</strong> 上的所有回调。</p>\n</li>\n<li><p>广播</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">self.ExitButton.OnClicked:Broadcast()</code></pre>\n<p><strong>OnClicked</strong> 是 UButton 的一个多播代理，**’Broadcast’** 调用了所有绑定在 <strong>OnClicked</strong> 对象上的函数。</p>\n</li>\n</ul>\n<h3 id=\"访问UENUM\"><a href=\"#访问UENUM\" class=\"headerlink\" title=\"访问UENUM\"></a>访问UENUM</h3><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">Weapon:K2_AttachToComponent(Point, nil, EAttachmentRule.SnapToTarget, EAttachmentRule.SnapToTarget, EAttachmentRule.SnapToTarget)</code></pre>\n<p><strong>EAttachmentRule</strong> 是一个枚举，<strong>SnapToTarget</strong> 是一个 <strong>EAttachmentRule</strong> 类型的枚举值。</p>\n<h4 id=\"自定义碰撞枚举\"><a href=\"#自定义碰撞枚举\" class=\"headerlink\" title=\"自定义碰撞枚举\"></a>自定义碰撞枚举</h4><ul>\n<li><p>EObjectTypeQuery</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local ObjectTypes &#x3D; TArray(EObjectTypeQuery)\nObjectTypes:Add(EObjectTypeQuery.Player)\nObjectTypes:Add(EObjectTypeQuery.Enemy)\nObjectTypes:Add(EObjectTypeQuery.Projectile)\nlocal bHit &#x3D; UKismetSystemLibrary.LineTraceSingleForObjects(self, Start, End, ObjectTypes, false, nil, EDrawDebugTrace.None, HitResult, true)</code></pre>\n<p><strong>EObjectTypeQuery.Player</strong>，<strong>EObjectTypeQuery.Enemy</strong> 以及 <strong>EObjectTypeQuery.Projectile</strong> 都是自定义对象通道。</p>\n</li>\n<li><p>ETraceTypeQuery</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local bHit &#x3D; UKismetSystemLibrary.LineTraceSingle(self, Start, End, ETraceTypeQuery.Weapon, false, nil, EDrawDebugTrace.None, HitResult, true)</code></pre>\n<p><strong>ETraceTypeQuery.Weapon</strong> 是一个自定义跟踪通道。</p>\n</li>\n</ul>\n<h3 id=\"手动导出库\"><a href=\"#手动导出库\" class=\"headerlink\" title=\"手动导出库\"></a>手动导出库</h3><p>出于灵活性与性能考虑，UnLua在引擎中手动导出了几个重要的类，包括以下（详见代码）：</p>\n<h4 id=\"基础类\"><a href=\"#基础类\" class=\"headerlink\" title=\"基础类\"></a>基础类</h4><ul>\n<li>UObject</li>\n<li>UClass</li>\n<li>UWorld</li>\n</ul>\n<h4 id=\"常见容器\"><a href=\"#常见容器\" class=\"headerlink\" title=\"常见容器\"></a>常见容器</h4><ul>\n<li>TArray</li>\n<li>TSet</li>\n<li>TMap</li>\n</ul>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Indices &#x3D; TArray(0)\nIndices:Add(1)\nIndices:Add(3)\nIndices:Remove(0)\nlocal NbIndices &#x3D; Indices:Length()</code></pre>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Vertices &#x3D; TArray(FVector)\nlocal Actors &#x3D; TArray(AActor)</code></pre>\n\n<h4 id=\"数学库\"><a href=\"#数学库\" class=\"headerlink\" title=\"数学库\"></a>数学库</h4><ul>\n<li>FVector</li>\n<li>FVector2D</li>\n<li>FVector4</li>\n<li>FQuat</li>\n<li>FRotator</li>\n<li>FTransform</li>\n<li>FColor</li>\n<li>FLinearColor</li>\n<li>FIntPoint</li>\n<li>FIntVector</li>\n</ul>\n<h2 id=\"静态导出\"><a href=\"#静态导出\" class=\"headerlink\" title=\"静态导出\"></a>静态导出</h2><p>UnLua提供了一个简单的解决方案，可以在反射系统外部静态地导出类、成员变量、成员函数、全局函数和枚举。</p>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><ul>\n<li><p>没有反射的类</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">BEGIN_EXPORT_CLASS(ClassType, ...)</code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">BEGIN_EXPORT_NAMED_CLASS(ClassName, ClassType, ...)</code></pre>\n<p> <strong>‘…’</strong> 表示构造函数中参数的类型列表。</p>\n</li>\n<li><p>有反射的类</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">BEGIN_EXPORT_REFLECTED_CLASS(UObjectType)</code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">BEGIN_EXPORT_REFLECTED_CLASS(NonUObjectType, ...)</code></pre>\n<p> <strong>‘…’</strong> 表示构造函数中参数的类型列表。</p>\n</li>\n</ul>\n<h4 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ADD_PROPERTY(Property)</code></pre>\n<p>或者（用于bitfield的bool属性）</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ADD_BITFIELD_BOOL_PROPERTY(Property)</code></pre>\n\n<h4 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h4><h5 id=\"非静态成员函数\"><a href=\"#非静态成员函数\" class=\"headerlink\" title=\"非静态成员函数\"></a>非静态成员函数</h5><ul>\n<li><p>紧凑型风格</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ADD_FUNCTION(Function)</code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ADD_NAMED_FUNCTION(Name, Function)</code></pre>\n</li>\n<li><p>完全型风格</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ADD_FUNCTION_EX(Name, RetType, Function, ...)</code></pre>\n<p> 或者</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ADD_CONST_FUNCTION_EX(Name, RetType, Function, ...)</code></pre>\n<p> <strong>‘…’</strong> 为参数类型列表。</p>\n</li>\n</ul>\n<h5 id=\"静态成员函数\"><a href=\"#静态成员函数\" class=\"headerlink\" title=\"静态成员函数\"></a>静态成员函数</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ADD_STATIC_FUNCTION(Function)</code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ADD_STATIC_FUNCTION_EX(Name, RetType, Function, ...)</code></pre>\n<p><strong>‘…’</strong> 为参数类型列表。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">struct Vec3\n&#123;\n\tVec3() : x(0), y(0), z(0) &#123;&#125;\n\tVec3(float _x, float _y, float _z) : x(_x), y(_y), z(_z) &#123;&#125;\n\n\tvoid Set(const Vec3 &amp;V) &#123; *this &#x3D; V; &#125;\n\tVec3&amp; Get() &#123; return *this; &#125;\n\tvoid Get(Vec3 &amp;V) const &#123; V &#x3D; *this; &#125;\n\n\tbool operator&#x3D;&#x3D;(const Vec3 &amp;V) const &#123; return x &#x3D;&#x3D; V.x &amp;&amp; y &#x3D;&#x3D; V.y &amp;&amp; z &#x3D;&#x3D; V.z; &#125;\n\n\tstatic Vec3 Cross(const Vec3 &amp;A, const Vec3 &amp;B) &#123; return Vec3(A.y * B.z - A.z * B.y, A.z * B.x - A.x * B.z, A.x * B.y - A.y * B.x); &#125;\n\tstatic Vec3 Multiply(const Vec3 &amp;A, float B) &#123; return Vec3(A.x * B, A.y * B, A.z * B); &#125;\n\tstatic Vec3 Multiply(const Vec3 &amp;A, const Vec3 &amp;B) &#123; return Vec3(A.x * B.x, A.y * B.y, A.z * B.z); &#125;\n\n\tfloat x, y, z;\n&#125;;\n\nBEGIN_EXPORT_CLASS(Vec3, float, float, float)\n\tADD_PROPERTY(x)\n\tADD_PROPERTY(y)\n\tADD_PROPERTY(z)\n\tADD_FUNCTION(Set)\n\tADD_NAMED_FUNCTION(&quot;Equals&quot;, operator&#x3D;&#x3D;)\n\tADD_FUNCTION_EX(&quot;Get&quot;, Vec3&amp;, Get)\n\tADD_CONST_FUNCTION_EX(&quot;GetCopy&quot;, void, Get, Vec3&amp;)\n\tADD_STATIC_FUNCTION(Cross)\n\tADD_STATIC_FUNCTION_EX(&quot;MulScalar&quot;, Vec3, Multiply, const Vec3&amp;, float)\n\tADD_STATIC_FUNCTION_EX(&quot;MulVec&quot;, Vec3, Multiply, const Vec3&amp;, const Vec3&amp;)\nEND_EXPORT_CLASS()\nIMPLEMENT_EXPORTED_CLASS(Vec3)</code></pre>\n\n<h3 id=\"全局函数\"><a href=\"#全局函数\" class=\"headerlink\" title=\"全局函数\"></a>全局函数</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">EXPORT_FUNCTION(RetType, Function, ...)</code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EXPORT_FUNCTION_EX(Name, RetType, Function, ...)</code></pre>\n<p><strong>‘…’</strong> 为参数类型列表。</p>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">void GetEngineVersion(int32 &amp;MajorVer, int32 &amp;MinorVer, int32 &amp;PatchVer)\n&#123;\n\tMajorVer &#x3D; ENGINE_MAJOR_VERSION;\n\tMinorVer &#x3D; ENGINE_MINOR_VERSION;\n\tPatchVer &#x3D; ENGINE_PATCH_VERSION;\n&#125;\n\nEXPORT_FUNCTION(void, GetEngineVersion, int32&amp;, int32&amp;, int32&amp;)</code></pre>\n\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><ul>\n<li>普通枚举</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">enum EHand\n&#123;\n\tLeftHand,\n\tRightHand\n&#125;;\n\nBEGIN_EXPORT_ENUM(EHand)\n\tADD_ENUM_VALUE(LeftHand)\n\tADD_ENUM_VALUE(RightHand)\nEND_EXPORT_ENUM(EHand)</code></pre>\n\n<ul>\n<li>作用域为类的枚举</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">enum class EEye\n&#123;\n\tLeftEye,\n\tRightEye\n&#125;;\n\nBEGIN_EXPORT_ENUM(EEye)\n\tADD_SCOPED_ENUM_VALUE(LeftEye)\n\tADD_SCOPED_ENUM_VALUE(RightEye)\nEND_EXPORT_ENUM(EEye)</code></pre>\n\n<h2 id=\"可选“UE4”名称空间\"><a href=\"#可选“UE4”名称空间\" class=\"headerlink\" title=\"可选“UE4”名称空间\"></a>可选“UE4”名称空间</h2><p>UnLua提供了一个选项来添加一个命名空间**’UE4’<strong>到引擎中的所有类和枚举。你可以在</strong>UnLua.Build.cs**中找到这个选项。</p>\n<p>如果这个选项被开启，你的Lua代码应该是这样子：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local Position &#x3D; UE4.FVector()</code></pre>\n\n<hr>\n<h1 id=\"引擎调用Lua\"><a href=\"#引擎调用Lua\" class=\"headerlink\" title=\"引擎调用Lua\"></a>引擎调用Lua</h1><p>UnLua提供了一个类似蓝图的解决方案来跨越C++&#x2F;Script的边界。它允许C++&#x2F;Blueprint代码调用在Lua代码中定义的函数。</p>\n<h2 id=\"覆写蓝图事件\"><a href=\"#覆写蓝图事件\" class=\"headerlink\" title=\"覆写蓝图事件\"></a>覆写蓝图事件</h2><p>你可以在Lua代码里覆写所有的<strong>蓝图事件</strong>。<strong>蓝图事件</strong>包括：</p>\n<ul>\n<li>被标记为 <strong>‘BlueprintImplementableEvent’</strong> 的UFUNCTION</li>\n<li>被标记为 <strong>‘BlueprintNativeEvent’</strong> 的UFUNCTION</li>\n<li><strong>所有</strong>定义在蓝图里的事件或函数</li>\n</ul>\n<h3 id=\"示例（没有返回值的蓝图事件）\"><a href=\"#示例（没有返回值的蓝图事件）\" class=\"headerlink\" title=\"示例（没有返回值的蓝图事件）\"></a>示例（没有返回值的蓝图事件）</h3><p>你可以在Lua中这样覆写它：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function BP_PlayerController_C:ReceiveBeginPlay()\n  print(&quot;ReceiveBeginPlay in Lua!&quot;)\nend</code></pre>\n\n<h3 id=\"示例（有返回值的蓝图事件）\"><a href=\"#示例（有返回值的蓝图事件）\" class=\"headerlink\" title=\"示例（有返回值的蓝图事件）\"></a>示例（有返回值的蓝图事件）</h3><p>在Lua中有两种覆写它的方式：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function BP_PlayerCharacter_C:GetCharacterInfo(HP, Position, Name)\n\tPosition.X &#x3D; 128.0\n\tPosition.Y &#x3D; 128.0\n\tPosition.Z &#x3D; 0.0\n\treturn 99, nil, &quot;Marcus&quot;, true\nend</code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function BP_PlayerCharacter_C:GetCharacterInfo(HP, Position, Name)\n\treturn 99, FVector(128.0, 128.0, 0.0), &quot;Marcus&quot;, true\nend</code></pre>\n<p>推荐第一种方式。</p>\n<h2 id=\"覆写动画通知\"><a href=\"#覆写动画通知\" class=\"headerlink\" title=\"覆写动画通知\"></a>覆写动画通知</h2><p>动画通知：</p>\n<p>Lua代码：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function ABP_PlayerCharacter_C:AnimNotify_NotifyPhysics()\n\tUBPI_Interfaces_C.ChangeToRagdoll(self.Pawn)\nend</code></pre>\n<p>Lua的函数名称必须是 <strong>‘AnimNotify_’</strong> + <strong>通知名称</strong>。</p>\n<h2 id=\"覆写输入事件\"><a href=\"#覆写输入事件\" class=\"headerlink\" title=\"覆写输入事件\"></a>覆写输入事件</h2><h4 id=\"操作输入\"><a href=\"#操作输入\" class=\"headerlink\" title=\"操作输入\"></a>操作输入</h4><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function BP_PlayerController_C:Aim_Pressed()\n\tUBPI_Interfaces_C.UpdateAiming(self.Pawn, true)\nend\n\nfunction BP_PlayerController_C:Aim_Released()\n\tUBPI_Interfaces_C.UpdateAiming(self.Pawn, false)\nend</code></pre>\n<p>Lua的函数名称必须是 <strong>操作输入名称</strong> + **’_Pressed’ 或者 ‘_Released’**。</p>\n<h4 id=\"轴输入\"><a href=\"#轴输入\" class=\"headerlink\" title=\"轴输入\"></a>轴输入</h4><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function BP_PlayerController_C:Turn(AxisValue)\n\tself:AddYawInput(AxisValue)\nend\n\nfunction BP_PlayerController_C:LookUp(AxisValue)\n\tself:AddPitchInput(AxisValue)\nend</code></pre>\n<p>Lua的函数名称必须是与 <strong>轴输入名称</strong> 一模一样。</p>\n<h4 id=\"键盘输入\"><a href=\"#键盘输入\" class=\"headerlink\" title=\"键盘输入\"></a>键盘输入</h4><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function BP_PlayerController_C:P_Pressed()\n\tprint(&quot;P_Pressed&quot;)\nend\n\nfunction BP_PlayerController_C:P_Released()\n\tprint(&quot;P_Released&quot;)\nend</code></pre>\n<p>Lua的函数名称必须是 <strong>按键名称</strong> + **’_Pressed’ 或者 ‘_Released’**。</p>\n<h4 id=\"其他输入\"><a href=\"#其他输入\" class=\"headerlink\" title=\"其他输入\"></a>其他输入</h4><p>你也可以在Lua中覆写 <strong>Touch&#x2F;AxisKey&#x2F;VectorAxis&#x2F;Gesture Inputs</strong>。</p>\n<h2 id=\"覆写复制通知\"><a href=\"#覆写复制通知\" class=\"headerlink\" title=\"覆写复制通知\"></a>覆写复制通知</h2><p>如果你正在开发专用&#x2F;侦听服务器&amp;客户端游戏，你可以在Lua代码中覆写复制通知：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function BP_PlayerCharacter_C:OnRep_Health(...)\n\tprint(&quot;call OnRep_Health in Lua&quot;)\nend</code></pre>\n\n<h2 id=\"调用被覆写的函数\"><a href=\"#调用被覆写的函数\" class=\"headerlink\" title=\"调用被覆写的函数\"></a>调用被覆写的函数</h2><p>如果你在Lua中覆写了一个蓝图事件、动画通知或者复制通知，你仍然可以访问原始函数实现。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function BP_PlayerController_C:ReceiveBeginPlay()\n\tlocal Widget &#x3D; UWidgetBlueprintLibrary.Create(self, UClass.Load(&quot;&#x2F;Game&#x2F;Core&#x2F;UI&#x2F;UMG_Main&quot;))\n\tWidget:AddToViewport()\n\tself.Overridden.ReceiveBeginPlay(self)\nend</code></pre>\n\n<p><strong>self.<em>Overridden</em>.ReceiveBeginPlay(self)</strong> 将会调用蓝图实现的 ‘ReceiveBeginPlay’。</p>\n<h2 id=\"在C-中调用Lua函数\"><a href=\"#在C-中调用Lua函数\" class=\"headerlink\" title=\"在C++中调用Lua函数\"></a>在C++中调用Lua函数</h2><p>UnLua还提供了两种通用方法来调用全局Lua函数和C++代码中全局Lua表中的函数。</p>\n<ul>\n<li><p>全局函数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">template &lt;typename... T&gt;\nFLuaRetValues Call(lua_State *L, const char *FuncName, T&amp;&amp;... Args);</code></pre>\n</li>\n<li><p>全局表中的函数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">template &lt;typename... T&gt;\nFLuaRetValues CallTableFunc(lua_State *L, const char *TableName, const char *FuncName, T&amp;&amp;... Args);</code></pre></li>\n</ul>\n<hr>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>Lua模板文件导出</li>\n</ul>\n<p>你可以在蓝图中生成Lua的模板文件</p>\n<p>模板文件：</p>\n","text":"概述UnLua是一个功能丰富并且高效的UE4脚本编程解决方案。开发者可以使用Lua来开发游戏逻辑，并且它允许我们利用Lua的热加载功能来更快地更新游戏逻辑。这份...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"程序开发","slug":"程序开发","count":3,"path":"api/tags/程序开发.json"},{"name":"Lua","slug":"Lua","count":1,"path":"api/tags/Lua.json"},{"name":"C++","slug":"C","count":1,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua%E5%92%8C%E5%BC%95%E6%93%8E%E7%9A%84%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">Lua和引擎的绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">静态绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#C\"><span class=\"toc-text\">C++</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%93%9D%E5%9B%BE\"><span class=\"toc-text\">蓝图</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">动态绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Actor\"><span class=\"toc-text\">Actor</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Object\"><span class=\"toc-text\">Object</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lua%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">Lua文件路径</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua%E8%B0%83%E7%94%A8%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">Lua调用引擎</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%B0%84%E7%B3%BB%E7%BB%9F%E5%8A%A8%E6%80%81%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">使用反射系统动态导出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AEUCLASS\"><span class=\"toc-text\">访问UCLASS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AEUFUNCTION\"><span class=\"toc-text\">访问UFUNCTION</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E5%80%BC%E5%A4%84%E7%90%86\"><span class=\"toc-text\">输出值处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%B8%B8%E9%87%8F%E5%BC%95%E7%94%A8%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">非常量引用参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">原生类型</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">非原生类型</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">返回值参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B-1\"><span class=\"toc-text\">原生类型</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B-1\"><span class=\"toc-text\">非原生类型</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BD%9C%E5%9C%A8%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">潜在功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">优化</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AEUSTRUCT\"><span class=\"toc-text\">访问USTRUCT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AEUPROPERTY\"><span class=\"toc-text\">访问UPROPERTY</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">代理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%92%AD%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">多播代理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AEUENUM\"><span class=\"toc-text\">访问UENUM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%A2%B0%E6%92%9E%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">自定义碰撞枚举</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E5%AF%BC%E5%87%BA%E5%BA%93\"><span class=\"toc-text\">手动导出库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E7%B1%BB\"><span class=\"toc-text\">基础类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">常见容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%A6%E5%BA%93\"><span class=\"toc-text\">数学库</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">静态导出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB\"><span class=\"toc-text\">类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">成员变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">成员函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">非静态成员函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">静态成员函数</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">全局函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">枚举</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E9%80%89%E2%80%9CUE4%E2%80%9D%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">可选“UE4”名称空间</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%95%E6%93%8E%E8%B0%83%E7%94%A8Lua\"><span class=\"toc-text\">引擎调用Lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A6%86%E5%86%99%E8%93%9D%E5%9B%BE%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">覆写蓝图事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%88%E6%B2%A1%E6%9C%89%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E8%93%9D%E5%9B%BE%E4%BA%8B%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">示例（没有返回值的蓝图事件）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%88%E6%9C%89%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E8%93%9D%E5%9B%BE%E4%BA%8B%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">示例（有返回值的蓝图事件）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A6%86%E5%86%99%E5%8A%A8%E7%94%BB%E9%80%9A%E7%9F%A5\"><span class=\"toc-text\">覆写动画通知</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A6%86%E5%86%99%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">覆写输入事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">操作输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BD%B4%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">轴输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">键盘输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">其他输入</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A6%86%E5%86%99%E5%A4%8D%E5%88%B6%E9%80%9A%E7%9F%A5\"><span class=\"toc-text\">覆写复制通知</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E8%A2%AB%E8%A6%86%E5%86%99%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">调用被覆写的函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8C-%E4%B8%AD%E8%B0%83%E7%94%A8Lua%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">在C++中调用Lua函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li></ol>","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"散章（UE4）","uid":"90d3d14985de9c9321edab5c3c6a5f3a","slug":"San_Passage","date":"2021-08-28T17:02:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/San_Passage.json","keywords":null,"cover":"https://pic2.zhimg.com/v2-958e86ca0ed97045323e6208e8f842fd_180x120.jpg","text":"其他教程集合： https://blog.csdn.net/u012999985/article/details/107096741?spm=1001.2014...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"UE4","slug":"UE4","count":1,"path":"api/tags/UE4.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}