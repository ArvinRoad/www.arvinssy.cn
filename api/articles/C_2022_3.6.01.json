{"title":"C语言基本语法（下）","uid":"f6fa249751f2d876b96ef869eefc23b6","slug":"C_2022_3.6.01","date":"2022-03-05T18:38:00.000Z","updated":"2023-11-26T10:38:32.669Z","comments":true,"path":"api/articles/C_2022_3.6.01.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.f24dba1c0741d3e26719d27dcbfa9ddb?rik=ixXaTtSKatsoXg&riu=http%3a%2f%2fwww.huatengzy.com%2fuploadfile%2f2020%2f1124%2f20201124084901674.jpg&ehk=8cudqdmImcXfxpnTIdHfG5Fw3USMKmi72wqJwGyq34M%3d&risl=&pid=ImgRaw&r=0","content":"<h2 id=\"3-5-0-运算符与表达式\"><a href=\"#3-5-0-运算符与表达式\" class=\"headerlink\" title=\"3.5.0 运算符与表达式\"></a>3.5.0 运算符与表达式</h2><p>算术运算符是用来进行基本的数学运算的，它的最终计算结果仍然是数值。算术运算符和数学中的算术运算符有很多相似之处，如优先级、综合性等。也有同数学运算符运算不同的地方，比如数学中计算1.1&#x2F;2，不区分参与运算的对象是整数还是实数，最终的计算结果就是数学上真实的值；而C中，是区分参与运算的对象和数据类型的。<br>运算规则：先乘除后加减，有括号先算括号里的。<br>算术运算符：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>属性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>加法运算符</td>\n<td>或表示正值，如3+2，+1</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法运算符</td>\n<td>或表示负值，如3-2，-8</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法运算符</td>\n<td>如4*5</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>除法运算符</td>\n<td>如5&#x2F;3</td>\n</tr>\n<tr>\n<td>%</td>\n<td>求余运算符</td>\n<td>如5%3</td>\n</tr>\n</tbody></table>\n<p>C语言规定：<br>两个整数相除的结果整数，小数部分被舍弃。<br>例如：7&#x2F;3 的结果值是2不是2.3333，而7.0&#x2F;3的结果是2.333<br>%运算符只能用于整数相除求余，运算结果的符号与被除数相同。<br>​</p>\n<p>当除号两边都是整型量时，叫做整除，运算结果只保留整数部分。<br>当除号任何一边有实型量时，运算结果是实数。<br>%要求两侧均为整型数据<br>演示：10 和 2取余</p>\n<h3 id=\"运算符优先级：\"><a href=\"#运算符优先级：\" class=\"headerlink\" title=\"运算符优先级：\"></a>运算符优先级：</h3><table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>名称含意</th>\n<th>使用形式</th>\n<th>结合方向</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>[]</td>\n<td>数组下标</td>\n<td>数组名[常量表达式]</td>\n<td>左到右</td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>（）</td>\n<td>圆括号</td>\n<td>（表达式）</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>函数名（形参表）</td>\n<td>左到右</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>.</td>\n<td>成员选择（对象）</td>\n<td>对象.成员名</td>\n<td>左到右</td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>-&gt;</td>\n<td>成员选择（指针）</td>\n<td>对象指针-&gt;成员名</td>\n<td>左到右</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>-</td>\n<td>负号运算符</td>\n<td>-表达式</td>\n<td>右到左</td>\n<td>单目运算符</td>\n</tr>\n<tr>\n<td>2</td>\n<td>（类型）</td>\n<td>强制类型转换</td>\n<td>（数据类型）表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>++</td>\n<td>自增运算符</td>\n<td>++变量名</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>变量名++</td>\n<td>右到左</td>\n<td>单目运算符</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>–</td>\n<td>自减运算符</td>\n<td>–变量名</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>变量名–</td>\n<td>右到左</td>\n<td>单目运算符</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>*</td>\n<td>取值运算符</td>\n<td>*指针变量</td>\n<td>右到左</td>\n<td>单目运算符</td>\n</tr>\n<tr>\n<td>2</td>\n<td>&amp;</td>\n<td>取地址运算符</td>\n<td>&amp;变量名</td>\n<td>右到左</td>\n<td>单目运算符</td>\n</tr>\n<tr>\n<td>2</td>\n<td>!</td>\n<td>逻辑运算符</td>\n<td>!表达式</td>\n<td>右到左</td>\n<td>单目运算符</td>\n</tr>\n<tr>\n<td>2</td>\n<td>~</td>\n<td>按位取反运算符</td>\n<td>~表达式</td>\n<td>右到左</td>\n<td>单目运算符</td>\n</tr>\n<tr>\n<td>2</td>\n<td>sizeof</td>\n<td>长度运算符</td>\n<td>sizeof（表达式）</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>&#x2F;</td>\n<td>除</td>\n<td>表达式 &#x2F; 表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>3</td>\n<td>*</td>\n<td>乘</td>\n<td>表达式*表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>3</td>\n<td>%</td>\n<td>取余（取模）</td>\n<td>整型表达式%整型表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>4</td>\n<td>+</td>\n<td>加</td>\n<td>表达式+表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>4</td>\n<td>-</td>\n<td>减</td>\n<td>表达式-表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>5</td>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>变量&lt;&lt;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>5</td>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>变量&gt;&gt;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>6</td>\n<td>&gt;</td>\n<td>大于</td>\n<td>表达式&gt;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>6</td>\n<td>&gt;&#x3D;</td>\n<td>大于等于</td>\n<td>表达式&gt;&#x3D;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>6</td>\n<td>&lt;</td>\n<td>小于</td>\n<td>表达式&lt;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>6</td>\n<td>&lt;&#x3D;</td>\n<td>小于等于</td>\n<td>表达式&lt;&#x3D;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>7</td>\n<td>&#x3D;&#x3D;</td>\n<td>等于</td>\n<td>表达式&#x3D;&#x3D;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>7</td>\n<td>！&#x3D;</td>\n<td>不等于</td>\n<td>表达式!&#x3D;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>8</td>\n<td>&amp;</td>\n<td>按位与</td>\n<td>表达式&amp;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>9</td>\n<td>^</td>\n<td>按位异或</td>\n<td>表达式^表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>10</td>\n<td>&#124;</td>\n<td>按位或</td>\n<td>表达式&#124;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>11</td>\n<td>&amp;&amp;</td>\n<td>逻辑与</td>\n<td>表达式&amp;&amp;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>12</td>\n<td>&#124;&#124;</td>\n<td>逻辑或</td>\n<td>表达式&#124;&#124;表达式</td>\n<td>左到右</td>\n<td>双目运算符</td>\n</tr>\n<tr>\n<td>13</td>\n<td>？：</td>\n<td>条件运算符</td>\n<td>表达式1？表达式2：表达式3</td>\n<td>右到左</td>\n<td>三目运算符</td>\n</tr>\n<tr>\n<td>14</td>\n<td>&#x3D;</td>\n<td>赋值运算符</td>\n<td>变量 &#x3D; 表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>&#x2F;&#x3D;</td>\n<td>除后赋值</td>\n<td>变量&#x2F;&#x3D;表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>*&#x3D;</td>\n<td>乘后赋值</td>\n<td>变量*&#x3D;表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>%&#x3D;</td>\n<td>取模后赋值</td>\n<td>变量%&#x3D;表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>+&#x3D;</td>\n<td>加后赋值</td>\n<td>变量+&#x3D;表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>-&#x3D;</td>\n<td>减后赋值</td>\n<td>变量-&#x3D;表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>&lt;&lt;&#x3D;</td>\n<td>左移后赋值</td>\n<td>变量&lt;&lt;&#x3D;表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>&gt;&gt;&#x3D;</td>\n<td>右移后赋值</td>\n<td>变量&gt;&gt;&#x3D;表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>&amp;&#x3D;</td>\n<td>按位与后赋值</td>\n<td>变量&amp;&#x3D;表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>^&#x3D;</td>\n<td>按位异或后赋值</td>\n<td>变量^&#x3D;表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>&#124;&#x3D;</td>\n<td>按位或后赋值</td>\n<td>变量&#124;&#x3D;表达式</td>\n<td>右到左</td>\n<td></td>\n</tr>\n<tr>\n<td>15</td>\n<td>，</td>\n<td>逗号运算符</td>\n<td>表达式，表达式…</td>\n<td>左到右</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"3-5-1-和-–\"><a href=\"#3-5-1-和-–\" class=\"headerlink\" title=\"3.5.1 ++ 和 –\"></a>3.5.1 ++ 和 –</h2><ol>\n<li>“++” 与 “–”<ol>\n<li>前++ 后++</li>\n</ol>\n</li>\n</ol>\n<p>如果单独使用，不管是前++还是后++，最终的结果都是给这个变量加1.</p>\n<ol>\n<li>前++，先给这个变量自身加1，然后带着这个加1后的值参与运算。</li>\n<li>后++，则先拿原值参与运算，运算完毕后，再将这个变量自身加1。</li>\n</ol>\n<h2 id=\"3-5-2-复合赋值运算符\"><a href=\"#3-5-2-复合赋值运算符\" class=\"headerlink\" title=\"3.5.2 复合赋值运算符\"></a>3.5.2 复合赋值运算符</h2><p>+&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;<br>例子：nubmer+&#x3D;10 等于number&#x3D;number+10；</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;stdlib.h&gt;\n#include&lt;stdio.h&gt;\n\nvoidmain()&#123;\n\ninta&#x3D;5;\na+&#x3D;10;\nprintf(&quot;%d\\n&quot;,a);_&#x2F;&#x2F;结果a&#x3D;15|a&#x3D;a+10_\n\nintA&#x3D;3;\nintB&#x3D;A+&#x3D;A-&#x3D;A*A;_&#x2F;&#x2F;首先A*A&#x3D;9|然后是A&#x3D;-6&#x3D;3-9|最后A&#x3D;A+(-6)|所以得出为-12_\nprintf(&quot;%d\\n&quot;,B);\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"3-6-0-关系运算符和逻辑运算符\"><a href=\"#3-6-0-关系运算符和逻辑运算符\" class=\"headerlink\" title=\"3.6.0 关系运算符和逻辑运算符\"></a>3.6.0 关系运算符和逻辑运算符</h2><ol>\n<li>关系运算符</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; !&#x3D;<br>概念：关系运算符是用来描述两个事物之间的关系。<br>由关系运算符连接的表达式称之为”关系表达式”。</p></blockquote>\n<ol>\n<li>逻辑运算符<ol>\n<li>&amp;&amp; 逻辑与</li>\n</ol>\n</li>\n</ol>\n<p>&amp;&amp; 两边的表达式结果都为true的时候，这个逻辑与表达式的结果就为true。<br>两边的表达式结果只要有一个是false，那么整个逻辑表达式的结果就是false。</p>\n<ol>\n<li>||逻辑或</li>\n</ol>\n<p>||两边的表达式结果只要有一边为ture，整个逻辑或表达式的结果就为ture<br>两边的表达式的结果都为false，整个逻辑或表达式的结果才为false。</p>\n<ol>\n<li>！逻辑非</li>\n</ol>\n<p>！真的变假，假的变真的。<br>注意：<br>C语言当中没有Bool类型，但同样有真假的概念。<br>C语言表示逻辑运算的结果时，以数组1代表真，以0代表假。<br>比如：<br>a和b的值分别是0和5，则a||b的值为1，a&amp;&amp;b的值为0<br>但是在判断一个量是否为真时，以0代表假，以非0代表真</p>\n<h2 id=\"3-6-0-接收用户输入的scanf函数\"><a href=\"#3-6-0-接收用户输入的scanf函数\" class=\"headerlink\" title=\"3.6.0 接收用户输入的scanf函数\"></a>3.6.0 接收用户输入的scanf函数</h2><p>scanf通过键盘读取用户输入，放入变量中，记得参数一定要变量的地址(&amp;)。<br>如果遇到问题请换成scanf_s试试或在项目头部加入#define _CRT_SECURE_NO_WARNINGS</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">int a &#x3D; 0;\nint b &#x3D; 0;\nscanf(&quot;%d&quot;,&amp;a);\nscanf(&quot;%d&quot;,&amp;b);</code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#define_CRT_SECURE_NO_WARNINGS\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\n_&#x2F;**_\n_*#define_CRT_SECURE_NO_WARNINGS是解决scanf报错问题，因为它是之间对地址值的修改，为了安全起见编译器会进行审查_\n_*&#x2F;_\n\nintmain()&#123;\n\nintI&#x3D;520;\nintY&#x3D;1314;\nwhile(I&lt;Y)&#123;\nprintf(&quot;ILoveYou\\n&quot;);\nY-&#x3D;1000;\n&#125;\nprintf(&quot;%d,%d\\n&quot;,I,Y);\n\nprintf(&quot;请输入你心里的数值：&quot;);\nscanf(&quot;%d&quot;,&amp;I);_&#x2F;&#x2F;或采用scanf_s(&quot;%d&quot;,I);_\nprintf(&quot;%d\\n&quot;,I);\nif(I&#x3D;&#x3D;1314&amp;&amp;I&gt;Y)&#123;\nprintf(&quot;祝有情人白头到老\\n&quot;);\n&#125;\nelseif(I&#x3D;&#x3D;520||I&gt;Y)&#123;\nprintf(&quot;爱情是两个人努力的结果\\n&quot;);\n&#125;else&#123;\nprintf(&quot;缘分还是不够呀~\\n&quot;);\n&#125;\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"3-6-1-if-else-语句\"><a href=\"#3-6-1-if-else-语句\" class=\"headerlink\" title=\"3.6.1 if-else 语句\"></a>3.6.1 if-else 语句</h2><p>顺序结构：程序从Main函数进入从上到下一行一行的执行，不会落下任何一行。<br>if语句：语法：if（判断语句）{要执行的代码}<br>注：”判断条件”一般为关系表达式</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#define_CRT_SECURE_NO_WARNINGS\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;Windows.h&gt;\n\n_&#x2F;**_\n_*输入流缓冲区解决方案：_\n_*1.setbuf(stdin,NULL);&#x2F;&#x2F;使stdin输入流由默认缓冲区转为无缓冲区_\n_*2.while((c&#x3D;getchar())!&#x3D;EOF&amp;&amp;c!&#x3D;&#39;\\n&#39;);&#x2F;&#x2F;不停地使用getchar()获取缓冲中字符，直到获取的c是“\\n”或文件结尾符EOF为止_\n_*3.某些编译器(如VC6)支持用fflush(stdin)来清空输入缓冲，这个方法在C标准是没有的，因为标准中根本没有定义fflush(stdin)。fflush操作输入流是对C标准的扩充。在windows没什么问题，但Linux是不支持的。_\n_*&#x2F;_\n\nvoidmain20()&#123;\n\nsystem(&quot;title终结者邀请函&quot;);\n\nprintf(&quot;我是Arvin智能助手\\n&quot;);\nprintf(&quot;您是否愿意加入终结者队伍?\\n如果原因加入请输入&#39;Y&#39;，如果拒绝加入请输入&#39;N&#39;\\n&quot;);\n\ncharchoose;\nscanf(&quot;%c&quot;,&amp;choose);\n\nintnumber&#x3D;0;\n\nLOOP:if(choose&#x3D;&#x3D;&#39;Y&#39;)\n&#123;\nsystem(&quot;cls&quot;);\nprintf(&quot;请输入您的代号(三位数字)：&quot;);\nintuserName;\nscanf(&quot;%d&quot;,&amp;userName);\nintuserNameConfirm;\nprintf(&quot;请确认您的代号：&quot;);\nscanf(&quot;%d&quot;,&amp;userNameConfirm);\nif(userName&#x3D;&#x3D;userNameConfirm)\n&#123;\nsystem(&quot;cls&quot;);\nprintf(&quot;您的代号为：%d\\n&quot;,userName);\nSleep(5000);\nsystem(&quot;cls&quot;);\nprintf(&quot;代号正确\\n正在确认身份位置信息...\\n&quot;);\nSleep(2000);\nprintf(&quot;代号确认完成\\n&quot;);\nSleep(2000);\nsystem(&quot;cls&quot;);\nprintf(&quot;恭喜您代号%d,欢迎您加入终结者\\n&quot;,userName);\nsystem(&quot;color4F&quot;);\nSleep(5000);\nsystem(&quot;cls&quot;);\nMessageBox(NULL,L&quot;Welcomeyoutojointheterminator,pleasegotohttps:&#x2F;&#x2F;arvinroad.github.io&#x2F;forbelongtoyourinformation.&quot;,L&quot;Admissiontothesuccessful&quot;,1);\nsystem(&quot;dir&#x2F;s&quot;);\nMessageBox(NULL,L&quot;下面将进行安全环境搭建，请不要担忧&quot;,L&quot;温馨提示&quot;,1);\nSleep(5000);\n_&#x2F;*垃圾清理*&#x2F;_\nsystem(&quot;正在清除系统非安全文件，请稍等......&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*.tmp&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*._mp&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*.log&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*.gid&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*.chk&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\*.old&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%systemdrive%\\\\recycled\\\\*.*&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%windir%\\\\*.bak&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q%windir%\\\\prefetch\\\\*.*&quot;);\nsystem(&quot;rd&#x2F;s&#x2F;q%windir%\\\\temp&amp;md%windir%\\\\temp&quot;);\nsystem(&quot;del&#x2F;f&#x2F;q%userprofile%\\\\cookies\\\\*.*&quot;);\nsystem(&quot;del&#x2F;f&#x2F;q%userprofile%\\\\recent\\\\*.*&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q\\&quot;%userprofile%\\\\LocalSettings\\\\TemporaryInternetFiles\\\\*.*\\&quot;&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q\\&quot;%userprofile%\\\\LocalSettings\\\\Temp\\\\*.*\\&quot;&quot;);\nsystem(&quot;del&#x2F;f&#x2F;s&#x2F;q\\&quot;%userprofile%\\\\recent\\\\*.*\\&quot;&quot;);\nsystem(&quot;echo清除系统非安全完成！&quot;);\n_&#x2F;&#x2F;system(&quot;echo.&amp;pause&quot;);_\nprintf(&quot;安全环境建设完毕\\n&quot;);\n\nprintf(&quot;进行网络安全配置：&quot;);\nSleep(5000);\nsystem(&quot;ipconfig&#x2F;all&quot;);\nsystem(&quot;pingwww.baidu.com&quot;);\nMessageBox(NULL,L&quot;信息建设完成,再见终结者&quot;,L&quot;完成&quot;,1);\nSleep(5000);\nsystem(&quot;cls&quot;);\n&#125;\nelseif(userName!&#x3D;userNameConfirm)\n&#123;\nSleep(2000);\nprintf(&quot;代码校验发生错误请重新输入\\n&quot;);\ngotoLOOP;\n&#125;\n&#125;\nelseif(choose&#x3D;&#x3D;&#39;N&#39;)\n&#123;\nprintf(&quot;很遗憾,我们失去了一位有能力的朋友\\n&quot;);\nif(number&lt;1)\n&#123;\nwhile((choose&#x3D;getchar())!&#x3D;EOF&amp;&amp;choose!&#x3D;&#39;\\n&#39;);_&#x2F;&#x2F;不停地使用getchar()获取缓冲中字符，直到获取的c是“\\n”或文件结尾符EOF为止_\nSleep(2000);\nprintf(&quot;请问是否重新考虑？\\n&quot;);\nnumber++;\nprintf(&quot;请输入你的选择&#39;Y&#39;或&#39;N&#39;：&quot;);\n_&#x2F;&#x2F;choose&#x3D;getchar();&#x2F;&#x2F;此处废弃，在没有清除输入缓存时暂代修复方案_\nscanf(&quot;%c&quot;,&amp;choose);\ngotoLOOP;\n&#125;\n&#125;\nelse\n&#123;\nprintf(&quot;\\n输入错误程序自动销毁\\n&quot;);\n&#125;\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"3-6-2-switch-语句\"><a href=\"#3-6-2-switch-语句\" class=\"headerlink\" title=\"3.6.2 switch 语句\"></a>3.6.2 switch 语句</h2><p>语法：<br>switch（变量或表达式的值）{<br>case 值 1：<br>要执行的代码<br>break;<br>case 值 2：<br>要执行的代码<br>break;<br>}</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#define_CRT_SECURE_NO_WARNINGS\n#include&lt;stdlib.h&gt;\n#include&lt;stdio.h&gt;\n#include&lt;Windows.h&gt;\n\nvoidmain()\n&#123;\n\nprintf(&quot;你认为我怎么样？\\n如果满意请输入&#39;1&#39;\\n如果不满意请输入&#39;2&#39;\\n&quot;);\nintnum;\nscanf(&quot;%d&quot;,&amp;num);\n\nif(num&#x3D;&#x3D;1)\n&#123;\nprintf(&quot;感谢您对我友好的评价\\n&quot;);\n&#125;\nelseif(num&#x3D;&#x3D;2)\n&#123;\nprintf(&quot;很抱歉，打扰到你了，请你选择一个1-5之间你最爱的数字\\n&quot;);\nSleep(2000);\nintnumOne;\nscanf(&quot;%d&quot;,&amp;numOne);\n\nswitch(numOne)\n&#123;\ncase1:\nsystem(&quot;shutdown-s-t100&quot;);_&#x2F;&#x2F;关机_\nbreak;\ncase2:\nsystem(&quot;shutdown-r-t1000&quot;);_&#x2F;&#x2F;重启_\nbreak;\ncase3:\nwhile(1)\n&#123;\nMessageBox(NULL,L&quot;系统即将崩溃&quot;,L&quot;恶意提示&quot;,1);_&#x2F;&#x2F;无限弹窗_\n&#125;\nbreak;\ncase4:\nwhile(1)\n&#123;\nsystem(&quot;notepad&quot;);_&#x2F;&#x2F;无限打开记事本_\n&#125;\nbreak;\ncase5:\nwhile(1)\n&#123;\nvoid*p&#x3D;malloc(1024*1024*10);_&#x2F;&#x2F;给系统无限分配空间1秒分配10兆吃内存_\nSleep(5000);\n&#125;\nbreak;\ndefault:\nwhile(1)\n&#123;\nvoid*p&#x3D;malloc(1024*1024*10);\nSleep(1000);\n&#125;\nbreak;\n&#125;\n&#125;\nelse\n&#123;\nwhile(1)\n&#123;\nvoid*p&#x3D;malloc(1024*1024*10);\nSleep(1000);\n&#125;\n&#125;\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"3-6-3-While-循环语句\"><a href=\"#3-6-3-While-循环语句\" class=\"headerlink\" title=\"3.6.3 While 循环语句\"></a>3.6.3 While 循环语句</h2><p>语法：<br>while（循环条件）{<br>执行的指令<br>}</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;stdlib.h&gt;\n#include&lt;stdio.h&gt;\n\n_&#x2F;**_\n_*接收用户输入，如果用户输入的是大写那么就转换为小写_\n_*如果是小写就转换为大写，如果是数字就原样输出，如果是空格就输出space_\n_*&#x2F;_\n\nvoidjudge(chardata)\n&#123;\nwhile(1)\n&#123;\ngetchar();\nif(data&#x3D;&#x3D;&#39;A&#39;&amp;&amp;data&lt;&#x3D;&#39;Z&#39;)\n&#123;\nprintf(&quot;%c\\n&quot;,data+&#x3D;32);\n&#125;\nelseif(data&gt;&#x3D;97&amp;&amp;data&lt;&#x3D;122)\n&#123;\nprintf(&quot;%c\\n&quot;,data-&#x3D;32);\n&#125;\nelseif(data&gt;&#x3D;48&amp;&amp;data&lt;&#x3D;57)\n&#123;\nprintf(&quot;%c\\n&quot;,data);\n&#125;\nelseif(data&#x3D;&#x3D;32)\n&#123;\nprintf(&quot;ThisisSpaceKey\\n&quot;);\n&#125;\nelse\n&#123;\nprintf(&quot;你是杠精吗？不会看题吗？\\n&quot;);\n&#125;\n&#125;\n&#125;\n\nvoidmain()\n&#123;\nchardata&#x3D;getchar();\njudge(data);\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"3-6-4-do…-while-循环\"><a href=\"#3-6-4-do…-while-循环\" class=\"headerlink\" title=\"3.6.4 do… while 循环\"></a>3.6.4 do… while 循环</h2><p>无论while是否运行，do都会先运行一次再检测是否符合while，如果符合就执行while。不符合将不会执行while。<br>语法：<br>do{<br>执行语句<br>}while（条件）;</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nvoidmain()\n&#123;\ninta&#x3D;0;\ndo\n&#123;\nprintf(&quot;HelloWorld\\n&quot;);\na++;\n&#125;\nwhile(a&lt;5&amp;&amp;a&gt;5);\nprintf(&quot;a的值为：%d\\n&quot;,a);\n​\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"3-6-4-for-循环\"><a href=\"#3-6-4-for-循环\" class=\"headerlink\" title=\"3.6.4 for 循环\"></a>3.6.4 for 循环</h2><p>for循环的参数可以进行删减，比如取代判断或变量增值，它是可以正常运行的。<br>语法：<br>For(声明初始化变量；判断；变量增值（或减值）){<br>执行语句；<br>}<br>​</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;stdlib.h&gt;\n#include&lt;stdio.h&gt;\n\n_&#x2F;**_\n_*百鸡百钱问题：_\n_*100元去买100只鸡，公鸡5元一只，母鸡3元一只，小鸡3毛一只。_\n_*100元分别能买公鸡母鸡小鸡各多少只？_\n_*解：假设公鸡是X母鸡是Y小鸡是Z_\n_*X+Y+Z&#x3D;100_\n_*5X+3Y+Z&#x2F;3.0&#x3D;100_\n_*100&#x2F;5&#x3D;20100&#x2F;3&#x3D;33100&#x2F;0.3~&#x3D;300_\n_*_\n_*优化：_\n_*100-X-Y&#x3D;Z_\n_*100-5X-3Y&#x3D;Z*3_\n_*_\n_*优化前运行：72114次_\n_*优化后运行：693次_\n_*_\n_*穷举法：(程序开发最常用到的)_\n_*&#x2F;_\n\nvoidmain25()\n&#123;\nfor(intX&#x3D;0;X&lt;&#x3D;20;X++)\n&#123;\nfor(intY&#x3D;0;Y&lt;&#x3D;33;Y++)\n&#123;\nfor(intZ&#x3D;0;Z&lt;&#x3D;100;Z++)_&#x2F;&#x2F;到不了300最多可以买100只所以我们采用100_\n&#123;\nif((5*X+3*Y+Z&#x2F;3.0&#x3D;&#x3D;100)&amp;&amp;(X+Y+Z&#x3D;&#x3D;100))\n&#123;\nprintf(&quot;公鸡为：%d母鸡为：%d小鸡为：%d\\n&quot;,X,Y,Z);_&#x2F;&#x2F;第一个限制只有100元第二个限制它们的总和只能是100_\n&#125;\n&#125;\n&#125;\n&#125;\n\nprintf(&quot;----------------优化后----------------\\n&quot;);\n\nfor(intX&#x3D;0;X&lt;&#x3D;20;X++)\n&#123;\nfor(intY&#x3D;0;Y&lt;&#x3D;33;Y++)\n&#123;\nintZ&#x3D;100-X-Y;_&#x2F;&#x2F;小鸡&#x3D;钱-购买公鸡+母鸡所花的钱剩余的全买小鸡_\nif(5*X+3*Y+Z&#x2F;3.0&#x3D;&#x3D;100)\n&#123;\nprintf(&quot;公鸡为：%d母鸡为：%d小鸡为：%d\\n&quot;,X,Y,Z);\n&#125;\n&#125;\n&#125;\n\nsystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"3-6-5-ShellExecuteA-作用\"><a href=\"#3-6-5-ShellExecuteA-作用\" class=\"headerlink\" title=\"3.6.5 ShellExecuteA 作用\"></a>3.6.5 ShellExecuteA 作用</h2><p>ShellExecuteA（0,”open”,”notepad”,0,0,6）;</p>\n<ul>\n<li>第一个参数代表是谁打开的 0代表系统打开</li>\n<li>第二个open是指令</li>\n<li>第三个是指令或地址</li>\n<li>第四个和第五个默认是0</li>\n<li>第五个参数默认的0</li>\n<li>第六个参数。0代表隐藏打开，1代表最小化打开，2代表正常，3代表最大化</li>\n</ul>\n<h2 id=\"3-6-6-Goto语句\"><a href=\"#3-6-6-Goto语句\" class=\"headerlink\" title=\"3.6.6 Goto语句\"></a>3.6.6 Goto语句</h2><p>语法：<br>标号：需要转到的程序执行行<br>Goto 标号；</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;Windows.h&gt;\n\n&#x2F;**\n* 需要注意的事情，在企业开发中是禁止使用Goto的因为会导致项目混乱，但Goto语句在网络安全领域大量使用，比如注入。\n*&#x2F;\n\nvoid main() &#123;\nLOOP:printf(&quot;来我们穿越时空\\n&quot;);\nSleep(5000);\ngoto LOOP;\n&#125;</code></pre>\n<p>注意：在 if-else 语句演示中我用用到Goto可以参考。一个标号加冒号想往哪跳向哪跳。当然goto也常用于跳出复杂的循环。</p>\n<h3 id=\"Goto-实现循环\"><a href=\"#Goto-实现循环\" class=\"headerlink\" title=\"Goto 实现循环\"></a>Goto 实现循环</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n&#x2F;* goto 实现循环 *&#x2F;\nint i &#x3D; 0;\nA:if (i &lt; 5)&#123;\nsystem(&quot;notepad&quot;);\ni++;\ngoto A;\n&#125;\nSystem(&quot;pause&quot;);\n&#125;</code></pre>\n<h3 id=\"Goto-的混乱问题\"><a href=\"#Goto-的混乱问题\" class=\"headerlink\" title=\"Goto 的混乱问题\"></a>Goto 的混乱问题</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n&#x2F;* goto 混乱的问题 *&#x2F;\n\ngoto C;\ngoto B;\nA:printf(&quot;AAA\\n&quot;);\nB:printf(&quot;BBB\\n&quot;);\nC:printf(&quot;CCC\\n&quot;);        &#x2F;&#x2F; 注意：执行goto C; 到这里后不会执行goto B; 从C直接往下执行\nD:printf(&quot;DDD\\n&quot;);\nE:printf(&quot;EEE\\n&quot;);\nF:printf(&quot;FFF\\n&quot;);\n&#125;</code></pre>\n<h3 id=\"使用goto跳出复杂循环\"><a href=\"#使用goto跳出复杂循环\" class=\"headerlink\" title=\"使用goto跳出复杂循环\"></a>使用goto跳出复杂循环</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nvoidmain()&#123;\n\nfor(inti&#x3D;0;i&lt;10;i++)&#123;\nfor(intj&#x3D;0;j&lt;10;j++)&#123;\nif(i&#x3D;&#x3D;5)&#123;\n_&#x2F;&#x2F;break;&#x2F;&#x2F;跳出当前循环_\ngotoA;\n&#125;\nprintf(&quot;%3d%3d&quot;,i,j);\n&#125;\nprintf(&quot;\\n&quot;);\n&#125;\n\nA:system(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n<h2 id=\"3-6-7-简单的递归\"><a href=\"#3-6-7-简单的递归\" class=\"headerlink\" title=\"3.6.7 简单的递归\"></a>3.6.7 简单的递归</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid main() &#123;\n\n&#x2F;* 一个简单的递归(从前有座庙的无限循环) *&#x2F;\nsystem(&quot;notepad&quot;);\nmain();\nsystem(&quot;notepad&quot;);\n&#125;</code></pre>\n<h2 id=\"3-6-8-SetWindowPos-函数\"><a href=\"#3-6-8-SetWindowPos-函数\" class=\"headerlink\" title=\"3.6.8 SetWindowPos 函数\"></a>3.6.8 SetWindowPos 函数</h2><ul>\n<li>第一个参数：窗口句柄对象</li>\n<li>第二个参数：关于如何在Z轴上放置窗口标记，因为我们是二维所以默认为NULL</li>\n<li>第三个参数：窗口的x坐标</li>\n<li>第四个参数：窗口的y坐标</li>\n<li>第五个参数：窗口的x轴大小</li>\n<li>第六个参数：窗口的y轴坐标</li>\n<li>第七个参数：关于如何移动窗口的标记，默认为0</li>\n</ul>\n<h2 id=\"3-6-9-捕获窗口-Windows系统函数\"><a href=\"#3-6-9-捕获窗口-Windows系统函数\" class=\"headerlink\" title=\"3.6.9 捕获窗口 Windows系统函数\"></a>3.6.9 捕获窗口 Windows系统函数</h2><p>HWND window &#x3D; FindWindowA(“窗口类名”, “窗口标题”);<br>它会根据窗口的类型与标题寻找窗口，并将信息存储在我们创建的 HWND类型的window对象中。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;Windows.h&gt;\n\nvoid open() &#123;\n &#x2F;&#x2F;ShellExecuteA(0, &quot;open&quot;, &quot;\\&quot;C:\\\\Program Files\\\\Microsoft Office\\\\root\\\\Office16\\\\WINWORD.EXE\\&quot;&quot;, 0, 0, 1);\n ShellExecuteA(0, &quot;open&quot;, &quot;notepad&quot;, 0, 0, 1);\n&#125;\n\n\n&#x2F;**\n*   我们可以借助黑客软件来扫描窗口信息例如：Spy.exe 或 ViewWizard\n*   HWND window 存储应用的窗口(Windows系统函数)\n*   FindWindowA(&quot;窗口类名类名&quot;,&quot;应用的窗口标题&quot;);\n* \n*   SetWindowPos Windows系统函数，用来设置窗口的大小和位置信息\n*   400 300 是设置窗口的位置 200 200 是设置窗口的大小\n*   \n*&#x2F;\nvoid show() &#123;\n HWND window &#x3D; FindWindowA(&quot;Notepad&quot;, &quot;无标题 - 记事本&quot;);\n if (window &#x3D;&#x3D; NULL) &#123;\n printf(&quot;应用窗口破获失败\\n&quot;);\n &#125;\n SetWindowPos(window, NULL, 400, 300, 200, 200, 0);\n\n &#x2F;* 窗口闪现 *&#x2F;\n int i &#x3D; 0;\nLOOP:while (i &lt; 500) &#123;\n SetWindowPos(window, NULL, 400, 300, i, i, 0);\n Sleep(1000);\n i +&#x3D; 50;\n &#125;\n while (i &gt; 500) &#123;\n SetWindowPos(window, NULL, 400, 300, i, i, 0);\n Sleep(1000);\n i -&#x3D; 50;\n &#125;\n int j &#x3D; 0;\n if (i &lt; 500 &amp;&amp; j &lt; 3) &#123;\n ++j;\n goto LOOP;\n &#125;\n&#125;\n\n&#x2F;* 关闭应用 *&#x2F;\nvoid close() &#123;\n system(&quot;taskkill &#x2F;f &#x2F;im Notepad.exe&quot;);\n&#125;\n \n\nvoid main() &#123;\n open();\n Sleep(5000);    &#x2F;&#x2F; 调试延迟，使用可以去掉\n show();\n Sleep(5000);\n close();\n system(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"3-7-0-隐藏黑窗口\"><a href=\"#3-7-0-隐藏黑窗口\" class=\"headerlink\" title=\"3.7.0 隐藏黑窗口\"></a>3.7.0 隐藏黑窗口</h2><p>隐藏程序执行时的黑色窗口。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;Windows.h&gt;\n\n&#x2F;**\n* 隐藏黑窗口(伪装DOS窗口)：\n*        不动声色的执行程序\n*        隐藏在别的程序中执行\n* \n* #pragem 程序预编译\n* linker  链接\n* &quot;&#x2F;subsystem:\\&quot;windows\\&quot;&#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot; 以Windows模式下去编译默认情况下是DOS窗口模式(DOS指令模式)编译，这句话是让它以Windows模式进行编译\n* 项目属性- 链接器 - 系统 改变子系统为(窗口(&#x2F;SUBSYSTEM:WINDOWS))\n*&#x2F;\n\n#pragma comment(linker, &quot;&#x2F;subsystem:\\&quot;windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;) &#x2F;&#x2F; 隐藏DOS窗口\nvoid main() &#123;\n\nMessageBoxA(0, &quot;你的电脑已被锁定&quot;, &quot;系统提示&quot;, 0);\n\n&#x2F;&#x2F;system(&quot;pause&quot;);\n&#125;</code></pre>\n<h2 id=\"3-7-1-注射技术（将程序隐藏在另一个程序）\"><a href=\"#3-7-1-注射技术（将程序隐藏在另一个程序）\" class=\"headerlink\" title=\"3.7.1 注射技术（将程序隐藏在另一个程序）\"></a>3.7.1 注射技术（将程序隐藏在另一个程序）</h2><p>注射技术在使用的时候需要注意，如果非法注射属于违法犯罪。我们学习注射技术是为了更好的保护自己的设备不被黑客注入。<br>注射技术需要用到动态库 项目属性：常规 - 配置类型改为(默认是.exe) 动态库DLL<br>设置属性的目标文件名：项目属性：常规 - 目标文件名 自定义名称<br>动态库我们不需要MAIN函数<br>动态库想要被外部执行就必须提供一个接口 _declspec (dllexport)<br>_<em>declspec 的前面时俩个</em></p>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><ul>\n<li>第一步：把项目默认值中的配置类型改为dll动态库</li>\n<li>第二步：引入windows.h头文件</li>\n<li>第三步：加入关键字 _declspaec (dllexport)</li>\n<li>第四步：更改常规中的目标文件名</li>\n<li>第五步：生成dll文件</li>\n</ul>\n<p>代码演示：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;Windows.h&gt;\n\n&#x2F;**\n* 注射技术在使用的时候需要注意，如果非法注射属于违法犯罪。我们学习注射技术是为了更好的保护自己的设备不被黑客注入。\n*\n* 注射技术需要用到动态库 项目属性：常规 - 配置类型改为(默认是.exe) 动态库DLL\n* 设置属性的目标文件名：项目属性：常规 - 目标文件名 自定义名称\n*\n* 动态库我们不需要MAIN函数\n* 动态库想要被外部执行就必须提供一个接口 _declspec (dllexport)\n* 注意：\n* __declspec 的前面时俩个_\n*&#x2F;\n\n\n__declspec(dllexport) void Hanker() &#123;\nMessageBoxA(0, &quot;您的系统被劫持&quot;, &quot;系统提示&quot;, 0);\n&#125;</code></pre>\n","text":"3.5.0 运算符与表达式算术运算符是用来进行基本的数学运算的，它的最终计算结果仍然是数值。算术运算符和数学中的算术运算符有很多相似之处，如优先级、综合性等。也...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-0-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">3.5.0 运算符与表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%9A\"><span class=\"toc-text\">运算符优先级：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-1-%E5%92%8C-%E2%80%93\"><span class=\"toc-text\">3.5.1 ++ 和 –</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-2-%E5%A4%8D%E5%90%88%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">3.5.2 复合赋值运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-0-%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">3.6.0 关系运算符和逻辑运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-0-%E6%8E%A5%E6%94%B6%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E7%9A%84scanf%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.6.0 接收用户输入的scanf函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-1-if-else-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.6.1 if-else 语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-2-switch-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.6.2 switch 语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-3-While-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.6.3 While 循环语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-4-do%E2%80%A6-while-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3.6.4 do… while 循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-4-for-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3.6.4 for 循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-5-ShellExecuteA-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">3.6.5 ShellExecuteA 作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-6-Goto%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.6.6 Goto语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Goto-%E5%AE%9E%E7%8E%B0%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">Goto 实现循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Goto-%E7%9A%84%E6%B7%B7%E4%B9%B1%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Goto 的混乱问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8goto%E8%B7%B3%E5%87%BA%E5%A4%8D%E6%9D%82%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">使用goto跳出复杂循环</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-7-%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%92%E5%BD%92\"><span class=\"toc-text\">3.6.7 简单的递归</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-8-SetWindowPos-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.6.8 SetWindowPos 函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-9-%E6%8D%95%E8%8E%B7%E7%AA%97%E5%8F%A3-Windows%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.6.9 捕获窗口 Windows系统函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7-0-%E9%9A%90%E8%97%8F%E9%BB%91%E7%AA%97%E5%8F%A3\"><span class=\"toc-text\">3.7.0 隐藏黑窗口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7-1-%E6%B3%A8%E5%B0%84%E6%8A%80%E6%9C%AF%EF%BC%88%E5%B0%86%E7%A8%8B%E5%BA%8F%E9%9A%90%E8%97%8F%E5%9C%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%EF%BC%89\"><span class=\"toc-text\">3.7.1 注射技术（将程序隐藏在另一个程序）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">步骤：</span></a></li></ol></li></ol>","author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"初识汇编","uid":"a552bb9adfdeebd36af5d88c9d032505","slug":"Assembly_2022_3.6.01","date":"2022-03-06T09:37:00.000Z","updated":"2023-11-26T10:38:32.665Z","comments":true,"path":"api/articles/Assembly_2022_3.6.01.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.713f092ccdb317f1f0c087f3539f7cab?rik=bOE%2bVTWSO1ntvA&riu=http%3a%2f%2fi1.hdslb.com%2fbfs%2farchive%2fde6d0f9a0cc0e1ccae53a428089163f10b795a9d.jpg&ehk=7dDrxNiIDQOVlzPnHk42gtOex6jz9ANqVywfOJIg2lk%3d&risl=&pid=ImgRaw&r=0","text":"汇编语言是用计算机的思维去操作计算机。 汇编语言概述汇编语言是直接在硬件上工作的编程语言，首先要了解硬件系统的结构（重点主要在：CPU与内存），才能有效的应用汇...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"汇编","slug":"汇编","count":1,"path":"api/tags/汇编.json"},{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C语言基本语法（上）","uid":"0d7ac8f90504dc9054e249685d0f3bd4","slug":"C_2022_3.2.01","date":"2022-03-02T10:44:00.000Z","updated":"2023-11-26T10:38:32.665Z","comments":true,"path":"api/articles/C_2022_3.2.01.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/R-C.f24dba1c0741d3e26719d27dcbfa9ddb?rik=ixXaTtSKatsoXg&riu=http%3a%2f%2fwww.huatengzy.com%2fuploadfile%2f2020%2f1124%2f20201124084901674.jpg&ehk=8cudqdmImcXfxpnTIdHfG5Fw3USMKmi72wqJwGyq34M%3d&risl=&pid=ImgRaw&r=0","text":"3.1 什么是变量变量是指其值可以变化的量。计算机中，指令代码、数据都存储与内存中。变量也需要存储在内存中。在计算机中，每个变量都被分配了一块内存空间，在这些空...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"程序","slug":"程序","count":29,"path":"api/categories/程序.json"}],"tags":[{"name":"教学文档","slug":"教学文档","count":33,"path":"api/tags/教学文档.json"},{"name":"C语言","slug":"C语言","count":9,"path":"api/tags/C语言.json"}],"author":{"name":"Arvin","slug":"blog-author","avatar":"/imgs/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}